/* A Bison parser, made by GNU Bison 2.7.12-4996.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.12-4996"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     FLOAT16 = 296,
     LONG = 297,
     SIGNED = 298,
     UNSIGNED = 299,
     FLOAT = 300,
     DOUBLE = 301,
     CONST = 302,
     VOLATILE = 303,
     VOID = 304,
     VALIST = 305,
     STRUCT = 306,
     UNION = 307,
     ENUM = 308,
     ELLIPSIS = 309,
     CASE = 310,
     DEFAULT = 311,
     IF = 312,
     SWITCH = 313,
     WHILE = 314,
     DO = 315,
     FOR = 316,
     GOTO = 317,
     CONTINUE = 318,
     BREAK = 319,
     RETURN = 320,
     IFX = 321,
     ELSE = 322,
     CLASS = 323,
     THISCLASS = 324,
     PROPERTY = 325,
     SETPROP = 326,
     GETPROP = 327,
     NEWOP = 328,
     RENEW = 329,
     DELETE = 330,
     EXT_DECL = 331,
     EXT_STORAGE = 332,
     IMPORT = 333,
     DEFINE = 334,
     VIRTUAL = 335,
     ATTRIB = 336,
     PUBLIC = 337,
     PRIVATE = 338,
     TYPED_OBJECT = 339,
     ANY_OBJECT = 340,
     _INCREF = 341,
     EXTENSION = 342,
     ASM = 343,
     TYPEOF = 344,
     WATCH = 345,
     STOPWATCHING = 346,
     FIREWATCHERS = 347,
     WATCHABLE = 348,
     CLASS_DESIGNER = 349,
     CLASS_NO_EXPANSION = 350,
     CLASS_FIXED = 351,
     ISPROPSET = 352,
     CLASS_DEFAULT_PROPERTY = 353,
     PROPERTY_CATEGORY = 354,
     CLASS_DATA = 355,
     CLASS_PROPERTY = 356,
     SUBCLASS = 357,
     NAMESPACE = 358,
     NEW0OP = 359,
     RENEW0 = 360,
     VAARG = 361,
     DBTABLE = 362,
     DBFIELD = 363,
     DBINDEX = 364,
     DATABASE_OPEN = 365,
     ALIGNOF = 366,
     ATTRIB_DEP = 367,
     __ATTRIB = 368,
     BOOL = 369,
     _BOOL = 370,
     _COMPLEX = 371,
     _IMAGINARY = 372,
     RESTRICT = 373,
     THREAD = 374,
     WIDE_STRING_LITERAL = 375,
     BUILTIN_OFFSETOF = 376,
     PRAGMA = 377,
     STATIC_ASSERT = 378,
     _ALIGNAS = 379
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 315 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 356 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  318
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   44238

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  150
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1336
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2237

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   379

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   144,     2,     2,   138,   146,   141,     2,
     128,   129,   125,   142,   133,   143,   136,   145,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   137,   131,
     126,   132,   127,   149,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   139,     2,   140,   147,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   135,   148,   134,   130,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1306,  1308,  1312,
    1316,  1320,  1324,  1328,  1332,  1334,  1338,  1342,  1346,  1350,
    1352,  1356,  1360,  1364,  1368,  1371,  1373,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1406,  1410,  1414,  1418,  1422,
    1426,  1430,  1434,  1438,  1440,  1444,  1448,  1452,  1456,  1458,
    1462,  1466,  1470,  1474,  1476,  1480,  1484,  1488,  1492,  1494,
    1498,  1502,  1504,  1508,  1512,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1604,  1610,  1612,  1616,  1620,  1624,  1628,  1632,  1636,  1640,
    1644,  1646,  1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,
    1664,  1666,  1668,  1672,  1676,  1679,  1681,  1685,  1689,  1691,
    1693,  1696,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1730,  1733,  1736,  1739,  1742,  1748,  1755,  1762,  1765,  1771,
    1773,  1775,  1777,  1782,  1784,  1788,  1792,  1796,  1800,  1804,
    1808,  1810,  1814,  1818,  1822,  1826,  1828,  1832,  1836,  1840,
    1844,  1846,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
    1879,  1883,  1887,  1891,  1895,  1899,  1903,  1907,  1911,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1987,  1993,  1999,  2005,  2011,  2016,  2021,  2026,  2031,  2037,
    2043,  2049,  2055,  2060,  2065,  2070,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2117,  2123,  2127,  2131,  2134,  2137,  2139,
    2143,  2147,  2151,  2155,  2157,  2160,  2164,  2168,  2171,  2174,
    2177,  2179,  2182,  2186,  2190,  2192,  2194,  2196,  2198,  2200,
    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,
    2222,  2224,  2228,  2232,  2235,  2240,  2245,  2247,  2251,  2254,
    2256,  2259,  2262,  2265,  2270,  2275,  2279,  2283,  2288,  2294,
    2299,  2306,  2313,  2318,  2324,  2329,  2336,  2343,  2349,  2355,
    2358,  2361,  2364,  2370,  2374,  2380,  2387,  2393,  2401,  2409,
    2418,  2427,  2435,  2443,  2447,  2451,  2455,  2460,  2464,  2470,
    2476,  2483,  2491,  2498,  2503,  2505,  2507,  2509,  2511,  2513,
    2515,  2517,  2519,  2521,  2524,  2526,  2528,  2530,  2532,  2534,
    2536,  2538,  2540,  2542,  2544,  2546,  2548,  2550,  2552,  2554,
    2556,  2558,  2560,  2562,  2567,  2572,  2577,  2579,  2581,  2583,
    2585,  2587,  2589,  2591,  2593,  2595,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2635,  2637,  2642,  2647,  2652,
    2654,  2656,  2659,  2662,  2666,  2672,  2675,  2679,  2685,  2691,
    2697,  2699,  2703,  2706,  2709,  2713,  2717,  2720,  2724,  2728,
    2733,  2737,  2741,  2745,  2749,  2753,  2757,  2762,  2767,  2772,
    2774,  2776,  2781,  2785,  2788,  2792,  2796,  2800,  2804,  2808,
    2812,  2816,  2820,  2824,  2828,  2832,  2836,  2838,  2840,  2842,
    2845,  2847,  2850,  2852,  2855,  2857,  2860,  2862,  2865,  2867,
    2870,  2872,  2875,  2877,  2880,  2882,  2885,  2887,  2890,  2892,
    2895,  2897,  2900,  2902,  2905,  2907,  2910,  2912,  2915,  2917,
    2920,  2922,  2925,  2927,  2930,  2932,  2935,  2937,  2940,  2942,
    2945,  2947,  2950,  2952,  2955,  2957,  2960,  2962,  2965,  2967,
    2970,  2972,  2974,  2976,  2979,  2981,  2984,  2986,  2989,  2991,
    2994,  2999,  3005,  3007,  3009,  3011,  3014,  3016,  3019,  3021,
    3024,  3026,  3029,  3034,  3040,  3042,  3045,  3047,  3050,  3052,
    3055,  3057,  3060,  3062,  3065,  3067,  3070,  3075,  3081,  3083,
    3086,  3088,  3091,  3093,  3096,  3098,  3101,  3103,  3106,  3108,
    3111,  3116,  3122,  3126,  3130,  3132,  3136,  3140,  3144,  3148,
    3150,  3152,  3154,  3159,  3164,  3169,  3173,  3178,  3183,  3188,
    3192,  3194,  3198,  3203,  3207,  3212,  3217,  3222,  3227,  3231,
    3234,  3238,  3242,  3246,  3250,  3253,  3256,  3259,  3263,  3268,
    3270,  3272,  3275,  3279,  3283,  3287,  3291,  3294,  3297,  3300,
    3304,  3309,  3311,  3313,  3315,  3317,  3320,  3323,  3325,  3327,
    3332,  3337,  3339,  3341,  3343,  3345,  3347,  3349,  3351,  3353,
    3355,  3360,  3362,  3365,  3369,  3376,  3382,  3384,  3387,  3391,
    3396,  3399,  3403,  3407,  3411,  3415,  3420,  3425,  3430,  3433,
    3437,  3441,  3445,  3450,  3455,  3459,  3464,  3467,  3471,  3475,
    3479,  3484,  3489,  3491,  3494,  3497,  3501,  3503,  3505,  3508,
    3511,  3515,  3517,  3519,  3522,  3525,  3529,  3531,  3534,  3538,
    3541,  3544,  3546,  3549,  3553,  3556,  3558,  3561,  3565,  3569,
    3571,  3574,  3578,  3582,  3584,  3587,  3591,  3595,  3597,  3600,
    3604,  3608,  3610,  3613,  3617,  3621,  3623,  3627,  3632,  3636,
    3641,  3643,  3648,  3651,  3657,  3661,  3663,  3665,  3667,  3669,
    3671,  3673,  3677,  3681,  3684,  3687,  3689,  3691,  3695,  3698,
    3702,  3704,  3708,  3712,  3716,  3720,  3724,  3728,  3732,  3736,
    3738,  3741,  3745,  3749,  3751,  3754,  3756,  3759,  3762,  3765,
    3768,  3772,  3774,  3776,  3780,  3784,  3786,  3790,  3795,  3799,
    3804,  3808,  3812,  3817,  3821,  3826,  3828,  3832,  3836,  3841,
    3845,  3849,  3853,  3858,  3860,  3864,  3868,  3872,  3876,  3880,
    3882,  3886,  3889,  3891,  3893,  3895,  3897,  3899,  3902,  3904,
    3906,  3908,  3910,  3913,  3916,  3919,  3921,  3923,  3925,  3927,
    3929,  3932,  3934,  3936,  3941,  3949,  3951,  3955,  3956,  3963,
    3972,  3983,  3996,  4005,  4016,  4027,  4033,  4041,  4051,  4063,
    4071,  4081,  4091,  4095,  4100,  4105,  4109,  4113,  4117,  4122,
    4127,  4131,  4135,  4139,  4144,  4149,  4153,  4156,  4160,  4163,
    4167,  4172,  4177,  4181,  4185,  4187,  4189,  4191,  4193,  4195,
    4198,  4202,  4205,  4208,  4213,  4220,  4222,  4225,  4229,  4233,
    4236,  4242,  4249,  4252,  4255,  4258,  4261,  4264,  4267,  4269,
    4272,  4275,  4279,  4281,  4284,  4286,  4289,  4292,  4294,  4297,
    4300,  4303,  4306,  4309,  4312,  4314,  4316,  4319,  4322,  4324,
    4326,  4329,  4332,  4334,  4337,  4340,  4342,  4345,  4347,  4350,
    4353,  4359,  4365,  4373,  4381,  4387,  4393,  4397,  4400,  4406,
    4411,  4416,  4424,  4431,  4438,  4444,  4452,  4459,  4464,  4472,
    4482,  4486,  4491,  4496,  4502,  4508,  4515,  4523,  4530,  4537,
    4543,  4549,  4554,  4558,  4561,  4563,  4566,  4571,  4575,  4581,
    4586,  4590,  4593,  4596,  4599,  4603,  4607,  4611,  4615,  4618,
    4621,  4623,  4625,  4630,  4634,  4639,  4643,  4647,  4650,  4655,
    4659,  4664,  4668,  4672,  4675,  4677,  4680,  4682,  4684,  4687,
    4689,  4692,  4696,  4700,  4702,  4705,  4708,  4711,  4715,  4720,
    4725,  4728,  4731,  4734,  4737,  4739,  4742,  4744,  4749,  4756,
    4758,  4761,  4763,  4766,  4769,  4771,  4774,  4776,  4779,  4782,
    4785,  4788,  4790,  4793,  4796,  4800,  4802,  4804,  4805,  4812,
    4819,  4825,  4830,  4832,  4835,  4838,  4840,  4844,  4848,  4853,
    4855,  4857,  4860,  4863,  4870,  4877,  4884
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     398,     0,    -1,   222,   125,    -1,   222,   126,    -1,   155,
      -1,   222,   222,    -1,    28,    -1,    28,    -1,   153,    -1,
     153,   126,   216,   127,    -1,   153,   126,   216,    11,    -1,
     305,   341,    -1,   339,    -1,   305,   128,   129,    -1,   130,
     305,   128,   129,    -1,    80,   305,   341,    -1,    80,   339,
      -1,   305,   342,    -1,   340,    -1,    80,   305,   342,    -1,
      80,   340,    -1,   156,   382,    -1,   159,   382,    -1,   159,
     131,    -1,   157,   382,    -1,   158,   382,    -1,   156,   131,
      -1,   156,   330,   131,    -1,   156,   383,    -1,   160,    -1,
     159,   383,    -1,   161,    -1,   161,   131,    -1,   304,   341,
      -1,   304,   343,    -1,   304,   342,    -1,   164,   382,    -1,
     164,   383,    -1,   165,    -1,   164,    -1,   230,   132,   347,
      -1,   347,    -1,   230,   132,   348,    -1,   230,   132,     1,
      -1,   348,    -1,   168,    -1,   170,   133,   168,    -1,   171,
     133,   168,    -1,   169,    -1,   170,   133,   169,    -1,   171,
     133,   169,    -1,   170,   133,     1,    -1,   171,   133,     1,
      -1,   133,    -1,   170,   131,    -1,   171,   131,    -1,   172,
      -1,   166,    -1,   175,   172,    -1,   175,   166,    -1,   173,
     172,    -1,   173,   166,    -1,   175,   131,    -1,   173,   131,
      -1,   131,    -1,   173,    -1,   170,    -1,   173,   170,    -1,
     175,   170,    -1,   167,    -1,   174,   167,    -1,   175,   167,
      -1,   173,   167,    -1,   173,   171,    -1,   171,    -1,   170,
       1,    -1,   177,   134,    -1,   177,     1,   134,    -1,   304,
     222,   135,   175,    -1,   304,   222,   135,   174,     1,    -1,
     304,   222,   135,   174,    -1,   304,   222,   135,    -1,   304,
     222,   135,     1,    -1,   179,   134,    -1,   179,     1,   134,
      -1,   305,   222,   135,   175,    -1,   305,   222,   135,   174,
       1,    -1,   305,   222,   135,   174,    -1,   305,   222,   135,
      -1,   305,   222,   135,     1,    -1,   306,   222,   135,   174,
     134,    -1,   306,   222,   135,   175,   134,    -1,   306,   222,
     135,   134,    -1,   182,   134,    -1,   182,     1,   134,    -1,
     155,   135,   174,    -1,   222,   135,   174,    -1,   155,   135,
     175,    -1,   155,   135,    -1,   155,   135,   174,     1,    -1,
     155,   135,     1,    -1,   222,   135,   175,    -1,   222,   135,
      -1,   222,   135,   174,     1,    -1,   222,   135,     1,    -1,
     184,   134,    -1,   184,     1,   134,    -1,   135,   175,    -1,
     135,   174,     1,    -1,   135,     1,    -1,   135,    -1,   135,
     174,    -1,   230,   132,   347,    -1,   230,   132,   348,    -1,
     230,   132,     1,    -1,   230,     1,    -1,   185,    -1,   187,
     133,   185,    -1,   188,   133,   185,    -1,   186,    -1,   187,
     133,   186,    -1,   188,   133,   186,    -1,   187,     1,    -1,
      70,   310,   222,   135,    -1,    70,   310,   335,   222,   135,
      -1,    70,   310,   135,    -1,    70,   310,   335,   135,    -1,
      70,     1,   135,    -1,   189,    -1,   190,    71,   382,    -1,
     190,    72,   382,    -1,   190,    97,   382,    -1,   190,    93,
      -1,   190,    99,   224,    -1,   190,   134,    -1,   101,   310,
     222,   135,    -1,   101,   310,   335,   222,   135,    -1,   101,
     310,   135,    -1,   101,   310,   335,   135,    -1,   101,     1,
     135,    -1,   192,    -1,   193,    71,   382,    -1,   193,    72,
     382,    -1,   193,   134,    -1,   222,    -1,   195,   222,    -1,
     195,   382,    -1,    75,   382,    -1,   196,    -1,   197,   196,
      -1,    90,   128,   195,   129,   382,    -1,    90,   128,   249,
     129,   135,   197,   134,    -1,   249,   136,    90,   128,   249,
     129,   135,   197,   134,    -1,    91,   128,   249,   133,   195,
     129,    -1,   249,   136,    91,   128,   249,   133,   195,   129,
      -1,    91,   128,   249,   129,    -1,   249,   136,    91,   128,
     249,   129,    -1,    92,    -1,    92,   195,    -1,   230,   136,
      92,    -1,   249,   136,    92,   195,    -1,   203,   131,    -1,
     187,   131,    -1,   162,    -1,   191,    -1,   370,   162,    -1,
     370,   191,    -1,   194,    -1,    93,    -1,    95,    -1,    96,
      -1,   101,   128,   222,   129,   132,   347,   131,    -1,   131,
      -1,   370,   137,    -1,   370,   128,   222,   129,    -1,   163,
      -1,   305,    -1,   305,   292,    -1,   370,   305,   292,    -1,
     370,   305,    -1,   370,   181,    -1,   370,   178,    -1,   100,
     305,   292,    -1,   198,    -1,    94,   222,    -1,    94,   155,
      -1,    98,   222,    -1,   181,    -1,   178,    -1,   187,    -1,
     179,     1,    -1,   182,     1,    -1,   370,   163,    -1,   370,
     179,     1,    -1,   370,   182,     1,    -1,   188,    -1,   202,
      -1,   204,   202,    -1,   205,   202,    -1,   203,    -1,   204,
       1,    -1,   205,     1,    -1,   204,   203,    -1,   205,   203,
      -1,   305,    -1,   305,   335,    -1,   305,    -1,   305,   335,
      -1,    68,   222,    -1,    68,   222,   132,   207,    -1,    68,
     222,   137,   206,    -1,    68,   222,   137,   206,   132,   207,
      -1,    68,   154,    -1,    68,   154,   132,   207,    -1,    68,
     154,   137,   206,    -1,    68,   154,   137,   206,   132,   207,
      -1,   222,    -1,   222,    -1,   222,   132,   209,    -1,   239,
      -1,   305,   222,   132,   211,    -1,   305,   335,   222,   132,
     211,    -1,   208,    -1,   210,    -1,   212,    -1,   213,    -1,
     214,   133,   213,    -1,   211,    -1,   209,    -1,   207,    -1,
     222,   132,   211,    -1,   222,   132,   209,    -1,   222,   132,
     207,    -1,   215,    -1,   216,   133,   215,    -1,    68,    -1,
     217,   222,    -1,   217,   153,    -1,   222,   217,   222,    -1,
     222,   217,   153,    -1,   217,   222,   126,   214,   127,    -1,
     217,   153,   126,   214,   127,    -1,   222,   217,   222,   126,
     214,   127,    -1,   222,   217,   153,   126,   214,   127,    -1,
     221,   134,    -1,   220,   131,    -1,   218,   135,   134,    -1,
     220,   135,   134,    -1,   217,   222,   131,    -1,   217,   152,
     131,    -1,   218,   137,   309,    -1,   218,   135,   205,    -1,
     220,   135,   205,    -1,   218,   135,   204,    -1,   220,   135,
     204,    -1,   218,   135,     1,    -1,   220,   135,     1,    -1,
       3,    -1,   226,    -1,   128,   251,   129,    -1,   393,    -1,
     138,   393,    -1,   138,   393,   136,   393,    -1,     4,    -1,
     222,    -1,   181,    -1,    87,   128,   382,   129,    -1,    87,
     128,   251,   129,    -1,    87,   128,   354,   129,   344,    -1,
      87,   128,   354,   129,   128,   354,   129,   344,    -1,   225,
     222,    -1,   225,    -1,   224,    -1,   120,    -1,   128,   129,
      -1,    73,   312,   336,   139,   271,   140,    -1,    73,   312,
     336,   139,   272,   140,    -1,    73,   312,   139,   271,   140,
      -1,    73,   312,   139,   272,   140,    -1,   104,   312,   336,
     139,   271,   140,    -1,   104,   312,   336,   139,   272,   140,
      -1,   104,   312,   139,   271,   140,    -1,   104,   312,   139,
     272,   140,    -1,    74,   271,   311,   336,   139,   271,   140,
      -1,    74,   271,   311,   336,   139,   272,   140,    -1,    74,
     271,   311,   139,   271,   140,    -1,    74,   271,   311,   139,
     272,   140,    -1,   105,   271,   311,   336,   139,   271,   140,
      -1,   105,   271,   311,   336,   139,   272,   140,    -1,   105,
     271,   311,   139,   271,   140,    -1,   105,   271,   311,   139,
     272,   140,    -1,    68,   128,   304,   129,    -1,    68,   128,
     304,   335,   129,    -1,    68,   128,   222,   129,    -1,   106,
     128,   249,   133,   354,   129,    -1,   100,   128,   222,   129,
      -1,   405,    -1,   406,    -1,   407,    -1,   408,    -1,   139,
     231,   140,    -1,   139,   140,    -1,   183,    -1,   184,     1,
      -1,   128,   251,    -1,   128,   269,    -1,   223,    -1,   230,
     139,   251,   140,    -1,   230,   139,   269,   140,    -1,   230,
     128,   129,    -1,   230,   128,   231,   129,    -1,   230,   128,
     232,   129,    -1,   230,   136,   222,    -1,   230,     7,   222,
      -1,   230,     8,    -1,   230,     9,    -1,   253,   139,   251,
     140,    -1,   253,   139,   269,   140,    -1,   253,   128,   129,
      -1,   253,   128,   231,   129,    -1,   253,   136,   222,    -1,
     253,     7,   222,    -1,   253,     8,    -1,   253,     9,    -1,
     249,    -1,   227,    -1,   231,   133,   249,    -1,   231,   133,
     227,    -1,   268,    -1,   228,    -1,   231,   133,   268,    -1,
     231,   133,   228,    -1,   231,   133,    -1,     8,   234,    -1,
       9,   234,    -1,   235,   236,    -1,   235,   227,    -1,     6,
     234,    -1,     6,   128,   355,   129,    -1,     6,   128,    68,
     152,   129,    -1,     6,   128,    68,   151,   129,    -1,   111,
     234,    -1,   111,   128,   355,   129,    -1,   121,   128,   355,
     133,   222,   129,    -1,   233,    -1,   230,    -1,   141,    -1,
     125,    -1,   142,    -1,   143,    -1,   130,    -1,   144,    -1,
      75,    -1,    86,    -1,   234,    -1,   128,   354,   129,   345,
      -1,   128,   354,   129,   236,    -1,   236,    -1,   237,   125,
     236,    -1,   237,   145,   236,    -1,   237,   146,   236,    -1,
     257,   125,   236,    -1,   257,   145,   236,    -1,   257,   146,
     236,    -1,   237,    -1,   238,   142,   237,    -1,   238,   143,
     237,    -1,   258,   142,   237,    -1,   258,   143,   237,    -1,
     238,    -1,   239,    10,   238,    -1,   239,    11,   238,    -1,
     259,    10,   238,    -1,   259,    11,   238,    -1,   241,   126,
      -1,   239,    -1,   240,   239,    -1,   241,   127,   239,    -1,
     241,    12,   239,    -1,   241,    13,   239,    -1,   260,   126,
     239,    -1,   260,   127,   239,    -1,   260,    12,   239,    -1,
     260,    13,   239,    -1,   241,    -1,   242,    14,   241,    -1,
     242,    15,   241,    -1,   261,    14,   241,    -1,   261,    15,
     241,    -1,   242,    14,   227,    -1,   242,    15,   227,    -1,
     261,    14,   227,    -1,   261,    15,   227,    -1,   242,    -1,
     243,   141,   242,    -1,   262,   141,   242,    -1,   243,   141,
     227,    -1,   262,   141,   227,    -1,   243,    -1,   244,   147,
     243,    -1,   263,   147,   243,    -1,   244,   147,   227,    -1,
     263,   147,   227,    -1,   244,    -1,   245,   148,   244,    -1,
     264,   148,   244,    -1,   245,   148,   227,    -1,   264,   148,
     227,    -1,   245,    -1,   246,    16,   245,    -1,   265,    16,
     245,    -1,   246,    -1,   247,    17,   246,    -1,   266,    17,
     246,    -1,   247,    -1,   247,   149,   251,   137,   248,    -1,
     247,   149,   269,   137,   248,    -1,   266,   149,   251,   137,
     248,    -1,   266,   149,   269,   137,   248,    -1,   247,   149,
     252,   137,   248,    -1,   247,   149,   270,   137,   248,    -1,
     266,   149,   252,   137,   248,    -1,   266,   149,   270,   137,
     248,    -1,   247,   149,   251,   137,   227,    -1,   247,   149,
     269,   137,   227,    -1,   266,   149,   251,   137,   227,    -1,
     266,   149,   269,   137,   227,    -1,   247,   149,   252,   137,
     227,    -1,   247,   149,   270,   137,   227,    -1,   266,   149,
     252,   137,   227,    -1,   266,   149,   270,   137,   227,    -1,
     248,    -1,   234,   250,   249,    -1,   255,   250,   249,    -1,
     248,   250,   249,    -1,   267,   250,   249,    -1,   234,   250,
     227,    -1,   255,   250,   227,    -1,   248,   250,   227,    -1,
     267,   250,   227,    -1,   132,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      25,    -1,    26,    -1,    27,    -1,   249,    -1,   251,   133,
     249,    -1,   269,   133,   249,    -1,   269,   129,    -1,   227,
      -1,   251,   133,   227,    -1,   269,   133,   227,    -1,   229,
      -1,     1,    -1,   230,     1,    -1,   182,     1,    -1,   230,
       7,     1,    -1,   253,     7,     1,    -1,   230,   128,   231,
      -1,   230,   128,   232,    -1,   230,   136,     1,    -1,   253,
     128,   232,    -1,   253,   136,     1,    -1,     8,   255,    -1,
       9,   255,    -1,   235,   256,    -1,   235,   228,    -1,     6,
     255,    -1,     6,   128,   355,   129,     1,    -1,     6,   128,
      68,   152,   129,     1,    -1,     6,   128,    68,   151,   129,
       1,    -1,   111,   255,    -1,   111,   128,   355,   129,     1,
      -1,   254,    -1,   253,    -1,   255,    -1,   128,   354,   129,
     256,    -1,   256,    -1,   237,   125,   256,    -1,   237,   145,
     256,    -1,   237,   146,   256,    -1,   257,   125,   256,    -1,
     257,   145,   256,    -1,   257,   146,   256,    -1,   257,    -1,
     238,   142,   257,    -1,   238,   143,   257,    -1,   258,   142,
     257,    -1,   258,   143,   257,    -1,   258,    -1,   239,    10,
     258,    -1,   239,    11,   258,    -1,   259,    10,   258,    -1,
     259,    11,   258,    -1,   259,    -1,   240,   259,    -1,   241,
     127,   259,    -1,   241,    12,   259,    -1,   241,    13,   259,
      -1,   260,   126,   259,    -1,   260,   127,   259,    -1,   260,
      12,   259,    -1,   260,    13,   259,    -1,   260,    -1,   242,
      14,   260,    -1,   242,    15,   260,    -1,   261,    14,   260,
      -1,   261,    15,   260,    -1,   242,    14,   228,    -1,   242,
      15,   228,    -1,   261,    14,   228,    -1,   261,    15,   228,
      -1,   261,    -1,   243,   141,   261,    -1,   262,   141,   261,
      -1,   243,   141,   228,    -1,   262,   141,   228,    -1,   262,
      -1,   244,   147,   262,    -1,   263,   147,   262,    -1,   244,
     147,   228,    -1,   263,   147,   228,    -1,   263,    -1,   245,
     148,   263,    -1,   264,   148,   263,    -1,   245,   148,   228,
      -1,   264,   148,   228,    -1,   264,    -1,   246,    16,   264,
      -1,   265,    16,   264,    -1,   265,    -1,   247,    17,   265,
      -1,   266,    17,   265,    -1,   266,    -1,   247,   149,   251,
     137,   266,    -1,   247,   149,   269,   137,   266,    -1,   266,
     149,   251,   137,   266,    -1,   266,   149,   269,   137,   266,
      -1,   247,   149,   251,   137,    -1,   247,   149,   269,   137,
      -1,   266,   149,   251,   137,    -1,   266,   149,   269,   137,
      -1,   247,   149,   252,   137,   266,    -1,   247,   149,   270,
     137,   266,    -1,   266,   149,   252,   137,   266,    -1,   266,
     149,   270,   137,   266,    -1,   247,   149,   252,   137,    -1,
     247,   149,   270,   137,    -1,   266,   149,   252,   137,    -1,
     266,   149,   270,   137,    -1,   247,   149,   251,   137,   228,
      -1,   247,   149,   269,   137,   228,    -1,   266,   149,   251,
     137,   228,    -1,   266,   149,   269,   137,   228,    -1,   247,
     149,   252,   137,   228,    -1,   247,   149,   270,   137,   228,
      -1,   266,   149,   252,   137,   228,    -1,   266,   149,   270,
     137,   228,    -1,   247,   149,   137,    -1,   266,   149,   137,
      -1,   247,   149,    -1,   266,   149,    -1,   267,    -1,   234,
     250,   268,    -1,   255,   250,   268,    -1,   234,   250,   228,
      -1,   255,   250,   228,    -1,   268,    -1,   249,     1,    -1,
     251,   133,   268,    -1,   269,   133,   268,    -1,   251,   251,
      -1,   269,   251,    -1,   251,   269,    -1,   228,    -1,   227,
       1,    -1,   251,   133,   228,    -1,   269,   133,   228,    -1,
     248,    -1,   267,    -1,    29,    -1,    30,    -1,    31,    -1,
     119,    -1,    32,    -1,    33,    -1,   118,    -1,    29,    -1,
      30,    -1,    31,    -1,   119,    -1,    32,    -1,    33,    -1,
     118,    -1,   222,    -1,   222,   132,   271,    -1,   222,   132,
     272,    -1,   222,   331,    -1,   222,   331,   132,   271,    -1,
     222,   331,   132,   272,    -1,   275,    -1,   276,   133,   275,
      -1,   276,   133,    -1,    53,    -1,   277,   222,    -1,   277,
     155,    -1,   280,   134,    -1,   277,   222,   135,   134,    -1,
     277,   155,   135,   134,    -1,   277,   135,   276,    -1,   277,
     135,     1,    -1,   277,   222,   135,   276,    -1,   277,   222,
     135,   276,     1,    -1,   277,   222,   135,     1,    -1,   277,
     222,   135,   276,   131,   204,    -1,   277,   222,   135,   276,
     131,   205,    -1,   277,   155,   135,   276,    -1,   277,   155,
     135,   276,     1,    -1,   277,   155,   135,     1,    -1,   277,
     155,   135,   276,   131,   204,    -1,   277,   155,   135,   276,
     131,   205,    -1,   277,   222,   135,   276,   131,    -1,   277,
     155,   135,   276,   131,    -1,   277,   222,    -1,   277,   155,
      -1,   283,   134,    -1,   281,   137,   309,   135,   134,    -1,
     281,   135,   134,    -1,   281,   137,   309,   135,   276,    -1,
     281,   137,   309,   135,   276,     1,    -1,   281,   137,   309,
     135,     1,    -1,   281,   137,   309,   135,   276,   131,   204,
      -1,   281,   137,   309,   135,   276,   131,   205,    -1,   281,
     137,   309,   135,   276,     1,   131,   204,    -1,   281,   137,
     309,   135,   276,     1,   131,   205,    -1,   281,   137,   309,
     135,     1,   131,   204,    -1,   281,   137,   309,   135,     1,
     131,   205,    -1,   277,   135,   276,    -1,   277,   135,     1,
      -1,   281,   135,   276,    -1,   281,   135,   276,     1,    -1,
     281,   135,     1,    -1,   281,   135,   276,   131,   204,    -1,
     281,   135,   276,   131,   205,    -1,   281,   137,   309,   135,
     276,   131,    -1,   281,   137,   309,   135,   276,     1,   131,
      -1,   281,   137,   309,   135,     1,   131,    -1,   281,   135,
     276,   131,    -1,   282,    -1,   299,    -1,   283,    -1,   300,
      -1,   325,    -1,    47,    -1,    48,    -1,   286,    -1,   287,
      -1,   288,   287,    -1,    49,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      41,    -1,    50,    -1,    42,    -1,    45,    -1,    46,    -1,
      43,    -1,    44,    -1,    87,    -1,   296,    -1,   278,    -1,
     152,    -1,    89,   128,   249,   129,    -1,   102,   128,   152,
     129,    -1,   102,   128,   222,   129,    -1,    69,    -1,    84,
      -1,    85,    -1,   115,    -1,   114,    -1,   116,    -1,   117,
      -1,    49,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    39,    -1,    40,    -1,    41,    -1,    50,
      -1,    42,    -1,    45,    -1,    46,    -1,    43,    -1,    44,
      -1,    87,    -1,   296,    -1,   278,    -1,   155,    -1,   115,
      -1,   114,    -1,   116,    -1,   117,    -1,    89,   128,   249,
     129,    -1,   102,   128,   152,   129,    -1,   102,   128,   222,
     129,    -1,    69,    -1,   343,    -1,   343,   330,    -1,   137,
     271,    -1,   343,   137,   271,    -1,   343,   137,   271,   137,
     271,    -1,   137,   272,    -1,   343,   137,   272,    -1,   343,
     137,   271,   137,   272,    -1,   343,   137,   272,   137,   272,
      -1,   343,   137,   272,   137,   271,    -1,   291,    -1,   292,
     133,   291,    -1,   301,   222,    -1,   301,   153,    -1,   301,
     325,   222,    -1,   301,   325,   153,    -1,   295,   134,    -1,
     293,   135,   134,    -1,   301,   135,   134,    -1,   301,   325,
     135,   134,    -1,   293,   135,   204,    -1,   293,   135,   205,
      -1,   293,   135,     1,    -1,   301,   135,   204,    -1,   301,
     135,   205,    -1,   301,   135,     1,    -1,   301,   325,   135,
     204,    -1,   301,   325,   135,   205,    -1,   301,   325,   135,
       1,    -1,   293,    -1,   293,    -1,   293,   126,   214,   127,
      -1,   297,   137,   309,    -1,   300,   134,    -1,   298,   135,
     134,    -1,   297,   135,   134,    -1,   301,   135,   134,    -1,
     298,   135,   204,    -1,   298,   135,   205,    -1,   298,   135,
       1,    -1,   297,   135,   204,    -1,   297,   135,   205,    -1,
     297,   135,     1,    -1,   301,   135,   204,    -1,   301,   135,
     205,    -1,   301,   135,     1,    -1,    51,    -1,    52,    -1,
     287,    -1,   302,   287,    -1,   289,    -1,   302,   289,    -1,
     279,    -1,   302,   279,    -1,   294,    -1,   302,   294,    -1,
     287,    -1,   303,   287,    -1,   289,    -1,   303,   289,    -1,
     151,    -1,   303,   151,    -1,   279,    -1,   303,   279,    -1,
     294,    -1,   303,   294,    -1,   273,    -1,   304,   273,    -1,
     287,    -1,   304,   287,    -1,   290,    -1,   304,   290,    -1,
     279,    -1,   304,   279,    -1,   294,    -1,   304,   294,    -1,
     273,    -1,   305,   273,    -1,   287,    -1,   305,   287,    -1,
     289,    -1,   305,   289,    -1,   151,    -1,   305,   151,    -1,
     294,    -1,   305,   294,    -1,   279,    -1,   305,   279,    -1,
     274,    -1,   306,   274,    -1,   287,    -1,   306,   287,    -1,
     289,    -1,   306,   289,    -1,   151,    -1,   306,   151,    -1,
     284,    -1,   306,   284,    -1,   285,    -1,   306,   285,    -1,
      83,    -1,    82,    -1,   273,    -1,   308,   273,    -1,   287,
      -1,   308,   287,    -1,   290,    -1,   308,   290,    -1,   222,
      -1,   308,   222,    -1,   222,   126,   216,   127,    -1,   308,
     222,   126,   216,   127,    -1,   308,    -1,   301,    -1,   273,
      -1,   310,   273,    -1,   287,    -1,   310,   287,    -1,   290,
      -1,   310,   290,    -1,   222,    -1,   310,   222,    -1,   222,
     126,   216,   127,    -1,   310,   222,   126,   216,   127,    -1,
     273,    -1,   311,   273,    -1,   287,    -1,   311,   287,    -1,
     290,    -1,   311,   290,    -1,   294,    -1,   311,   294,    -1,
     279,    -1,   311,   279,    -1,   222,    -1,   311,   222,    -1,
     222,   126,   216,   127,    -1,   311,   222,   126,   216,   127,
      -1,   273,    -1,   312,   273,    -1,   287,    -1,   312,   287,
      -1,   290,    -1,   312,   290,    -1,   294,    -1,   312,   294,
      -1,   279,    -1,   312,   279,    -1,   222,    -1,   312,   222,
      -1,   222,   126,   216,   127,    -1,   312,   222,   126,   216,
     127,    -1,   314,   133,     1,    -1,   313,   133,     1,    -1,
     222,    -1,   314,   133,   222,    -1,   313,   133,   222,    -1,
     358,   133,   222,    -1,   359,   133,   222,    -1,   316,    -1,
     153,    -1,    37,    -1,   153,   139,   271,   140,    -1,   153,
     139,   272,   140,    -1,   153,   139,   152,   140,    -1,   153,
     139,   140,    -1,   315,   139,   271,   140,    -1,   315,   139,
     272,   140,    -1,   315,   139,   152,   140,    -1,   315,   139,
     140,    -1,   222,    -1,   128,   337,   129,    -1,   128,   325,
     337,   129,    -1,   128,   338,   129,    -1,   128,   325,   338,
     129,    -1,   316,   139,   271,   140,    -1,   316,   139,   272,
     140,    -1,   316,   139,   152,   140,    -1,   316,   139,   140,
      -1,   316,   128,    -1,   317,   360,   129,    -1,   317,   361,
     129,    -1,   317,   314,   129,    -1,   317,   313,   129,    -1,
     317,   129,    -1,   317,   313,    -1,   317,     1,    -1,   317,
     358,   128,    -1,   317,   305,   222,   128,    -1,   318,    -1,
     316,    -1,   315,   128,    -1,   321,   360,   129,    -1,   321,
     361,   129,    -1,   321,   314,   129,    -1,   321,   313,   129,
      -1,   321,   129,    -1,   321,   313,    -1,   321,     1,    -1,
     321,   358,   128,    -1,   321,   305,   222,   128,    -1,   322,
      -1,   315,    -1,    76,    -1,    77,    -1,   325,    77,    -1,
     325,    76,    -1,   330,    -1,   331,    -1,    88,   128,   393,
     129,    -1,   124,   128,   271,   129,    -1,    81,    -1,   112,
      -1,   113,    -1,     3,    -1,    28,    -1,    77,    -1,    76,
      -1,    47,    -1,   327,    -1,   327,   128,   251,   129,    -1,
     328,    -1,   329,   328,    -1,   329,   133,   328,    -1,   326,
     128,   128,   329,   129,   129,    -1,   326,   128,   128,   129,
     129,    -1,   330,    -1,   331,   330,    -1,   128,   335,   129,
      -1,   128,   325,   335,   129,    -1,   139,   140,    -1,   139,
     271,   140,    -1,   139,   272,   140,    -1,   139,   152,   140,
      -1,   332,   139,   140,    -1,   332,   139,   271,   140,    -1,
     332,   139,   152,   140,    -1,   332,   139,   272,   140,    -1,
     128,   129,    -1,   128,   360,   129,    -1,   128,   361,   129,
      -1,   332,   128,   129,    -1,   332,   128,   360,   129,    -1,
     332,   128,   361,   129,    -1,   128,   336,   129,    -1,   128,
     325,   336,   129,    -1,   128,   129,    -1,   128,   360,   129,
      -1,   128,   361,   129,    -1,   333,   128,   129,    -1,   333,
     128,   360,   129,    -1,   333,   128,   361,   129,    -1,   125,
      -1,   125,   288,    -1,   125,   334,    -1,   125,   288,   334,
      -1,   334,    -1,   332,    -1,   334,   332,    -1,   325,   334,
      -1,   325,   334,   332,    -1,   334,    -1,   333,    -1,   334,
     333,    -1,   325,   334,    -1,   325,   334,   333,    -1,   320,
      -1,   334,   320,    -1,   325,   334,   320,    -1,   337,   325,
      -1,   343,   325,    -1,   324,    -1,   334,   324,    -1,   325,
     334,   324,    -1,   338,   325,    -1,   318,    -1,   334,   318,
      -1,   325,   334,   318,    -1,   334,   325,   318,    -1,   319,
      -1,   334,   319,    -1,   325,   334,   319,    -1,   334,   325,
     319,    -1,   322,    -1,   334,   322,    -1,   325,   334,   322,
      -1,   334,   325,   322,    -1,   323,    -1,   334,   323,    -1,
     325,   334,   323,    -1,   334,   325,   323,    -1,   315,    -1,
     334,   315,    -1,   325,   334,   315,    -1,   334,   325,   315,
      -1,   249,    -1,   135,   349,   134,    -1,   135,   349,   133,
     134,    -1,   135,   349,   134,    -1,   135,   349,   133,   134,
      -1,   268,    -1,   135,   349,   134,     1,    -1,   135,   349,
      -1,   135,   349,   133,   134,     1,    -1,   135,   349,   133,
      -1,   248,    -1,   227,    -1,   267,    -1,   228,    -1,   344,
      -1,   346,    -1,   349,   133,   344,    -1,   349,   133,   346,
      -1,   349,   344,    -1,   349,   346,    -1,   337,    -1,   338,
      -1,   337,   132,   344,    -1,   337,     1,    -1,   337,   132,
     346,    -1,   350,    -1,   352,   133,   350,    -1,    37,   133,
     350,    -1,    38,   133,   350,    -1,    39,   133,   350,    -1,
      40,   133,   350,    -1,    41,   133,   350,    -1,   153,   133,
     350,    -1,   353,   133,   350,    -1,   351,    -1,   350,     1,
      -1,   352,   133,   351,    -1,   353,   133,   351,    -1,   302,
      -1,   302,   335,    -1,   303,    -1,   303,   335,    -1,   305,
     338,    -1,   305,   335,    -1,   305,   141,    -1,   305,   141,
     338,    -1,   305,    -1,    68,    -1,   305,   338,     1,    -1,
     305,   335,     1,    -1,   356,    -1,   358,   133,   356,    -1,
     358,     1,   133,   356,    -1,   359,   133,   356,    -1,   359,
       1,   133,   356,    -1,     1,   133,   356,    -1,   314,   133,
     356,    -1,   314,     1,   133,   356,    -1,   313,   133,   356,
      -1,   313,     1,   133,   356,    -1,   357,    -1,   358,   133,
     357,    -1,   359,   133,   357,    -1,   359,     1,   133,   357,
      -1,     1,   133,   357,    -1,   314,   133,   357,    -1,   313,
     133,   357,    -1,   313,     1,   133,   357,    -1,   358,    -1,
     358,   133,    54,    -1,   359,   133,    54,    -1,   314,   133,
      54,    -1,   313,   133,    54,    -1,     1,   133,    54,    -1,
     359,    -1,   358,   133,     1,    -1,   359,     1,    -1,   367,
      -1,   330,    -1,   382,    -1,   131,    -1,   137,    -1,   251,
     131,    -1,   385,    -1,   387,    -1,   389,    -1,   366,    -1,
     201,   131,    -1,   200,   131,    -1,   199,   131,    -1,   368,
      -1,   388,    -1,   383,    -1,   386,    -1,   390,    -1,   389,
       1,    -1,   269,    -1,   393,    -1,   393,   128,   249,   129,
      -1,   139,   222,   140,   393,   128,   249,   129,    -1,   364,
      -1,   365,   133,   364,    -1,    -1,    88,   287,   128,   393,
     129,   131,    -1,    88,   287,   128,   393,   137,   365,   129,
     131,    -1,    88,   287,   128,   393,   137,   365,   137,   365,
     129,   131,    -1,    88,   287,   128,   393,   137,   365,   137,
     365,   137,   365,   129,   131,    -1,    88,   287,   128,   393,
       3,   365,   129,   131,    -1,    88,   287,   128,   393,     3,
     365,   137,   365,   129,   131,    -1,    88,   287,   128,   393,
     137,   365,     3,   365,   129,   131,    -1,    88,   128,   393,
     129,   131,    -1,    88,   128,   393,   137,   365,   129,   131,
      -1,    88,   128,   393,   137,   365,   137,   365,   129,   131,
      -1,    88,   128,   393,   137,   365,   137,   365,   137,   365,
     129,   131,    -1,    88,   128,   393,     3,   365,   129,   131,
      -1,    88,   128,   393,     3,   365,   137,   365,   129,   131,
      -1,    88,   128,   393,   137,   365,     3,   365,   129,   131,
      -1,   222,   137,   362,    -1,    55,   271,   137,   362,    -1,
      55,   272,   137,   362,    -1,    55,   137,   362,    -1,    56,
     137,   362,    -1,   222,   137,   371,    -1,    55,   271,   137,
     371,    -1,    55,   272,   137,   371,    -1,    55,   137,   371,
      -1,    56,   137,   371,    -1,   222,   137,   363,    -1,    55,
     271,   137,   363,    -1,    55,   272,   137,   363,    -1,    55,
     137,   363,    -1,    55,   137,    -1,    56,   137,   363,    -1,
      56,   137,    -1,   222,   137,   374,    -1,    55,   271,   137,
     374,    -1,    55,   272,   137,   374,    -1,    55,   137,   374,
      -1,    56,   137,   374,    -1,    82,    -1,    83,    -1,    56,
      -1,    82,    -1,    83,    -1,   304,   131,    -1,   304,   352,
     131,    -1,   176,   131,    -1,   374,   131,    -1,   123,   128,
     251,   129,    -1,   123,   128,   251,   133,   393,   129,    -1,
     122,    -1,   306,   131,    -1,   306,   352,   131,    -1,   307,
     352,   131,    -1,   180,   131,    -1,    79,   222,   132,   248,
     131,    -1,    31,    79,   222,   132,   248,   131,    -1,   306,
       1,    -1,   304,     1,    -1,   374,     1,    -1,   177,     1,
      -1,   176,     1,    -1,   304,   353,    -1,   371,    -1,   375,
     371,    -1,   376,   371,    -1,   375,     1,   131,    -1,   374,
      -1,   375,   374,    -1,   362,    -1,   377,   362,    -1,   378,
     362,    -1,   363,    -1,   377,   363,    -1,   378,   363,    -1,
     377,   371,    -1,   378,   371,    -1,   377,   374,    -1,   378,
     374,    -1,   377,    -1,   375,    -1,   375,   377,    -1,   376,
     377,    -1,   378,    -1,   376,    -1,   375,   378,    -1,   376,
     378,    -1,   135,    -1,   383,   134,    -1,   381,   380,    -1,
     381,    -1,   381,   379,    -1,   131,    -1,   251,   131,    -1,
     269,   131,    -1,    57,   128,   251,   129,   362,    -1,    57,
     128,   269,   129,   362,    -1,    57,   128,   251,   129,   362,
      67,   362,    -1,    57,   128,   269,   129,   362,    67,   362,
      -1,    58,   128,   251,   129,   362,    -1,    58,   128,   269,
     129,   362,    -1,    57,   128,   269,    -1,   385,     1,    -1,
      59,   128,   251,   129,   362,    -1,    59,   128,   269,   362,
      -1,    59,   128,   129,   362,    -1,    60,   362,    59,   128,
     251,   129,   131,    -1,    60,   362,    59,   128,   269,   131,
      -1,    61,   128,   384,   384,   129,   362,    -1,    61,   128,
     384,   129,   362,    -1,    61,   128,   384,   384,   251,   129,
     362,    -1,    61,   128,   384,   384,   269,   362,    -1,    61,
     128,   129,   362,    -1,    61,   128,   222,   137,   251,   129,
     362,    -1,    61,   128,   222,   137,   251,   131,   251,   129,
     362,    -1,    61,   128,     1,    -1,    61,   128,   269,     1,
      -1,    61,   128,   384,     1,    -1,    61,   128,   384,   269,
       1,    -1,    61,   128,   384,   384,   269,    -1,    61,   128,
     384,   384,   129,   363,    -1,    61,   128,   384,   384,   251,
     129,   363,    -1,    61,   128,   384,   384,   269,   363,    -1,
      60,   362,    59,   128,   251,   129,    -1,    60,   362,    59,
     128,   251,    -1,    60,   362,    59,   128,   269,    -1,    60,
     362,    59,   128,    -1,    60,   362,    59,    -1,    60,   362,
      -1,    60,    -1,    59,     1,    -1,    59,   128,   129,     1,
      -1,    59,   128,   269,    -1,    59,   128,   251,   129,   363,
      -1,    59,   128,   269,   363,    -1,    62,   222,   131,    -1,
      63,   131,    -1,    64,   131,    -1,    65,   131,    -1,    65,
     251,   131,    -1,    65,   269,   131,    -1,    65,   227,   131,
      -1,    65,   228,   131,    -1,    65,   269,    -1,    65,   228,
      -1,    65,    -1,    62,    -1,   306,   339,   375,   382,    -1,
     306,   339,   382,    -1,   306,   341,   375,   382,    -1,   306,
     341,   382,    -1,   339,   375,   382,    -1,   339,   382,    -1,
     306,   339,   375,   383,    -1,   306,   339,   383,    -1,   306,
     341,   375,   383,    -1,   306,   341,   383,    -1,   339,   375,
     383,    -1,   339,   383,    -1,     5,    -1,   393,     5,    -1,
     391,    -1,   219,    -1,   306,   219,    -1,   372,    -1,    78,
     393,    -1,    78,    31,   393,    -1,    78,   222,   393,    -1,
     131,    -1,   369,   391,    -1,   369,   219,    -1,   369,   372,
      -1,   369,    78,   393,    -1,   369,    78,    31,   393,    -1,
     369,    78,   222,   393,    -1,   369,   137,    -1,    31,   137,
      -1,   103,   222,    -1,   103,   155,    -1,   399,    -1,   369,
     399,    -1,   122,    -1,   123,   128,   251,   129,    -1,   123,
     128,   251,   133,   393,   129,    -1,   221,    -1,   306,   221,
      -1,   392,    -1,   369,   221,    -1,   369,   392,    -1,   373,
      -1,   369,   373,    -1,   395,    -1,   397,   395,    -1,   396,
     395,    -1,   397,     1,    -1,   396,     1,    -1,   394,    -1,
     397,   394,    -1,   396,   219,    -1,   396,   369,   219,    -1,
     397,    -1,   396,    -1,    -1,   107,   393,   222,   135,   404,
     134,    -1,   107,   393,   155,   135,   404,   134,    -1,   107,
     393,   135,   404,   134,    -1,   305,   222,   393,   131,    -1,
     222,    -1,   127,   222,    -1,   126,   222,    -1,   401,    -1,
     402,   133,   401,    -1,   109,   402,   131,    -1,   109,   402,
     222,   131,    -1,   400,    -1,   403,    -1,   404,   400,    -1,
     404,   403,    -1,   110,   128,   249,   133,   249,   129,    -1,
     108,   128,   393,   133,   222,   129,    -1,   109,   128,   393,
     133,   222,   129,    -1,   107,   128,   393,   129,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   288,   288,   307,   346,   347,   427,   431,   434,   435,
     436,   475,   477,   482,   487,   492,   494,   499,   501,   506,
     508,   513,   515,   517,   519,   521,   525,   529,   542,   544,
     546,   548,   550,   556,   558,   563,   568,   573,   575,   577,
     582,   583,   587,   588,   599,   603,   604,   606,   611,   612,
     614,   617,   629,   640,   659,   661,   666,   667,   668,   669,
     670,   671,   672,   673,   686,   690,   691,   692,   693,   697,
     698,   699,   700,   701,   702,   703,   707,   709,   714,   716,
     718,   720,   722,   752,   754,   759,   761,   763,   765,   767,
     796,   798,   800,   805,   807,   812,   814,   818,   820,   822,
     824,   829,   832,   835,   838,   903,   905,   910,   912,   914,
     916,   918,   949,   953,   954,   955,   959,   960,   961,   965,
     966,   967,   968,   972,   975,   978,   981,   984,   989,   990,
     992,   994,   996,   998,  1003,  1007,  1010,  1013,  1016,  1019,
    1024,  1025,  1027,  1032,  1036,  1038,  1043,  1045,  1050,  1052,
    1057,  1062,  1064,  1069,  1071,  1073,  1075,  1080,  1082,  1084,
    1086,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
    1100,  1101,  1103,  1104,  1106,  1110,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1128,  1129,  1133,  1134,  1135,  1139,  1143,  1144,  1145,  1149,
    1150,  1151,  1152,  1153,  1157,  1158,  1170,  1171,  1175,  1176,
    1177,  1178,  1179,  1180,  1181,  1182,  1186,  1190,  1191,  1195,
    1203,  1204,  1208,  1209,  1210,  1214,  1215,  1219,  1220,  1221,
    1222,  1223,  1224,  1264,  1265,  1269,  1277,  1278,  1286,  1287,
    1289,  1290,  1299,  1300,  1304,  1311,  1318,  1324,  1331,  1337,
    1346,  1353,  1359,  1365,  1371,  1377,  1383,  1394,  1399,  1400,
    1405,  1406,  1407,  1411,  1415,  1416,  1417,  1418,  1419,  1420,
    1421,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,
    1464,  1465,  1469,  1473,  1477,  1478,  1482,  1484,  1485,  1486,
    1487,  1488,  1489,  1490,  1491,  1492,  1494,  1495,  1496,  1497,
    1498,  1499,  1500,  1501,  1528,  1529,  1530,  1531,  1535,  1536,
    1537,  1538,  1539,  1543,  1544,  1545,  1546,  1548,  1549,  1550,
    1551,  1554,  1555,  1557,  1561,  1562,  1571,  1572,  1573,  1574,
    1575,  1576,  1577,  1578,  1582,  1583,  1584,  1588,  1589,  1590,
    1591,  1592,  1593,  1594,  1598,  1599,  1600,  1601,  1602,  1606,
    1607,  1608,  1609,  1610,  1614,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,  1629,  1630,  1634,  1635,  1636,  1637,  1638,  1640,
    1641,  1642,  1643,  1647,  1648,  1649,  1651,  1652,  1656,  1657,
    1658,  1660,  1661,  1665,  1666,  1667,  1669,  1670,  1674,  1675,
    1676,  1680,  1681,  1682,  1686,  1687,  1688,  1689,  1690,  1692,
    1693,  1694,  1695,  1697,  1698,  1699,  1700,  1702,  1703,  1704,
    1705,  1709,  1710,  1711,  1712,  1713,  1715,  1716,  1717,  1718,
    1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    1732,  1736,  1737,  1738,  1739,  1743,  1744,  1745,  1749,  1750,
    1751,  1752,  1754,  1755,  1757,  1758,  1763,  1765,  1770,  1798,
    1799,  1800,  1801,  1803,  1804,  1805,  1806,  1808,  1809,  1813,
    1814,  1823,  1824,  1828,  1829,  1830,  1831,  1832,  1833,  1834,
    1838,  1839,  1843,  1847,  1851,  1858,  1859,  1860,  1861,  1862,
    1866,  1867,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1920,
    1921,  1922,  1923,  1924,  1931,  1932,  1933,  1934,  1938,  1939,
    1940,  1942,  1943,  1947,  1948,  1949,  1951,  1952,  1956,  1957,
    1958,  1960,  1961,  1965,  1966,  1967,  1971,  1972,  1973,  1977,
    1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1987,  1988,
    1989,  1990,  1991,  1992,  1993,  1994,  1996,  1997,  1998,  1999,
    2001,  2002,  2003,  2004,  2006,  2014,  2018,  2023,  2030,  2031,
    2035,  2040,  2041,  2045,  2046,  2047,  2048,  2054,  2055,  2056,
    2060,  2061,  2062,  2063,  2067,  2069,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,  2083,  2084,  2085,  2086,  2087,  2088,  2089,
    2093,  2094,  2095,  2096,  2097,  2098,  2102,  2103,  2104,  2108,
    2112,  2113,  2117,  2118,  2119,  2123,  2124,  2126,  2127,  2128,
    2129,  2130,  2132,  2133,  2134,  2135,  2136,  2138,  2139,  2143,
    2144,  2148,  2149,  2150,  2154,  2155,  2156,  2157,  2158,  2159,
    2160,  2161,  2162,  2164,  2165,  2167,  2168,  2169,  2170,  2171,
    2173,  2174,  2175,  2176,  2180,  2181,  2185,  2186,  2190,  2194,
    2195,  2196,  2201,  2202,  2206,  2207,  2208,  2209,  2210,  2211,
    2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,  2221,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,
    2232,  2233,  2234,  2238,  2239,  2240,  2241,  2242,  2243,  2244,
    2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,
    2255,  2256,  2257,  2258,  2259,  2260,  2261,  2262,  2263,  2264,
    2270,  2272,  2274,  2276,  2278,  2280,  2282,  2284,  2286,  2288,
    2293,  2294,  2298,  2304,  2310,  2317,  2327,  2328,  2329,  2330,
    2334,  2335,  2336,  2338,  2339,  2340,  2342,  2343,  2344,  2348,
    2352,  2360,  2369,  2378,  2379,  2381,  2382,  2386,  2393,  2400,
    2403,  2419,  2433,  2436,  2438,  2440,  2445,  2446,  2450,  2451,
    2452,  2453,  2454,  2455,  2456,  2457,  2461,  2462,  2463,  2464,
    2465,  2466,  2467,  2468,  2469,  2470,  2474,  2475,  2476,  2477,
    2478,  2479,  2480,  2481,  2482,  2483,  2487,  2488,  2489,  2490,
    2491,  2492,  2493,  2494,  2495,  2496,  2497,  2498,  2502,  2503,
    2504,  2505,  2506,  2507,  2508,  2509,  2510,  2511,  2515,  2516,
    2520,  2521,  2522,  2523,  2524,  2525,  2526,  2527,  2528,  2530,
    2532,  2540,  2550,  2551,  2555,  2556,  2557,  2558,  2559,  2560,
    2561,  2562,  2563,  2571,  2580,  2581,  2582,  2583,  2584,  2585,
    2586,  2587,  2588,  2589,  2590,  2591,  2592,  2600,  2609,  2610,
    2611,  2612,  2613,  2614,  2615,  2616,  2617,  2618,  2619,  2620,
    2621,  2629,  2638,  2639,  2643,  2644,  2645,  2646,  2647,  2651,
    2652,  2659,  2661,  2670,  2679,  2688,  2697,  2698,  2699,  2700,
    2704,  2705,  2706,  2707,  2708,  2709,  2710,  2711,  2712,  2716,
    2720,  2721,  2722,  2723,  2724,  2729,  2738,  2747,  2756,  2770,
    2771,  2776,  2780,  2781,  2782,  2783,  2784,  2789,  2798,  2807,
    2816,  2830,  2831,  2880,  2881,  2883,  2894,  2905,  2906,  2907,
    2916,  2930,  2931,  2932,  2937,  2938,  2939,  2940,  2941,  2945,
    2946,  2950,  2951,  2952,  2956,  2957,  2961,  2962,  2966,  2967,
    2968,  2969,  2970,  2971,  2972,  2973,  2974,  2975,  2976,  2977,
    2978,  2979,  2980,  2981,  2985,  2986,  2987,  2988,  2989,  2990,
    2991,  2992,  2996,  2997,  2998,  2999,  3003,  3004,  3005,  3006,
    3007,  3011,  3012,  3013,  3014,  3015,  3019,  3020,  3022,  3024,
    3026,  3031,  3032,  3034,  3036,  3041,  3042,  3043,  3044,  3048,
    3049,  3050,  3051,  3055,  3056,  3057,  3058,  3062,  3063,  3064,
    3065,  3069,  3070,  3071,  3072,  3076,  3077,  3078,  3095,  3096,
    3113,  3114,  3115,  3116,  3129,  3146,  3147,  3152,  3153,  3157,
    3158,  3159,  3160,  3163,  3164,  3168,  3169,  3170,  3174,  3178,
    3182,  3183,  3184,  3185,  3186,  3187,  3188,  3189,  3198,  3207,
    3208,  3209,  3210,  3214,  3215,  3219,  3220,  3225,  3226,  3227,
    3228,  3229,  3230,  3249,  3250,  3254,  3255,  3256,  3257,  3258,
    3259,  3261,  3262,  3263,  3264,  3268,  3269,  3270,  3271,  3272,
    3274,  3275,  3276,  3280,  3281,  3282,  3283,  3284,  3285,  3289,
    3290,  3291,  3296,  3297,  3298,  3299,  3300,  3301,  3302,  3303,
    3304,  3305,  3306,  3307,  3308,  3312,  3313,  3314,  3315,  3316,
    3317,  3318,  3322,  3323,  3324,  3328,  3329,  3330,  3334,  3335,
    3336,  3337,  3339,  3340,  3341,  3343,  3344,  3345,  3346,  3348,
    3349,  3350,  3354,  3355,  3356,  3357,  3358,  3360,  3361,  3362,
    3363,  3364,  3368,  3369,  3370,  3371,  3372,  3373,  3374,  3376,
    3377,  3378,  3379,  3380,  3384,  3385,  3386,  3390,  3391,  3395,
    3396,  3397,  3398,  3399,  3400,  3401,  3405,  3406,  3407,  3409,
    3410,  3411,  3415,  3419,  3420,  3422,  3423,  3424,  3428,  3429,
    3430,  3431,  3435,  3436,  3440,  3441,  3442,  3446,  3447,  3448,
    3449,  3450,  3451,  3452,  3456,  3457,  3458,  3459,  3463,  3464,
    3465,  3466,  3470,  3474,  3478,  3480,  3483,  3489,  3490,  3491,
    3495,  3496,  3497,  3498,  3499,  3500,  3504,  3505,  3509,  3510,
    3511,  3513,  3514,  3516,  3517,  3518,  3519,  3520,  3522,  3523,
    3527,  3528,  3529,  3530,  3534,  3535,  3536,  3537,  3539,  3540,
    3541,  3542,  3543,  3544,  3545,  3548,  3552,  3553,  3557,  3558,
    3562,  3563,  3564,  3565,  3566,  3567,  3568,  3569,  3573,  3574,
    3575,  3576,  3582,  3583,  3585,  3586,  3589,  3590,  3593,  3594,
    3595,  3596,  3597,  3598,  3602,  3603,  3615,  3616,  3619,  3622,
    3624,  3625,  3626,  3636,  3638,  3639,  3641,  3642,  3643,  3644,
    3654,  3655,  3656,  3657,  3658,  3659,  3660,  3661,  3662,  3666,
    3667,  3676,  3678,  3679,  3681,  3683,  3687,  3688,  3689,  3690,
    3691,  3695,  3696,  3697,  3699,  3704,  3705,  3706,  3710,  3711,
    3712,  3716,  3720,  3721,  3722,  3726,  3727,  3731,  3732,  3736,
    3737,  3738,  3739,  3743,  3747,  3751,  3755
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "FLOAT16", "LONG",
  "SIGNED", "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID",
  "VALIST", "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF",
  "SWITCH", "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN",
  "IFX", "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP",
  "NEWOP", "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT",
  "DEFINE", "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT",
  "ANY_OBJECT", "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH",
  "STOPWATCHING", "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER",
  "CLASS_NO_EXPANSION", "CLASS_FIXED", "ISPROPSET",
  "CLASS_DEFAULT_PROPERTY", "PROPERTY_CATEGORY", "CLASS_DATA",
  "CLASS_PROPERTY", "SUBCLASS", "NAMESPACE", "NEW0OP", "RENEW0", "VAARG",
  "DBTABLE", "DBFIELD", "DBINDEX", "DATABASE_OPEN", "ALIGNOF",
  "ATTRIB_DEP", "__ATTRIB", "BOOL", "_BOOL", "_COMPLEX", "_IMAGINARY",
  "RESTRICT", "THREAD", "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF",
  "PRAGMA", "STATIC_ASSERT", "_ALIGNAS", "'*'", "'<'", "'>'", "'('", "')'",
  "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'", "'['",
  "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'", "'?'",
  "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    42,    60,    62,    40,    41,
     126,    59,    61,    44,   125,   123,    46,    58,    36,    91,
      93,    38,    43,    45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   150,   151,   151,   152,   152,   153,   154,   155,   155,
     155,   156,   156,   157,   158,   159,   159,   160,   160,   161,
     161,   162,   162,   162,   162,   162,   162,   162,   163,   163,
     163,   163,   163,   164,   164,   165,   166,   167,   167,   167,
     168,   168,   169,   169,   169,   170,   170,   170,   171,   171,
     171,   171,   171,   171,   172,   172,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   174,   174,   174,   174,   175,
     175,   175,   175,   175,   175,   175,   176,   176,   177,   177,
     177,   177,   177,   178,   178,   179,   179,   179,   179,   179,
     180,   180,   180,   181,   181,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   183,   183,   184,   184,   184,
     184,   184,   185,   186,   186,   186,   187,   187,   187,   188,
     188,   188,   188,   189,   189,   189,   189,   189,   190,   190,
     190,   190,   190,   190,   191,   192,   192,   192,   192,   192,
     193,   193,   193,   194,   195,   195,   196,   196,   197,   197,
     198,   199,   199,   200,   200,   200,   200,   201,   201,   201,
     201,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   204,   204,   204,   205,
     205,   205,   205,   205,   206,   206,   207,   207,   208,   208,
     208,   208,   208,   208,   208,   208,   209,   210,   210,   211,
     212,   212,   213,   213,   213,   214,   214,   215,   215,   215,
     215,   215,   215,   216,   216,   217,   218,   218,   218,   218,
     218,   218,   218,   218,   219,   219,   219,   219,   219,   219,
     220,   221,   221,   221,   221,   221,   221,   222,   223,   223,
     224,   224,   224,   225,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   227,   228,   229,   229,   230,   230,   230,   230,
     230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   230,   231,   231,   231,   231,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   233,   233,
     233,   233,   233,   233,   234,   234,   235,   235,   235,   235,
     235,   235,   235,   235,   236,   236,   236,   237,   237,   237,
     237,   237,   237,   237,   238,   238,   238,   238,   238,   239,
     239,   239,   239,   239,   240,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   243,   243,   243,   243,   243,   244,   244,
     244,   244,   244,   245,   245,   245,   245,   245,   246,   246,
     246,   247,   247,   247,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   249,   249,   249,   249,   249,   249,   249,   249,   249,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     250,   251,   251,   251,   251,   252,   252,   252,   253,   253,
     253,   253,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   254,   254,   254,   254,   254,   255,
     255,   256,   256,   257,   257,   257,   257,   257,   257,   257,
     258,   258,   258,   258,   258,   259,   259,   259,   259,   259,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   262,   262,
     262,   262,   262,   263,   263,   263,   263,   263,   264,   264,
     264,   264,   264,   265,   265,   265,   266,   266,   266,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   269,   269,   269,   269,   269,   269,   269,
     270,   270,   270,   270,   271,   272,   273,   273,   273,   273,
     273,   273,   273,   274,   274,   274,   274,   274,   274,   274,
     275,   275,   275,   275,   275,   275,   276,   276,   276,   277,
     278,   278,   279,   279,   279,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   281,
     281,   282,   282,   282,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   284,   284,   285,   285,   286,   287,
     287,   287,   288,   288,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   290,   290,   290,   290,   290,   290,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     291,   291,   291,   291,   291,   291,   291,   291,   291,   291,
     292,   292,   293,   293,   293,   293,   294,   294,   294,   294,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   296,
     297,   297,   298,   299,   299,   299,   299,   300,   300,   300,
     300,   300,   300,   300,   300,   300,   301,   301,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   305,   305,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   307,   307,
     308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   309,   309,   310,   310,   310,   310,   310,   310,
     310,   310,   310,   310,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   312,   312,
     312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
     312,   312,   313,   313,   314,   314,   314,   314,   314,   315,
     315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   317,
     318,   318,   318,   318,   318,   319,   319,   319,   319,   320,
     320,   321,   322,   322,   322,   322,   322,   323,   323,   323,
     323,   324,   324,   325,   325,   325,   325,   325,   325,   325,
     325,   326,   326,   326,   327,   327,   327,   327,   327,   328,
     328,   329,   329,   329,   330,   330,   331,   331,   332,   332,
     332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
     332,   332,   332,   332,   333,   333,   333,   333,   333,   333,
     333,   333,   334,   334,   334,   334,   335,   335,   335,   335,
     335,   336,   336,   336,   336,   336,   337,   337,   337,   337,
     337,   338,   338,   338,   338,   339,   339,   339,   339,   340,
     340,   340,   340,   341,   341,   341,   341,   342,   342,   342,
     342,   343,   343,   343,   343,   344,   344,   344,   345,   345,
     346,   346,   346,   346,   346,   347,   347,   348,   348,   349,
     349,   349,   349,   349,   349,   350,   350,   350,   351,   351,
     352,   352,   352,   352,   352,   352,   352,   352,   352,   353,
     353,   353,   353,   354,   354,   355,   355,   356,   356,   356,
     356,   356,   356,   357,   357,   358,   358,   358,   358,   358,
     358,   358,   358,   358,   358,   359,   359,   359,   359,   359,
     359,   359,   359,   360,   360,   360,   360,   360,   360,   361,
     361,   361,   362,   362,   362,   362,   362,   362,   362,   362,
     362,   362,   362,   362,   362,   363,   363,   363,   363,   363,
     363,   363,   364,   364,   364,   365,   365,   365,   366,   366,
     366,   366,   366,   366,   366,   366,   366,   366,   366,   366,
     366,   366,   367,   367,   367,   367,   367,   367,   367,   367,
     367,   367,   368,   368,   368,   368,   368,   368,   368,   368,
     368,   368,   368,   368,   369,   369,   369,   370,   370,   371,
     371,   371,   371,   371,   371,   371,   372,   372,   372,   372,
     372,   372,   373,   374,   374,   374,   374,   374,   375,   375,
     375,   375,   376,   376,   377,   377,   377,   378,   378,   378,
     378,   378,   378,   378,   379,   379,   379,   379,   380,   380,
     380,   380,   381,   382,   383,   383,   383,   384,   384,   384,
     385,   385,   385,   385,   385,   385,   386,   386,   387,   387,
     387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     389,   389,   389,   389,   389,   389,   389,   389,   390,   390,
     390,   390,   391,   391,   391,   391,   391,   391,   392,   392,
     392,   392,   392,   392,   393,   393,   394,   394,   394,   394,
     394,   394,   394,   394,   394,   394,   394,   394,   394,   394,
     394,   394,   394,   394,   394,   394,   394,   394,   394,   395,
     395,   395,   395,   395,   395,   395,   396,   396,   396,   396,
     396,   397,   397,   397,   397,   398,   398,   398,   399,   399,
     399,   400,   401,   401,   401,   402,   402,   403,   403,   404,
     404,   404,   404,   405,   406,   407,   408
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       6,     7,     6,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     4,     1,
       1,     2,     2,     3,     5,     2,     3,     5,     5,     5,
       1,     3,     2,     2,     3,     3,     2,     3,     3,     4,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     1,
       1,     4,     3,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     3,     3,     1,     3,     3,     3,     3,     1,
       1,     1,     4,     4,     4,     3,     4,     4,     4,     3,
       1,     3,     4,     3,     4,     4,     4,     4,     3,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     1,     1,     2,     2,     1,     1,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     2,     3,     6,     5,     1,     2,     3,     4,
       2,     3,     3,     3,     3,     4,     4,     4,     2,     3,
       3,     3,     4,     4,     3,     4,     2,     3,     3,     3,
       4,     4,     1,     2,     2,     3,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     3,     1,     2,     3,     2,
       2,     1,     2,     3,     2,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     3,     4,     3,     4,
       1,     4,     2,     5,     3,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     2,     1,     1,     3,     2,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       2,     3,     3,     1,     2,     1,     2,     2,     2,     2,
       3,     1,     1,     3,     3,     1,     3,     4,     3,     4,
       3,     3,     4,     3,     4,     1,     3,     3,     4,     3,
       3,     3,     4,     1,     3,     3,     3,     3,     3,     1,
       3,     2,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     1,
       2,     1,     1,     4,     7,     1,     3,     0,     6,     8,
      10,    12,     8,    10,    10,     5,     7,     9,    11,     7,
       9,     9,     3,     4,     4,     3,     3,     3,     4,     4,
       3,     3,     3,     4,     4,     3,     2,     3,     2,     3,
       4,     4,     3,     3,     1,     1,     1,     1,     1,     2,
       3,     2,     2,     4,     6,     1,     2,     3,     3,     2,
       5,     6,     2,     2,     2,     2,     2,     2,     1,     2,
       2,     3,     1,     2,     1,     2,     2,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       2,     2,     1,     2,     2,     1,     2,     1,     2,     2,
       5,     5,     7,     7,     5,     5,     3,     2,     5,     4,
       4,     7,     6,     6,     5,     7,     6,     4,     7,     9,
       3,     4,     4,     5,     5,     6,     7,     6,     6,     5,
       5,     4,     3,     2,     1,     2,     4,     3,     5,     4,
       3,     2,     2,     2,     3,     3,     3,     3,     2,     2,
       1,     1,     4,     3,     4,     3,     3,     2,     4,     3,
       4,     3,     3,     2,     1,     2,     1,     1,     2,     1,
       2,     3,     3,     1,     2,     2,     2,     3,     4,     4,
       2,     2,     2,     2,     1,     2,     1,     4,     6,     1,
       2,     1,     2,     2,     1,     2,     1,     2,     2,     2,
       2,     1,     2,     2,     3,     1,     1,     0,     6,     6,
       5,     4,     1,     2,     2,     1,     3,     3,     4,     1,
       1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1317,   257,     6,   593,   594,   595,   597,   598,   665,   666,
     667,   668,   669,   670,   671,   672,   674,   677,   678,   675,
     676,   659,   660,   664,   673,   766,   767,   609,  1156,   235,
     686,   923,   924,     0,     0,   931,  1154,  1155,   687,   688,
     679,     0,     0,     0,     0,     0,   932,   933,   690,   689,
     691,   692,   599,   596,  1296,     0,     0,   972,     0,  1283,
     814,   682,     8,     4,     0,     0,     0,  1277,     0,  1299,
     890,   808,     0,   681,     0,   654,   656,   816,   818,   661,
     810,   812,   749,   680,     0,     0,   655,   657,     0,     0,
       0,     0,     0,   995,   658,     0,   927,   928,     0,     0,
       0,  1279,  1304,  1276,  1301,  1311,  1306,     0,     0,     0,
    1294,     0,  1291,  1274,     0,     0,  1280,     0,     0,     0,
       0,  1293,  1292,     0,     0,     0,   662,   973,   658,   974,
     881,   880,   890,   922,   879,   909,   986,     0,   921,   991,
       0,     0,     0,     0,     0,     0,  1169,     0,   237,   236,
       0,     0,   245,     0,   244,     2,     3,     0,     5,     0,
     611,   610,     0,     0,   631,     0,     0,     0,     0,   753,
       0,   733,   732,     0,  1172,   595,   668,   669,   670,   671,
     672,  1166,   815,     8,  1278,  1300,   890,   809,   817,   819,
     811,   813,   995,  1003,   658,     0,     0,  1036,     0,     0,
       0,  1049,     0,     0,   881,     0,     0,     0,     0,   880,
       0,     0,   899,     0,     0,   586,   587,   588,   590,   591,
    1062,   592,   589,   904,   802,   874,   796,     0,   806,     0,
     798,   800,   749,   804,     0,     0,  1061,     0,     0,  1065,
    1075,     0,     0,     0,     0,   926,   925,     0,     0,   947,
     996,     0,   694,   695,   696,   697,   698,   699,   700,   701,
     703,   706,   707,   704,   705,   693,   702,   719,   708,     0,
       0,   713,   712,   714,   715,  1165,     0,  1202,   711,     0,
       0,   786,   710,   792,   788,   790,   794,   709,     0,  1178,
       0,     0,     0,     0,  1267,  1273,   595,     0,  1290,  1285,
    1302,     0,  1286,  1305,  1284,  1303,  1295,  1310,  1313,     0,
       0,     0,     0,     0,  1308,  1309,  1312,  1307,     1,     0,
    1281,  1282,  1275,     0,     0,   459,   263,     0,     0,     0,
       0,     0,     0,   352,   353,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   273,     0,   347,     0,   350,
       0,     0,   346,   348,   349,   351,     0,   265,     0,   264,
     306,   272,   271,   258,   458,     0,   344,   354,     0,   357,
     364,   369,   375,     0,   384,   393,   398,   403,   408,   411,
     414,   431,     0,   480,   479,   481,   483,   490,   495,   500,
     509,   518,   523,   528,   533,   536,   539,     0,   260,   296,
     297,   298,   299,     0,     0,     0,     0,     0,   354,     0,
       0,   481,   568,   573,     0,   354,   414,   584,   481,     0,
       0,   663,   975,     0,   911,     0,   916,     0,     0,     0,
       0,   926,   925,     0,     0,     0,   922,   987,   992,     0,
     891,   989,   893,   994,   990,   679,     4,   229,   228,   227,
     233,     0,   264,   219,     0,   206,   249,     0,     0,   248,
     255,     0,     0,  1157,  1158,     0,   168,     0,   169,   170,
       0,     0,     0,     0,     0,   172,   246,     0,     0,     0,
       0,    29,    31,   163,   175,   188,     0,   187,     0,   116,
     119,     0,   195,   128,     0,   164,   140,     0,   167,   183,
     196,   199,     0,     0,   264,     0,     0,   176,     0,   999,
     658,     0,    12,    18,     0,   821,   820,   828,   822,     0,
     824,   826,   749,   833,   832,   250,   256,   247,     0,     0,
     239,   238,   644,   600,   606,   643,   647,   633,     0,     0,
       0,   222,   223,   224,   225,     0,   217,     0,   762,   755,
       0,     0,   752,   759,   754,     0,     0,   765,   756,     0,
       0,   735,   734,     0,     0,     0,     0,     0,     0,     0,
       0,   996,  1004,     0,  1038,     0,     0,  1263,  1269,     0,
    1265,  1271,  1050,  1167,     0,     0,     0,  1168,   898,     0,
     264,   585,     0,     0,     0,     0,   611,   610,   612,     0,
     736,     0,     0,   668,     0,     0,  1059,   803,     8,   890,
     797,   807,   799,   801,   805,   922,   879,   658,   977,   976,
       0,     0,     0,   903,     0,     0,   902,     0,     0,     0,
    1091,     0,   900,   901,   997,     0,   998,     0,     0,     0,
    1176,  1161,  1175,    76,  1173,   697,   698,   699,   700,   701,
    1159,   890,   787,   793,   789,   791,   795,   658,     0,  1177,
    1174,  1162,     0,  1179,     0,  1266,  1272,  1180,     0,     0,
       0,     0,     0,     0,     0,     0,  1261,     0,     0,     0,
     708,     0,     0,     0,   157,  1095,  1096,   711,     0,     0,
       0,   264,     0,     0,     0,     0,  1093,  1184,  1187,  1101,
    1092,  1105,     0,     0,     0,     0,  1206,  1204,  1094,  1107,
       0,  1108,  1099,  1106,     0,  1109,  1203,     0,     0,  1287,
     890,     0,     0,     0,  1300,     0,   879,  1003,   658,     0,
       0,     0,     0,  1273,  1314,     0,     0,     0,   929,     0,
     337,   473,     0,   333,   469,   334,   470,     0,   868,   858,
     866,   860,   862,   864,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   341,   477,     0,   274,
       0,     0,   772,   768,   770,   774,  1053,     0,   261,     0,
     301,   302,     0,   325,     0,   324,     0,   461,    93,     0,
     270,   460,     0,   314,   315,     0,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   440,     0,
       0,   336,   472,   335,   471,     0,     0,     0,     0,     0,
       0,     0,   376,   501,     0,     0,   374,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   683,     0,   322,
     323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   684,   685,     0,     0,     0,
    1329,  1330,     0,     0,     0,     0,   574,  1297,     0,     0,
       0,     0,   454,     0,     0,     0,     0,   930,   885,     0,
       0,     0,   889,     0,     0,     0,   915,   914,   912,   913,
     922,   987,   992,   892,   894,  1014,    10,     9,     0,     0,
       0,   658,   976,   207,     0,     0,   264,   206,     0,     0,
     840,   834,   836,   838,     0,     0,     0,    16,    20,     0,
     185,   184,   186,     0,     0,     0,     0,   347,     0,   264,
       0,    26,     0,    21,    28,    24,     0,    25,    23,    22,
      30,    32,   190,    83,   191,   122,   162,     0,     0,     0,
       0,   132,     0,     0,   134,     0,     0,   143,   161,   200,
     197,   202,   201,   198,   203,   115,     0,     0,     0,   890,
     730,   177,  1011,     0,  1007,   658,     0,    11,    17,   720,
     906,  1061,     0,     0,     0,  1000,     0,     0,   173,   165,
     192,   181,     0,   180,     0,   166,   890,   179,     0,   611,
     610,   829,   823,   825,   827,     0,     0,     0,   946,   603,
     608,   646,     0,     0,     7,   212,   208,   751,     0,     0,
       0,     0,  1035,  1042,  1043,  1044,  1045,  1046,  1047,    64,
      53,    92,    39,    38,    57,    69,    45,    48,     0,    74,
      56,     0,     0,     0,  1026,  1028,     0,  1025,  1027,     0,
      41,    44,   922,   997,   988,  1005,   993,  1014,  1006,     0,
    1015,  1020,  1037,  1039,  1262,  1268,  1264,  1270,  1041,  1051,
    1048,  1052,   897,   895,   896,  1088,  1070,  1079,   616,   615,
       0,     0,   459,   737,     0,     0,   459,   738,     0,     0,
       0,   958,   890,     0,     0,   658,   976,     0,     0,     0,
     950,     0,     0,     0,     0,     0,  1060,   979,     0,     0,
     978,  1064,  1063,     0,   873,  1087,   876,  1073,  1081,     0,
     872,  1086,   875,  1071,  1080,     0,  1090,  1084,   877,  1066,
    1076,     0,  1085,   878,  1068,  1077,   934,   935,   938,   937,
     936,     0,   939,   941,     0,     0,     0,     0,     0,    77,
       0,  1160,  1181,     0,     0,     0,     0,     0,     0,  1245,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,  1093,  1243,  1098,  1100,     0,     0,  1251,  1252,  1253,
       0,  1259,     0,     0,     0,     0,     0,     0,   158,   144,
    1104,  1103,  1102,     0,     0,     0,  1097,     0,   459,     0,
       0,     0,     0,  1185,  1188,  1190,     0,  1186,  1189,  1191,
       0,  1217,  1110,  1288,  1289,   237,   236,     0,     0,     0,
    1004,     0,     0,  1269,     0,  1271,  1272,     0,  1170,     0,
     780,   264,   782,   776,   778,   784,  1055,     0,     0,     0,
       0,     0,     0,   869,   859,   867,   861,   863,   865,   658,
     982,   981,     0,   854,   844,   852,   846,   848,   850,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,   773,   769,   771,   775,
    1054,     0,     0,   459,     0,     0,     0,   105,     0,   300,
     459,     0,     0,    94,   459,     0,     0,   462,   313,   309,
     329,   464,   465,   328,   466,   312,     0,     0,   436,   432,
     303,   358,   484,   359,   485,   360,   486,   365,   491,   366,
     492,   370,   496,   371,   497,   378,   503,   379,   504,   377,
     502,   389,   514,   385,   510,   390,   515,   386,   511,   396,
     521,   394,   519,   401,   526,   399,   524,   406,   531,   404,
     529,   409,   534,   412,   537,   564,     0,   580,     0,     0,
       0,     0,   438,   434,   463,   321,   318,     0,   467,   468,
     320,     0,     0,   437,   433,   361,   487,   362,   488,   363,
     489,   367,   493,   368,   494,   372,   498,   373,   499,   382,
     507,   383,   508,   380,   505,   381,   506,   391,   516,   387,
     512,   392,   517,   388,   513,   397,   522,   395,   520,   402,
     527,   400,   525,   407,   532,   405,   530,   410,   535,   413,
     538,   565,     0,     0,     0,     0,   439,   435,     0,     0,
    1322,  1325,     0,     0,  1320,  1331,  1332,     0,     0,   571,
     569,   452,   575,   260,   572,   570,   453,   576,     0,     0,
       0,     0,     0,     0,     0,     0,   884,   882,   883,   888,
     886,   887,   234,   232,   231,   230,   264,   658,   979,   241,
       0,   207,   240,   127,     0,   125,   841,   835,   837,   839,
       0,   658,     0,    15,    19,     0,   182,  1011,   658,     0,
     139,     0,   137,   841,     0,   264,   658,     0,    27,    84,
     117,   120,   118,   121,   129,   130,   131,   133,   141,   142,
     114,   112,   113,    13,   722,   725,     0,     0,   918,  1061,
       0,     0,     0,  1012,  1008,     0,     0,   721,   890,   907,
    1001,  1002,   890,   193,   194,   178,     0,     0,     0,     0,
     601,   602,     0,   607,     0,     0,   636,   632,     0,     0,
       0,     0,     0,   226,   218,   216,     0,     0,     0,    36,
      37,    75,    54,     0,    55,     0,    63,    61,    72,    67,
      73,    60,    90,    39,    70,    62,    91,    59,    71,    68,
       0,    58,     0,   697,    33,    35,    34,  1029,  1030,     0,
     624,   614,     0,   619,   613,     0,   459,   739,     0,     0,
       0,   976,     0,   948,   959,   960,   953,   951,   952,     0,
     980,   961,     0,     0,   954,     0,     0,     0,  1074,  1082,
    1061,  1072,  1067,  1069,  1078,   945,     0,     0,     0,   942,
     716,   717,   718,  1163,     0,   459,     0,     0,  1135,  1145,
    1140,     0,     0,     0,  1136,  1147,  1141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1242,  1230,     0,
    1207,   264,     0,     0,     0,  1250,  1256,  1257,  1254,  1255,
       0,     0,     0,     0,   145,  1132,  1142,  1137,     0,   159,
       0,     0,     0,     0,  1005,  1268,  1270,  1171,     0,     0,
     781,   783,   777,   779,   785,  1056,     0,   293,   291,     0,
       0,   966,   658,     0,     0,     0,     0,     0,     0,   984,
       0,   983,     0,     0,     0,   855,   845,   853,   847,   849,
     851,     0,   267,     0,   266,   295,     0,     0,     0,     0,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,   356,
     482,   355,   262,   108,   106,   327,   326,    99,   103,   310,
       0,   311,   307,   308,   581,     0,     0,     0,     0,     0,
       0,   319,   316,   317,     0,     0,     0,     0,  1324,  1323,
    1327,     0,     0,     0,  1319,  1318,  1298,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   976,   218,     0,     0,
     123,   126,     0,     0,     0,     0,     0,  1012,     0,   135,
     138,     0,    14,   459,     0,     0,   731,     0,   890,   919,
    1013,  1009,  1010,   723,   726,   908,   174,   830,     0,   243,
     242,   604,   605,     0,   635,     0,   213,   214,   204,   209,
     210,   220,     0,     0,    51,    46,    49,    52,    47,    50,
      37,    43,    40,    42,     0,     0,  1033,  1034,   623,     0,
     618,     0,   979,   978,   949,   962,   963,   956,   955,   957,
    1058,  1057,     0,   944,   943,   260,    79,  1133,  1143,  1138,
       0,  1134,  1144,  1139,     0,     0,     0,     0,     0,  1246,
    1220,     0,     0,  1219,  1249,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1227,     0,  1208,  1231,
    1209,  1232,     0,     0,     0,  1117,   929,  1117,     0,     0,
     155,     0,     0,     0,   160,     0,     0,   474,   292,   870,
       0,   981,     0,   964,   967,   968,   277,   278,     0,   985,
     969,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   331,   330,   456,   582,
     423,   556,   415,   540,   427,   560,   419,   548,   457,   583,
     424,   557,   416,   541,   428,   561,   420,   549,   425,   558,
     417,   542,   429,   562,   421,   550,   426,   559,   418,   543,
     430,   563,   422,   551,  1326,  1328,  1321,   842,     0,   124,
     150,  1013,     0,   136,    86,   920,     0,     0,   831,     0,
       0,     0,     0,     0,     0,   205,     0,   221,     0,     0,
    1031,  1032,  1021,     0,     0,     0,     0,   940,  1164,  1210,
    1211,  1214,  1215,  1218,  1248,     0,     0,     0,     0,     0,
       0,     0,  1224,  1233,     0,     0,     0,     0,  1115,     0,
    1112,  1125,     0,  1117,     0,  1117,     0,     0,     0,     0,
     476,   475,   983,   965,   871,   970,   971,   275,   276,   856,
     285,   286,     0,     0,     0,     0,   279,   280,   289,   290,
       0,     0,   294,  1334,  1335,  1333,   343,     0,  1018,   843,
       0,   724,   727,   729,   728,     0,     0,   215,   211,     0,
    1016,  1023,     0,     0,     0,     0,     0,     0,     0,  1238,
    1222,     0,     0,  1223,  1235,     0,  1226,  1237,     0,     0,
       0,  1117,     0,  1117,     0,  1117,     0,  1118,     0,     0,
       0,   148,     0,   153,     0,   156,     0,   857,   283,   284,
       0,   287,   288,  1019,   171,  1017,  1212,  1213,     0,     0,
    1221,  1228,     0,  1225,  1236,     0,  1129,  1116,     0,     0,
       0,  1126,     0,     0,  1117,  1117,     0,  1117,   147,   146,
     151,   149,     0,     0,     0,   356,   482,   269,     0,     0,
       0,  1113,     0,     0,  1117,  1122,     0,     0,  1119,     0,
       0,   154,     0,  1229,     0,  1130,  1131,  1127,     0,     0,
       0,     0,  1117,   152,     0,  1016,     0,     0,  1123,  1124,
    1120,     0,  1017,  1114,  1128,     0,  1121
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   224,    61,    62,  1025,   356,   477,   478,   479,   480,
     481,   482,   483,   484,  1042,  1043,  1044,  1045,  1046,  1047,
    1048,  1049,  1050,  1051,  1052,  1053,   279,   280,   485,   486,
      64,   357,   358,   781,   810,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,  2150,  2151,  2152,   499,   688,
     689,   690,   500,   501,   502,   503,  1847,   447,   541,   448,
     542,   449,   543,   544,   915,   450,   451,    65,    66,    67,
      68,    69,   359,   360,   361,   362,   363,  1054,  1055,   364,
     365,   784,  1312,   366,   408,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   409,
     864,   694,  1369,   383,   384,   411,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   412,   413,   414,
    1371,   420,   593,   226,    71,   534,   535,   227,    73,   228,
     229,    74,    75,    76,    77,    78,    79,   230,   127,   231,
     285,   980,   981,   232,   233,   234,    83,    84,    85,    86,
      87,   235,   776,  1246,   288,   507,    89,    90,   524,   525,
     925,  1269,   754,  1103,  1104,   133,    91,   508,    93,   509,
     136,   137,   138,   984,   139,   128,    95,  1152,  1153,  1154,
      96,    97,   618,  1260,   511,   620,  1262,   142,   197,   512,
     513,   199,   988,   144,  1597,  1761,  1598,  1060,  1061,  1599,
     200,   201,   202,   203,   777,  1247,   239,   240,   241,   242,
     243,   244,   697,   698,  2068,  2069,   699,   700,   701,   100,
     514,   289,   101,   102,   290,   291,   292,   704,   705,   706,
     707,   293,   708,   946,  1684,  1183,   711,   712,   713,  1184,
     715,   103,   104,   398,   105,   106,   107,   108,   109,   110,
     870,  1441,  1442,   871,   872,   399,   400,   401,   402
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1871
static const int yypact[] =
{
   40698, -1871, -1871, -1871, -1871,    27, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871,   861,    59, -1871, -1871, -1871, -1871, -1871,
   -1871,   -50,    -9,    10,   633,    80, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871,    20,   326,  2420,  3266, -1871,
   -1871, -1871,   283, -1871,   349,   633,   495, -1871,   813,   354,
     986, -1871,   177, -1871,   514, -1871,   396, -1871, -1871, -1871,
   -1871, -1871,   -10, -1871,   589,   408, -1871,   546,  1975, 40282,
    4049,   862, 41007, -1871,     7,   464, -1871,   897,  1460, 43899,
   38859, -1871, -1871, -1871, -1871, -1871, -1871, 40803, 39856,   692,
   -1871,    59, -1871, -1871,    80,    80,   729,   563,    80, 31402,
     633, -1871, -1871,   281, 31402, 31402, -1871,  2420,  1289, -1871,
   -1871,   660, -1871,   864,  1037, -1871, -1871, 41109, -1871, -1871,
    3814,  3304,  1911,  1929,  1734, 24718, -1871,   615,   245,   384,
   32550, 43404, -1871, 32682, -1871, -1871, -1871,   633, -1871,  1119,
    1018,  1023,   109, 43404, -1871, 43113, 32814, 43404, 32946, -1871,
   33078, -1871, -1871,  1246, -1871, -1871,   -11,   684,   703,   706,
     761, -1871, -1871,  1091, -1871,   354,   282, -1871, -1871, -1871,
   -1871, -1871,  1303,  1341,     7,  3304,  1705,  1734, 43899, 43899,
     538, -1871,  1053,   779,   801,   684,   703,   706,   761,   627,
       7,  1102, -1871, 29618,   818, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871,   920, -1871,   344, -1871,   834,
   -1871, -1871,   870, -1871,   898,  1994, 11013,   553,   607, -1871,
   -1871,   658,   689,   908,   928, -1871, -1871,   585,   944, -1871,
   -1871,   844, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,   959,
     975, -1871, -1871, -1871, -1871, -1871,   985, -1871, -1871,   135,
      65, -1871, -1871, -1871, -1871, -1871, -1871, -1871, 40490, -1871,
   18209, 39320, 44114, 18354, -1871,   996,  1058,   934, -1871, -1871,
     354, 40386, -1871, -1871, -1871, -1871, -1871, -1871, -1871,   396,
     546, 41619, 43899, 41924, -1871, -1871, -1871, -1871, -1871,  1008,
     729,   729, -1871, 31402,   274, -1871, -1871, 31463, 31550, 31550,
    1017, 43598, 31402, -1871, -1871,  1055,  1071, 43598, 31402,  1085,
    1114,  1158,  1166,  1169, 31611, -1871,  1179, -1871, 24974, -1871,
      80, 26790, -1871, -1871, -1871, -1871,  1200, -1871,    78,  1223,
   -1871, -1871,    59, -1871, -1871, 13086, -1871,  1577, 29679, -1871,
     773,  1254,  1401, 31402,   694,  1529,  1191,  1239,  1278,  1415,
      39,  1577,  1317,   647, -1871,  1577, -1871,  1142,  1414,  1569,
    1065,  1592,  1308,  1332,  1321,  1478,   126,  1577,   729, -1871,
   -1871, -1871, -1871,  1373,   102, 43210,  1374,  1384,  1577, 13238,
   26877,  1577,  1577, -1871, 26964, -1871,   334, -1871, -1871,   393,
    1399, -1871, -1871, 29766, -1871, 29827, -1871,   690,   732,  1402,
    1421,   725,   755,  3304,  2237,  2628,   864, -1871, -1871,  1073,
   -1871,  1289, -1871,  1289,  1289,  1055,  1200, -1871, -1871, -1871,
   -1871,   837,   253,  1401,  1569, 38053, -1871, 24846, 43113, -1871,
     457, 42822, 42025, -1871, -1871,  1411, -1871,   633, -1871, -1871,
      59, 42227, 41823,  5800, 43501, -1871, -1871,  1140,  1418,  1418,
    1126, -1871,  1438, -1871, -1871, -1871,   138,   796,   146, -1871,
   -1871, 31882,  1457, -1871,  1256, -1871, -1871,   666, -1871, -1871,
   -1871,  1463, 32022, 32154,   343,   189,   647, 39093, 41211, -1871,
       7,  1460, -1871, -1871, 38976, -1871, -1871,  1486, -1871,   633,
   -1871, -1871, -1871,  2102, 43598, -1871,   457, -1871, 32286, 32418,
    1498,  1501, -1871,   984, -1871,  1538, -1871, -1871,  3785,  1540,
     830, -1871, -1871, -1871, -1871,   946,   892, 38053,   723, -1871,
   33210, 33342, -1871,   723, -1871, 33474, 33606,   723, -1871, 33738,
   33870, -1871, -1871,  3266,  3266,  3266,  3266,  3266,  3266, 22846,
     919,  1303,  1341,  1073, -1871, 29914, 39320, -1871,   996, 39320,
   -1871,   996, -1871, -1871,  3266,  3266,   919, -1871, -1871,  1537,
     426, -1871,  1541,  1542, 42919,  1244,  1543,  1545, -1871, 34002,
   -1871, 34134,   374, -1871, 37817, 30001,  3266, -1871,  1076,   920,
   -1871, -1871, -1871, -1871, -1871,   864,  1546,     7,   965,    93,
     353,  1167,  1550, -1871, 42531,  1554, -1871, 42628,  1555, 42725,
    1559, 43016, -1871, -1871, -1871,  1105, -1871, 31402,   633, 31402,
   -1871, -1871,  1561, -1871, -1871,   -11,   684,   703,   706,   761,
   -1871,  1549, -1871, -1871, -1871, -1871, -1871,     7,  1243,   779,
   -1871, -1871,  1566, -1871, 18499, -1871,   996, -1871,   244, 30062,
    1567,  1568,  1582,   101, 18644,  1593,    59,  1574,  1591, 18789,
    1055,  1835,  1595,  1596,    59, -1871, -1871,  1200,  1594,  1598,
    1600,  1333, 16456, 16904,  9833, 17049, 40594, -1871, -1871, -1871,
   -1871, -1871, 18934, 19079, 19224, 19369, -1871, -1871, -1871,   996,
   19514, -1871, -1871, -1871, 19659, -1871, -1871,    80,    80,   729,
     391,   633,  1383,  1597, -1871,   864,   862, -1871,     7,  3304,
   43899, 43899, 39320, -1871, -1871, 41721, 31402,  1606, -1871, 25118,
   -1871, -1871, 30149, -1871, -1871, -1871, -1871, 43598,  1614, -1871,
   -1871, -1871, -1871, -1871, 38287, 43598, 25262,    59, 38404, 43598,
   31402,    80,    80,    80, 31402, 24974, -1871, -1871, 43690, -1871,
   13453, 13606, -1871, -1871, -1871, -1871, 38744,  1612,    35, 22990,
   -1871, -1871,   157, -1871,   302, -1871, 23134,  1608, -1871, 23278,
   -1871, -1871,  1380, -1871, -1871, 27051,  1548, 31402, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, 29679,
     171, -1871, -1871, -1871, -1871, 31402, 31402, 31402, 31402, 31402,
   31402, 31402,  1401,  1569, 31402, 31402, -1871, 31402, 29679, 29679,
   29679, 29679, 29679, 31402, 31402, 13756, 29679, -1871,  1562, -1871,
   -1871, 27138,  1565, 31402, 29679, 31402, 31402, 31402, 31402, 31402,
   31402, 31402, 31402, 31402, 31402, 31402, 29679, 29679, 29679, 29679,
   29679, 31402, 31402, 13906, 29679, -1871, -1871,   770,   920, 43501,
   -1871, -1871, 39961, 43210, 43210, 29679, -1871, -1871, 31402, 14056,
   14206, 29679, -1871, 31402, 14356, 29679, 29679, -1871, -1871,  1586,
    1603,  1604, -1871,  1605,  1607,  1609, -1871, -1871, -1871, -1871,
     864, -1871, -1871, -1871, -1871,  1613, -1871, -1871, 24718, 24718,
   37936,     7,   997, -1871,   742,  1047,   849, 38053,  1089,  1621,
    1622, -1871, -1871, -1871,  2102, 12928, 42126, -1871, -1871,    59,
   -1871, -1871, -1871, 39210,  1623,    59, 38170,  2353, 25390,  2141,
   42328, -1871,  1630, -1871,   996, -1871,   996, -1871, -1871, -1871,
     996, -1871,  1629, -1871,   754, -1871, -1871,  5432,  5432,  1418,
    1418, -1871,  1418,   149, -1871,  1418,  1418, -1871, -1871,   771,
   -1871,  1463,   771, -1871,  1463,   807, 30236,  2796, 31402,   517,
   -1871,  1632,   864, 41313, -1871,     7,  3304, -1871, -1871,   850,
     818, 11013, 31742,   586,   585, -1871,   844,  3266, -1871, -1871,
   -1871, -1871,   186, -1871,   199, -1871,   343, 39093, 24718, -1871,
   -1871,  1640, -1871, -1871, -1871, 43113, 43113, 31402, -1871,  1124,
      59, -1871, 34266,   123, -1871,   863,   882, -1871, 43113,    59,
     910,    59,  2582, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871,  1418, -1871, -1871, -1871, -1871, -1871,  9449,  1444,
   -1871, 23422, 44007, 23566, -1871, -1871, 16605, -1871, -1871, 42429,
   -1871, -1871,   864,  1303, -1871,  1341, -1871,   864, -1871, 29914,
   -1871, -1871, -1871, -1871, -1871,   996, -1871,   996, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,  1538,
     128,   182,  1633, -1871, 34398, 34530,  1634, -1871, 34662, 34794,
   34926, -1871,   419,   436,   458,  2490,  1505,  1641,  1644,  1646,
   -1871,  1643,  1645,  1647,     7,   919,  1734,    93, 41415, 30323,
     965, -1871, -1871, 43307, -1871, -1871,   920, -1871, -1871, 43307,
   -1871, -1871,   920, -1871, -1871, 43307, -1871, -1871,   920, -1871,
   -1871, 43307, -1871,   920, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871,  1651,  1656, -1871,   665,  1661,  1663,   286, 27225, -1871,
   23710, -1871, -1871, 19804,  1657,  1658, 19949, 31402, 31402, -1871,
   30384, 30471,  1664,  1675,  1677, 11576,  1678,    59, 27312,  1973,
    1441, -1871,  1710, -1871, -1871, 27399,  1676, -1871, -1871, -1871,
    1681,  1688, 27486, 17194,    80,  1680, 31402, 31402,    59, -1871,
   -1871, -1871, -1871, 22558,   966,   785, -1871, 31402,  1566, 20094,
   20239, 20384, 20529, -1871, -1871, -1871, 20674, -1871, -1871, -1871,
   20819, -1871, -1871,   729,   729,  1694,  1695, 37566, 37697,   919,
   -1871,  1073, 39320, -1871, 39320, -1871, -1871,  1692, -1871,   825,
   -1871,   343, -1871, -1871, -1871, -1871, 38744,  1698,  1702, 43787,
   24718, 40905, 31402,  1706, -1871, -1871, -1871, -1871, -1871,     7,
    1707,  1711,  1701,  1708, -1871, -1871, -1871, -1871, -1871, 38521,
   27547,  1712,  1715,  1720, 31402,  1713, 38638,  1721,   364,   196,
     388,  1722,  1724,  1726, -1871,    59, -1871, -1871, -1871, -1871,
   -1871, 30532,    80,   202, 11338, 23854,  1723, -1871, 29679, -1871,
     208, 39428, 23998, -1871,   218, 39535, 24142, -1871, -1871, -1871,
   -1871,  1290,  1731, -1871, -1871, -1871, 27634,  7679, -1871, -1871,
    1723, -1871, -1871, -1871, -1871, -1871, -1871,   773,  1142,   773,
    1142,  1254,  1414,  1254,  1414,  1401,  1569,  1401,  1569,  1401,
    1569, -1871, -1871,   694,  1065, -1871, -1871,   694,  1065, -1871,
   -1871,  1529,  1592, -1871, -1871,  1191,  1308, -1871, -1871,  1239,
    1332,  1278,  1321,  1415,  1478, -1871,    23, -1871, 27695,  1727,
    6301,  1728, -1871, -1871, -1871, -1871, -1871,  1292, -1871, -1871,
   -1871, 27782, 10156, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871,   773,  1142,   773,  1142,  1254,  1414,  1254,  1414,  1401,
    1569,  1401,  1569,  1401,  1569,  1401,  1569, -1871, -1871,   694,
    1065, -1871, -1871,   694,  1065, -1871, -1871,  1529,  1592, -1871,
   -1871,  1191,  1308, -1871, -1871,  1239,  1332,  1278,  1321,  1415,
    1478, -1871, 27843,  1730, 11897,  1736, -1871, -1871,    59,    59,
   -1871, -1871,   227,   949, -1871, -1871, -1871, 40068, 40175, -1871,
   -1871, -1871, -1871,   407, -1871, -1871, -1871, -1871, 27930,  1738,
   12139,  1743, 27991,  1744, 12782,  1747, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871,   256,  3487,   997, -1871,
   24718,    59, -1871, -1871, 24718, -1871,   -31, -1871, -1871, -1871,
     493,     7,  3304, -1871, -1871,   299,  1632,  1613,     7,  3304,
   -1871,  1732, -1871,   306,   502,  1410,  3814,  1739, -1871, -1871,
   -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
    2932, -1871, -1871, -1871, -1871, -1871, 24286,  2296,   818, 11013,
   22414,   656,   919,   864, -1871,  1073, 31402, -1871,   938, -1871,
   -1871, -1871,  1756,  1629,  1608,  1632,  1099, 24718,  1150,  1188,
   -1871, -1871, 31402, -1871, 35058, 35190,  1755, -1871,  4606, 43501,
   43501, 43501, 43501, -1871, -1871, -1871, 31402,  1758, 30619, -1871,
     996, -1871, -1871, 30706, -1871, 30793, -1871, -1871, -1871,  1458,
    1444, -1871, -1871,  1418, -1871, -1871, -1871, -1871, -1871,  1458,
    1444, -1871, 30880,  9208, -1871, -1871, -1871, -1871, -1871, 20964,
   -1871, -1871,    73, -1871, -1871,   201,  1753, -1871, 35322, 35454,
       7,  1505,  1759, -1871, -1871, -1871, -1871, -1871, -1871,   919,
     965, -1871,  1760,  1762, -1871,  1752,  1754,  1763, -1871, -1871,
   11013, -1871, -1871, -1871, -1871, -1871, 31402,  1764,  1237, -1871,
   -1871, -1871, -1871, -1871, 31402,   219, 39642, 24430, -1871, -1871,
   -1871, 21109, 22558, 22558, -1871, -1871, -1871, 21254, 28078, 17339,
   28165, 28252, 25768, 28339, 17484, 22702,  1765,  1770, 22702, 31402,
   30967,  1840, 28426,  1688, 26056,    80, 22702,  1772, 12612, 11576,
   -1871,  1485, 28513, 26105, 28574, -1871, -1871, -1871, -1871, -1871,
     139,    80,  1780,  1295, -1871, -1871, -1871, -1871, 21399, -1871,
    1787,  1790,    59, 43113, -1871, -1871, -1871, -1871,  1792,  1797,
   -1871, -1871, -1871, -1871, -1871, -1871, 14506, -1871, -1871,  1799,
    1193, -1871,  2688,  1806,  1812,  1814,  1802,  1804, 24718,  1711,
   41517,  1707, 31402, 24718, 31402,  1836, -1871, -1871, -1871, -1871,
   -1871,  1826, -1871, 31054, -1871, -1871,  1829,  1831, 31402, 31402,
    1827, 43690, -1871,    59,    59, 31402, 14656,    59, 29914, -1871,
   -1871, -1871,   729, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   14806, -1871, -1871, -1871, -1871, 29679, 14956, 15106, 29679, 15256,
   15406, -1871, -1871, -1871, 15556, 15706, 15856, 16006, -1871, -1871,
   -1871,   770,  1843,   440, -1871, -1871, -1871, 29679, 29679, 29679,
   29679, 29679, 29679, 29679, 29679,     7,   997,  1964,  1197, 24718,
   -1871, -1871,  1844,   919,  1073,  1418,   919,  1613,  1849, -1871,
   -1871,  1847, -1871,   225, 39749, 24574, -1871,     7,   942, -1871,
     864, -1871, -1871,  1846,  1848, -1871, -1871, -1871,  1224, -1871,
   -1871, -1871, -1871, 35586,  1853, 35718, -1871,  1854, 38053, -1871,
    1858, -1871, 31402, 29914,  2770, -1871, -1871,  2770, -1871, -1871,
   -1871,  2770, -1871, -1871, 21544, 21689, -1871, -1871, -1871, 35850,
   -1871, 35982,    93,   965, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871,  1734, 28661, -1871, -1871,   443, -1871, -1871, -1871, -1871,
   21834, -1871, -1871, -1871, 21979, 11576, 25480, 11576, 25480, 16754,
   -1871, 25912, 17629, -1871, -1871, 22702, 22702, 28748, 11576, 28835,
   25624,  1865, 26249, 28922,   236, 22124, -1871, 31402, -1871, 16754,
   -1871, 12612, 11576, 26298, 31141,    37,  1863,    37,   237,  1860,
   -1871,    59, 31402, 31402,    59, 16156, 16306, -1871, -1871, -1871,
       7,  1711,  1869, -1871, -1871, -1871, -1871, -1871,  1227,  1707,
   -1871,  1871,  1873,  1864,  1867,  1261,  1872,  1874, 24718, 31402,
   24974, -1871, -1871, -1871,  1875,  1879,  1886,  1898, 31402,  1880,
    1882,  1884,  1910, -1871,  1918,  5120, -1871, -1871, -1871, -1871,
   -1871, -1871, -1871,   393, -1871, -1871, -1871,   393, -1871, -1871,
   -1871, -1871, -1871,   393, -1871, -1871, -1871,   393, -1871, -1871,
   -1871,   393, -1871, -1871, -1871,   393, -1871, -1871, -1871,   393,
   -1871, -1871, -1871,   393, -1871, -1871, -1871, -1871,  1271, -1871,
   -1871,  1613, 29679, -1871, -1871, -1871, 31402, 31402, -1871, 36114,
   36246, 36378, 36510, 36642, 43501, -1871, 43501, -1871, 26442, 22269,
   -1871, -1871, -1871, 36774, 36906, 37038, 37170, -1871, -1871,  1981,
    1990, -1871, -1871, -1871, -1871, 11576, 31402, 31228,  1863, 17774,
   17919, 26529, -1871, 16754, 25912, 29009, 18064,    59, -1871,  1304,
     448, -1871,   181,    37,  1928,    37,   295,   346,  1931,  1311,
   -1871, -1871,  1707, -1871, -1871, -1871, -1871, -1871, -1871, -1871,
   -1871, -1871,  1272,  1925,  1932,  1944, -1871, -1871, -1871, -1871,
    1934,  1938, -1871, -1871, -1871, -1871, -1871, 29096, -1871, -1871,
    1948, -1871, -1871, -1871, -1871, 37302, 37434, -1871, -1871, 29183,
   -1871, -1871, 11576, 11576, 29270, 26616, 11576, 29357, 25624,  1949,
   -1871, 11576, 31402, -1871, -1871, 25912, -1871, -1871,  1941,  1953,
      37,    37, 31402,    37,  1960,    37,  1323, -1871,   190,  1418,
     510, -1871,   158, -1871,  1957, -1871,    59, -1871, -1871, -1871,
   31315, -1871, -1871, -1871, -1871, -1871, -1871, -1871,  1949, 11576,
   -1871, -1871, 29444, -1871, -1871,    80, -1871, -1871,  1322,  1965,
    1328, -1871,  1338,  1962,    37,    37,  1969,    37, -1871, -1871,
   -1871, -1871,   295,   446, 29914, -1871, -1871, -1871, 11576,   680,
    1971, -1871,  1977,  1980,    37, -1871,  1329,  1349, -1871,  1360,
     528, -1871, 26703, -1871, 31402, -1871, -1871, -1871,  1367,  1982,
    1983,  1986,    37, -1871, 29531, -1871,  1991,  1988, -1871, -1871,
   -1871,  1392, -1871, -1871, -1871,  1996, -1871
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1871,   533,    15,  9805, -1871,  2124, -1871, -1871, -1871, -1871,
   -1871, -1871,  1611,  1618, -1011, -1871, -1032,  -938,    48,    61,
    -980,  -876,  -859, -1871,  -754,  -729, -1871, -1871,  1619,  1620,
   -1871,  2968,  3954, -1871,  -287,   683,   685, -1871, -1871, -1871,
   -1871,  1624, -1871, -1871, -1871,  -668, -1870,   -71, -1871, -1871,
   -1871, -1871,  2106,  2487,  -107,   -67,   550,  -880, -1871,  -855,
   -1871,  -906, -1871,  1112,  -159,  1233,  -985,   -34,  1832,   -13,
    1833,    -7,     0, -1871,  1182, -1871, -1871, 10669,  1628, -1871,
    6317,  -451,  1301, -1871,  4548, -1871,  -235,   441,   461,  -102,
   -1871,   232,  -147,  -115,   -65,    50,   191,   -86,  6609,  3570,
     992,  6878,   164,  1417, -1871,  5408,  -199,   519,   542,  1544,
     350,   127,   210,   211,   248,   280,   153,  5534,  2784,  8536,
     304,  1757,  1813, 11024,   -77,  1127,  -132,  2707, 11129,  9342,
   -1871, -1871, -1871,   -96,   -63,   -41, -1871,  7942, -1871,  2431,
    3790,   619,  -594,  2963,  9910, -1871, 11779, -1871, -1871, -1871,
     -58,  3639, -1871, -1871,  1659,  4164,   -32, -1871, -1871,  1363,
    1679,  1389,  1816,   -90,   -84,  3298, 10293,  6441,  8819,  -459,
    -126,  -480,   100,  -909,   108,  3452, -1871, -1871, -1141, -1871,
     667,  1616,  -528, -1252,  8526,  1173,  -751,   133,   398,  1039,
    1693,  -177,  -735,  -506,  -555, -1871,  -561,  -971,  -948, -1707,
    1082,  1031,   -80,  1866,  -752,  -373,  -286,  -413,  -471, -1871,
    -120,   -56,  4999,   136,    17,  -879, -1871, -1871, -1871,  2051,
   -1871,   198,  2059,   -69,  2635,   -43,  1868,   935,   952, -1871,
   -1871, -1871,   -81,  1094, -1617,   -39, -1871, -1871, -1871,   107,
   -1871,  2060,   -55,    64,  2054,  1551, -1871, -1871, -1871,  2064,
    -850,   375, -1871,  -834,   787, -1871, -1871, -1871, -1871
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1317
static const yytype_int16 yytable[] =
{
      70,   989,   237,  1475,  1271,  1521,   545,  1275,   238,  1731,
     211,   309,   187,  1639,  1073,   437,  1198,   429,   294,  1577,
    1072,  1587,  1445,  1546,  1774,  1294,   188,   983,  1522,  1473,
     538,   303,  1301,   115,   117,  1305,   157,   993,  1446,   416,
     322,  1583,   113,   453,   122,   305,   528,   427,   189,   310,
    1295,  1975,   995,   428,  1474,  1913,   834,  1302,   132,   550,
    1306,   555,     1,   559,   782,   149,   642,  1924,   301,   437,
     158,  1579,   161,  1589,  1868,   311,   184,  1534,   118,   787,
     147,   430,   185,   245,   246,   113,   529,   299,   172,   186,
     132,  1120,   225,   300,   308,  1809,     1,   116,   132,   551,
      70,   556,  1169,   560,  1810,     1,   111,    70,    70,   123,
     536,   319,     1,  1578,  1584,  1588,   165,   577,   580,   119,
     404,     2,   563,   407,  1556,  -750,     1,  -750,  -881,  1600,
     130,     1,    57,   813,   731,   403,   640,   225,   120,   952,
     132,   132,  1925,   862,   322,   452,  2038,   954,   124,   158,
     504,   517,   157,   504,   113,   576,   579,   531,  1296,   533,
    -455,     1,   533,   517,   112,   546,   504,   517,   504,   814,
     504,  1292,  1320,   562,  1564,  1580,  2067,  1590,   320,   321,
       1,  1087,   324,  1603,  2143,     1,   158,  1543,   835,   193,
     975,  1494,  1581,  2185,  1591,   132,   792,   793,   794,   643,
    1544,   322,  1870,  -109,  1869,     2,  1020,  -622,   658,  -100,
     665,  1128,   788,   590,  1134,   309,  1140,   309,  1145,  -104,
     -82,   604,   196,   196,   187,   158,   -89,   597,   589,  1170,
       1,   866,   605,  2149,   187,   172,   609,   416,   188,  1925,
    2073,   322,   322,   537,   303,   660,   416,   132,   188,   438,
     702,   132,   416,   310,   710,   310,     1,  1557,   305,     1,
     189,  1495,  1601,  1587,  -216,  1720,   641,  -216,  1926,   732,
    1587,   822,   953,   434,  1587,   863,  1927,   721,   419,   322,
     788,   735,  2191,  1583,     1,     1,   322,   350,   651,     1,
    1583,  1297,  2190,   691,  1583,   572,  2057,   718,     1,   918,
     734,   720,     1,   438,   724,  1297,   300,   901,  1086,     2,
    2144,    70,   159,    70,  2140,  1589,  1604,   795,  2145,  2186,
     953,   976,  1589,  2140,  1595,   796,  1589,  2187,   797,  1753,
     987,   748,  1871,   788,  1020,  -617,  -109,   748,  1127,  1496,
    2191,  1133,  -100,  1139,  1311,  1144,     1,     1,   590,     1,
      29,   834,  -104,   -82,  1121,   453,  1584,  1588,  1790,   -89,
    1791,   719,   790,  1584,  1588,  2058,  2074,  1584,  1588,   322,
    2149,   457,     2,  1927,  2075,   661,    -8,     1,   155,   156,
    -216,   155,   156,  -216,  1120,   909,  -216,     1,   789,  -216,
    1377,   789,  1282,   322,     1,  1283,   943,   945,   947,   949,
     714,   193,     2,   738,   158,   868,  1646,   155,   156,   145,
     862,   727,   322,  1545,   778,  1642,   405,   569,   992,  1590,
    -874,   196,     1,   590,   238,   590,  1590,   989,  1815,     1,
    1590,  1647,  1809,   132,   196,  1298,  1591,   622,   889,   132,
     893,  1819,  1299,  1591,  1064,   322,   983,  1591,   322,     1,
     245,   246,   158,   322,   125,   868,   143,   916,   546,   625,
    1064,   920,   609,  1089,  -459,  -459,  -459,   931,   155,   156,
     932,   868,   920,   939,   868,  2153,   419,  1949,   789,   595,
     146, -1058, -1058,   885,  1108,   419, -1058,  2212,   154,   663,
     667,   419,  1094,  1752,  1098,  1074,     1,  1884,  1076,  1808,
    1723,   989,   504,   504,   158,     1,   983,   979,   225,  1100,
     458,   132,  1531,     1,  1006,   459,   155,   156,  1741,  1010,
       1,  1754,   782,   172,  1011,  1750,   569,   983,   504,   504,
     164,     1,  1095,    60,  1099,  1540,  1796,  1541,   435,   582,
    1026,   902,   886,   168,   155,   156,   158,  1030,  1109,   782,
     504,   504,  -874,  1596,   622,   504,   504,   782,   731,   504,
     504,   789,  1838,   132,   132,   132,   132,   132,   132,   624,
     132,  2016,  2048,   132,  1475,  2211,  2142,   782,  1120,   983,
    1321,  1323,  1325,  1534,   132,   132,   132,   628,     1,  1620,
     158,   627,   248,  -459,   868,   533,  -459,  1445,  1445,   504,
    1473,   504,   562,  2149,  1102,   590,   132,   727,   625,   158,
    1385,  1387,  1389,  1446,  1446,  1587,  1322,  1324,  1326,   132,
    1111,  1862,   182,  1831,  1126,  1807,  1832,  1132,  1811,  1138,
     150,  1143,   151,    60,   621,  1583,     1,  1820,  1157,   309,
      60,    60,   155,   156,  1863,   277,  1386,  1388,  1390,   162,
     416,   163,  1526,  1156,   838,   839,   840,   628,   187,   628,
    1851,     2,  2223,   710,   710,   710,   710,  1589,  1146, -1040,
    1065, -1040,   188,  1068,  1180,  1272,  1186,   310,  1066,  1846,
     169,  1849,   623,  1351,  1199,   322,   624,  1232,  1234,  2082,
     630,   622,   318,  1147,  1066,   323,  1032,  1032,  1032,  1032,
    1032,  1032,   691,   691,   691,   691,   824,   825,  1584,  1588,
    1629,  1417,  1148,    58,  1539, -1083,  1355,   196,   196,   629,
     158,  1226,  1335,  1337,   166,  1339,   167,   438,  1634,   132,
    -459,  -459,  -459,   625,   322,   609,   626,   965,   966,  1241,
     627,  1149,  1150,  1948,  1421,     1,   456,  1248,  1955,  1493,
    1399,  1401,  1403,  1405,  1253,  1263,   590,  1273,  1253,  1263,
     568,  -461,  -461,  -461,   249,  1241,   423,  1359,   868,   607,
    1024,  1590,  1824,     1,   663,   841,  1285,   663,  -459,  -459,
    -459,  1223,  1224,   842,  1829, -1083,   843, -1083,  1591,   629,
    1108,   629,  1308,  1587,  1637,  1425,  1315,  1825,  1638,   423,
     967,  -923,  -923,  -265,  -265,  -265,   453,   453,  2214,   714,
     714,   714,   714,  1583,  -460,  -460,  -460,   564, -1089,   896,
     826,   827,   631,   624,  2018,  1278,  1279,  1280,     1,  1230,
     987,  -924,  -924,     1,   182,   727,   565,  1628,  1375,   566,
    1214,  1218,  1380,  1631,   182,  1589,    60,     1,   906,  1632,
    -923,  -459,     1,     2,  1109,  1633,  1548,  1549,  1024,  -459,
    -216,   897,  -459,   429,     1,   627,   113,  1440,   158,  1443,
     747,   143,   868,   868,   868,  1700,  1701,  1702,  1514,  1515,
    -924,  1516,  1594,  1361,  1518,  1519,  1584,  1588,  1303,   419,
    -461,  1558,   114,  1530,   567,     1,  1438,  1439,   815,   428,
     663,   667,  1215,  1219,  1831,  1832,   453,  -459,   452,  1476,
     225,  1427,   585,     1,  1026,  1554,   158,  1030,   816,   817,
     245,   246,     1,     1,   172,  1486,   609,   430,  -265,  1199,
     663,    35,  -265,   609,   563,  1501,  1503,     1,  1505,   113,
     868,     1,  1453,  -460,   152,     1,  2037,     2,   153,  1590,
    1620,   594,     1,   747,   113,  1555,   130,  1352,  1602,  1605,
     696,  1569,    46,    47,   907,   717,  1591,  1314,   598,     1,
     908,  1942,    58,  2092,   155,   156,  -216,   132,    35,   158,
     437,  1480,  -216,   225,   789,  1418,   132,  1536,   607,     1,
     212,  1538,   424,  1608,   132,  1559,   132,  1542,  1622,  1969,
    1560,   213,   143,   425,  1116,   599,   158,   979,   452,    46,
      47,   782,   983,  1072,  1561,   546,   546,   155,   156,  1562,
     533,   989,   504,   533,  1029,  1363,   727,  1433,   546,  1565,
     158,  1567,   600,  1609,  1934,   155,   156,   632,  1867,    99,
     607,  1356,  1566,  1360,  1866,   155,   156,    58,  2072,  1459,
    1463,  2110,   983,  1429,    29,   983,  1759,   633,  1699,   132,
    1343,  1347,  1623,   155,   156,    35,  1835,   155,   156,  1422,
    2025,  1426,   635,  1027,   155,   156,     1,   852,   853,  1028,
     607,  1362,  -880,  1873,  -880,  -880,  1230,   637,  1409,  1413,
     533,   533,  1760,  1118,   504,   504,    46,    47,   504,   504,
     504,     2,   158,   638,  1119,   132,   132,   727,  1146,  1428,
     130,   155,   156,   639,  1364,   132,  1017,   132,   225,   590,
     532,   528,     1,   868,   710,   910,   158,   710,   198,   868,
     716,  1724,   158,  1147,  1625,   868,   605,   111,   158,    99,
     736,   868,  1430,   158,   942,   747,   312,    99,   453,   245,
     246,  -880,  1148,  -630,  2117,  -630,  2118,   158,  -629,   727,
    -629,   529,  -880,   691,   710,   212,   691,  1435,  1122,  -910,
     710,   710,   710,   710,  1479,  1180,   213,  1186,  1344,  1348,
    1028,  1149,  1150,   756,   583,  1681,   584,  -880,  1961,  1461,
    1465,   854,   855,   295,  2146,  1725,  2148,  -880,  1694,   757,
    1018,    58,   145,   691,  1315,    35,  1410,  1414,  2095,   691,
     691,   691,   691,   760,   438,   423,  1482,   145,  -880,  -880,
    -880,    35,  1028,   438,   568,  1066,  1837,   504,   504,   132,
     423,   132,   908,   587,  1151,   584,    46,    47,   434,   868,
    1146,   158,   761,    31,    32,  1088,   868,     1,    35,     1,
     452,   225,    46,    47,  1709,    41,  1552,   948,  1690,  1327,
    1329,   277,  2178,  2077,  2180,  1147,  2182,   845,   182,  1735,
     714,   941,  1240,   714,     2,   277,  1735,  1839,  1873,    46,
      47,  1331,  1333,  1028,  1148,   158,   762,   846,   847,  1391,
    1393,    56,   578,   581,   763, -1057, -1057,   764,  1240,  1649,
   -1057,  1240,  1655,  2041,  -909,  2206,  2207,   768,  2209,  2040,
     714,  1395,  1397,  1149,  1150,  1840,   714,   714,   714,   714,
    1939,  1028,   245,   246,  2017,  2218,   908,   959,   960,  1704,
     908,  1068,   830,   983,   983,   786,   143,  1328,  1330,  1696,
     198,  1181,  -921,  2231,  1620,  1214,  1218,  1214,  1218,   961,
     730,  2028,   312,   962,  2084,   963,  1762,   908,   789,   809,
     908,  1650,  1332,  1334,  1656,   245,   246,  1392,  1394,   696,
     696,   696,   696,   836,  1161,   143,   584,   844,   453,  -909,
    -909,  1307,   453,     1,  -909,   666,   831,   709,  2089,   621,
     964,  -909,  1396,  1398,   908,   143,   818,   819,  2109,  2157,
     875,  1697,   607,   881,   908,   908,   733,  1215,  1219,  1215,
    1219,   820,   821,     1,  1867,  -909,  -909,  -921,  -921,  1769,
    1866,  1781,  -921,  1770,  1930,  1770,   832,  -909,  1931,  -921,
     663,   833,   663,  2139,  -909,  -909,  -909,  2140,  1788,  1789,
    2155,  2141,  1792,   158,  2156,   453,   837,   868,   868,   858,
     607,  2200,  2183,  -921,  -921,  2140,  2140,  2202,  2219,   607,
    2184,  2140,  2140,     1,   453,  -921,   607,  2203,   789,   860,
    1203,  2140,  -921,   607,  -921,  2204,   158,  1867,  2220,   859,
    1476,  1567,  2140,  1866,   452,   901,  -890,  -890,  2193,  2221,
    1812,  -890,   132,  2140,   861,  1694,  2227,  2222,  -890,   132,
    2140,   927,   865,   435,  1821,   158,   132,  1793,     1,   873,
     782,   782,   782,   782,   782,   782,   782,   782,  1227,   874,
     151,  2235,  -890,  -890,   607,  2140,   539,   132,   887,  1828,
     552,   898,   132,     2,  -890,   132,    31,    32,   158,   929,
     607,    35,   130,   828,   829,   789,  2041,   452,    41,  1314,
     899,     1,  2040,   277,   504,   504,   848,   849,  2041,   868,
     868,   868,   868,  1374,  2040,     1,  1379,   506,     1,   951,
     506,   944,    46,    47,   950,  1574,   789,  1575,  1676,   850,
     851,    31,    32,   506,    56,   506,    35,   506,    58,  1572,
     958,  1573,  1230,    41,   968,   798,   799,   800,   801,   802,
     803,   804,   805,   806,   807,  2197,   856,   857,   504,   504,
    1951,   132,  1008,   710,   710,  1079,  1081,    46,    47,   132,
     789,  1855,  1917,  1858,  1015,   710,   453,  1016,   913,    56,
     609,   453,  1704,   604,  1856,  1068,  1859,  1209,  1211,   434,
    1510,  1512,  1511,  1513,   605,  1033,  1034,  1035,  1036,  1037,
    1038,  1867,   691,   691,  1210,  1212,  1537,  1866,   314,   317,
    1447,  1448,  1180,  2041,   691,  1180,  1078,  1080,  1180,  2040,
    1075,  1020,  1681,  1077,  1952,  1023,  1180,  1082,  1090,  1180,
    1091,  1083,  1084,  1123,  1160,   213,   249,  1129,  1135,   454,
     416,   416,  1141,   416,   416,  1159,  1167,  1162,   416,   416,
     416,   416,  1199,   546,  1166,  1187,   574,   453,  1885,   808,
    1168,   416,   416,   416,   416,   416,   416,   416,   416,   902,
    1031,  1185,  1188,  1196,  1197,  1200,  1466,  1066,   452,  1201,
     225,  1202,  1228,   452,  2020,   782,  2029,  1238,  2032,  1914,
    1250,  1291,  1303,  1467,  1468,  1469,  1064,  1470,  1484,  1471,
     453,  1285,   425,  1970,  1971,  1928,  1483,  1974,  1500,   714,
     714,  1508,  2043,  1509,  2045,  1527,  1547,  -742,  -745,  1677,
    1613,   714,  1708,  1614,   730,  1615,  2030,  1107,  2033,  1710,
    1635,    31,    32,  1616,  1636,  1617,    35,  1618,  1888,  1892,
    1640,  1440,  1641,    41,  1652,  1653,   709,   709,   709,   709,
    1904,  1668,  2044,  1669,  2046,  1670,  1672,  1685,  1691,   452,
      31,    32,  1686,   132,   132,    35,   132,    46,    47,  1687,
    1703,   458,    41,  1707,  1233,  1235,  1236,  1716,   158,    56,
     696,  1717,  1728,   696,  1733,  1730, -1035,   575, -1035,  1251,
    1732,  1743,  1181,   504,  1744,   504,    46,    47,   868,  1745,
    1889,  1893,  1748,  1756,  1751,  1755,   453,  1764,    56,  1757,
    1771,  1818,   710,  1650,  1777,  1780,  1656,  1785,  1822,   504,
     696,   504,   132,  1787,  1697,  1798,   696,   696,   696,   696,
    1800,  1802,    21,    22,  1804,  1836,  1843,  -748,  1874,  1875,
    1852,  1876,  1877,  1883,  1878,  1180,  1180,  1180,  1180,  1911,
    1915,   691,  1905,  1879,   435,  1180,  1180,  1906,  1180,  1929,
    1180,    31,    32,  1704,  1068,  1932,    35,   823,  1933,   506,
     506,  1935,  1180,    41,  2115,  2195,  1936,   621,  1938,  1983,
    1987,  1199,  1993,  1997,  1694,  1943,   416,  2001,  2005,  2009,
    2013,  1944,  1946,  1945,  1947,   506,   506,    46,    47,  1290,
     419,   419,   419,   419,   419,   419,   419,   419,   452,    56,
     590,  2196,  1958,  1194,  2116,  1959,  1968,   506,   506,  1962,
     592,  1963,   506,   506,  2015,  -231,   506,   506,     1,  2019,
    1066,  2022,  2023,  2026,  2031,  2027,  2034,    31,    32,  2070,
    2036,  2070,    35,  2056,  2071,  2076,   812,     1,  2083,    41,
    2085,   454,  2086,     2,  2087,    31,    32,  2088,   714,  2102,
      35,  2103,  2090,  2104,  2091,  2096,   506,    41,   506,  2097,
      21,    22,     2,    46,    47,   710,  2098,   710,  1881,   504,
     504,   504,   504,   504,   868,    56,   868,  2054,  2099,  2105,
     440,    46,    47,   504,   504,   504,   504,  2106,  2122,    31,
      32,    31,    32,    56,    35,  1180,    35,  2123,   442,  2147,
    2154,    41,   607,    41,   691,  2158,   691,  2138,  2188,  2189,
      31,    32,  2159,  2160,  2161,    35,  1199,  1694,  2162,  2164,
    2170,  2175,    41,  1107,  2176,    46,    47,    46,    47,   755,
    1481,  2181,  2192,  2205,  2201,   759,   710,    56,  1490,    56,
    2208,  1675,  2215,  1889,  1893,     1,    46,    47,  2216,  1504,
     170,  2217,  1850,  2228,  2229,   504,   504,  2230,    56,  2234,
    2233,  2210,  1180,  1180,    63,   999,  1180,  2236,  1180,   601,
       2,  1180,  1000,  1001,  1002,   691,  1570,  2070,  1005,  2070,
    1563,  1472,  1378,   722,   723,  1517,  1826,  1553,  1276,  1019,
    1694,   936,  1199,   758,   659,   928,  1199,  2177,   313,   302,
     304,   703,   316,   607,   306,     0,  2014,     0,   121,  1180,
       0,   714,     0,   714,     0,   419,     0,     0,    31,    32,
     890,     0,   894,    35,     0,     0,     0,     0,     0,    63,
      41,     0,  1199,  1694,     0,     0,   160,     0,  1180,     0,
    2134,     0,  2137,     0,  2070,  2070,     0,  2070,     0,  2070,
    1199,     0,     0,    63,    46,    47,    63,  -890,  -890,     0,
       0,     0,  -890,   278,    63,     0,    56,     0,  1059,  -890,
       0,    63,    63,     0,     0,     0,   891,     0,   895,  2199,
       0,     0,   714,     0,    63,     0,     0,   406,  2070,  2070,
       0,  2070,     0,  -890,  -890,     0,     0,   709,     0,     0,
     709,    63,     0,     0,     0,  -890,     0,     0,  2070,   446,
       0,  2174,     0,     0,   446,   278,   789,   446,  1612,     0,
       0,     0,     0,     0,     0,     0,  2070,   278,     0,    63,
     446,   278,   446,     0,   446,     0,     0,   709,     0,     1,
       0,     0,     0,   709,   709,   709,   709,  1191,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,   696,
     696,     0,   278,   278,     2,    41,  1705,     0,  1706,  1181,
       0,  1181,   696,   130,     0,   696,     0,   446,     0,     0,
       0,     0,     0,   696,     0,     0,  1181,     0,     0,    46,
      47,   596,     0,     0,     0,     0,     0,     0,     0,     0,
      63,    56,  1112,     0,     0,     0,   903,     0,  1336,  1338,
       0,  1340,    31,    32,   506,   506,     0,    35,     0,     0,
       0,   607,     0,     0,    41,     0,     0,     0,     0,     0,
    -972,     0,     0,     0,     0,     0,  1400,  1402,  1404,  1406,
      21,    22,     0,     0,     0,     0,  1249,     0,    46,    47,
       0,     0,   278,     0,     0,   278,   278,   687,  1113,  1715,
      56,    57,  1719,  1310,    58,    63,  1164,     0,     0,    31,
      32,    81,     0,   978,    35,    63,   278,    63,  1059,   506,
       0,    41,     0,     0,     0,  1059,     0,     0,  1059,     0,
       0,     0,   454,   454,     0,   278,  1342,  1346,  1350,  1354,
    1358,   278,     0,  1367,     0,    46,    47,    21,    22,  1310,
       0,     0,   446,     0,     0,     0,     0,    56,    57,     0,
       0,     0,  1165,     0,  1408,  1412,  1416,  1420,  1424,     0,
       0,  1367,     0,     1,     0,     0,    31,    32,     0,     0,
       0,    35,     0,  1449,     0,     0,     0,     0,    41,  1454,
       0,   506,   506,  1367,  1367,   506,   506,   506,     2,     0,
     191,     0,     0,     0,     0,     0,     0,   130,     0,    63,
       0,    81,    46,    47,     0,     0,     0,     0,    81,    81,
       0,     0,     0,     0,    56,    57,     0,   446,     0,   446,
       0,     0,   454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1181,  1181,  1181,  1181,   431,   432,  1181,     0,
       0,    35,   696,   696,     0,  1181,     0,  1181,    41,    63,
       0,   446,    63,     0,     0,   278,    63,     0,     0,  1181,
       0,   930,     0,     0,     0,    63,   278,     0,    63,     0,
       0,     0,    46,    47,     0,     0,     0,     0,   970,   973,
       0,     0,     0,     0,    56,    57,     0,     0,   604,     0,
       0,     0,     0,     0,     0,     0,   446,   446,     0,   605,
       0,    63,    63,     0,   970,   973,     0,     0,   446,     0,
       0,     0,     0,  1009,   506,   506,     0,     0,   278,     0,
    1612,     0,   446,   446,     0,     0,   970,   973,    31,    32,
       0,   970,   973,    35,     0,   970,   973,   613,     0,     0,
      41,    63,     0,     0,   446,   446,     0,  1860,     0,   446,
     446,     0,     0,   446,   446,     0,     0,     0,     0,     0,
       0,     0,     0,   687,    46,    47,     0,     0,     0,     0,
     278,     0,     0,   278,    31,    32,    56,    72,     0,    35,
    1059,  1059,  1059,     0,  1568,     0,    41,     0,    63,     0,
       0,     0,  1181,   446,     0,   446,     0,     0,    63,   446,
       0,  1181,   191,  1181,     0,  1524,     0,     0,     0,     0,
      46,    47,   191,     0,    81,     0,   709,   709,    63,     0,
       0,    63,    56,    63,     0,    63,     0,   904,   709,     0,
       0,     0,    63,     0,   431,   432,     0,     0,     0,    35,
       0,     0,     0,     0,  1550,     0,    41,  -459,     0,   774,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,  1181,
    1181,  1525,     0,  1181,   454,  1181,    72,     0,  1181,     1,
      46,    47,  1181,  1880,     0,     0,  1673,    72,     0,     0,
       0,     0,    56,    57,    72,    72,  1251,     0,     0,  1059,
       0,     0,     0,     0,     2,     0,   687,   687,   687,   687,
    1551,     0,     0,   130,     0,     0,  1181,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   278,   278,   278,     0,   519,    63,
       0,     0,     0,   446,     0,  1181,     0,     0,     0,     0,
     519,   278,    31,    32,   519,     0,  1626,    35,   278,   278,
     446,     0,   278,   278,    41,     0,   613,     0,     0,   446,
       0,     0,    63,     0,     0,     0,  -459,  -459,     0,     0,
      63,     0,     0,   687,     0,     0,  -459,     0,    46,    47,
     687,     0,     0,   687,     0,  -459,  -459,  -459,  -459,  -459,
      56,    57,     0,     0,    58,  1523,   664,   668,  1666,     0,
       0,     0,  1627,     0,     0,     0,     0,     0,   613,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
       0,     0,     0,  1059,  1059,     0,     0,     0,     0,     0,
    1059,  1059,     0,    82,  1059,  1059,     0,     0,     0,     0,
       0,   506,   506,     0,     0,     0,     0,     0,   613,     0,
       0,     0,     0,     0,  1667,     0,     0,     0,     0,   971,
     974,     0,     0,    63,     0,   709,    63,    63,    63,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    72,  1726,
       0,     0,     0,     0,     0,   971,   974,     0,    72,     0,
      72,  2035,     0,     0,   454,   506,   506,     0,   454,     0,
       0,  1746,   446,   446,    63,     0,     0,   971,   974,     0,
       0,    63,   971,   974,     0,     0,   971,   974,     0,   278,
      63,     0,    82,     0,     0,     0,     0,    63,  -459,  -459,
     278,     0,   446,    82,    63,  1727,     0,     0,  -459,     0,
      82,    82,     0,  -459,  -459,  -459,     0,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,  1747,     0,     0,
       0,   454,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    63,     0,     0,
     454,     0,     0,     0,   522,    63,     0,     0,   487,     0,
       0,   487,     0,     0,     0,     0,   522,     0,     0,     0,
     522,    63,   446,     0,   487,     0,   487,     0,   487,    63,
      63,     0,     0,     0,     0,     0,   446,     0,     0,     0,
       0,     0,    63,     0,     0,     0,     0,     0,   709,     0,
     709,     0,     0,     0,     0,     0,   191,     0,   519,     0,
    1244,     0,     0,     0,     0,   687,   278,   687,     0,   519,
       0,     0,     0,   278,     0,  1059,     0,   774,     0,     0,
       0,     0,     0,     0,     0,     0,  1244,     0,     0,  1244,
     970,   973,     0,     0,   970,   973,     0,  1288,     0,     0,
       0,   664,     0,     0,   664,     0,     0,     0,   446,   446,
       0,     0,   446,   446,   446,     0,     0,     0,     0,   709,
       0,   519,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    63,   446,     0,     0,     0,    63,     0,     0,
       0,     0,     0,    63,     0,     0,     0,     0,     0,    63,
     506,     0,   506,     0,    82,    63,     0,     0,     0,     1,
       0,     0,   454,     0,    82,     0,    82,   454,     0,     0,
       0,     0,     0,     0,   687,     0,   506,   687,   506,     0,
     687,     0,     0,  1833,     2,     0,     0,     0,     0,     0,
     613,     0,     0,   130,     0,  1059,  1059,     1,     0,  1841,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   687,     0,     0,
       0,     0,     2,   687,   687,   687,   687,   664,   668,  1216,
    1220,   130,    31,    32,     0,     0,     0,    35,   613,  1834,
       0,   446,   446,   454,    41,     0,   278,   613,   278,  1071,
       0,     0,     0,    63,   613,  1842,     0,   664,     0,   774,
      63,   613,     0,   278,   446,    63,     0,     0,    46,    47,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
      56,    57,    41,   278,    58,     0,   454,     0,  1976,     0,
     278,     0,     0,  1979,  1981,  1985,  1989,  1991,  1995,     0,
       0,     0,  1999,  2003,  2007,  2011,    46,    47,   278,   687,
       0,     0,   613,     0,   522,   278,   687,     0,    56,   278,
     687,     0,    58,     0,     0,   522,     0,     0,   613,   436,
       0,     0,    72,     0,     0,     0,   506,   506,   506,   506,
     506,     0,    94,     0,     0,     0,     0,     0,     0,     0,
     506,   506,   506,   506,     0,     0,     0,     0,     0,     0,
     487,   487,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1003,  1059,  1059,     0,     0,   522,     0,  1953,
       0,  1956,     0,   436,     0,     0,   487,   487,     0,     0,
       0,     0,   454,     0,     0,  1964,  1966,     0,     0,     0,
     140,     0,     0,     0,     0,     0,     0,     0,   487,   487,
       0,     0,     0,   487,   487,     0,     0,   487,   487,     0,
       0,     0,   506,   506,   615,     0,     0,     0,     0,     0,
     173,   194,   210,     0,     0,  1954,     0,  1957,     0,     0,
     251,     0,    94,     0,     0,     0,     0,     0,     0,    94,
      94,  1965,  1967,   431,   432,     0,     0,   487,    35,   487,
       0,    63,    63,     0,     0,    41,     0,     0,     0,  1313,
       0,   971,   974,     0,     0,   971,   974,     0,     0,     0,
       0,     0,   210,   439,   441,   443,   444,     0,     0,    46,
      47,     0,   510,     0,   446,   510,     0,     0,   446,   725,
       0,    56,    57,     0,     0,   910,     0,     0,   510,     0,
     510,     0,   510,     0,     0,  1313,   605,     0,     0,     0,
       0,     0,   519,     0,     0,     0,     0,     0,     0,    88,
       0,     0,     0,   519,     0,     0,     0,   573,   441,   443,
     687,     0,     0,    63,     0,     0,     0,     0,     0,  1450,
     970,   973,  1452,     0,     0,  1455,     0,  1457,     0,     0,
       0,   446,     0,     0,     0,     0,     0,  1713,   446,   446,
       0,     0,     0,    63,    63,    63,    63,   602,   617,   382,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   970,   973,  2093,     0,     0,     0,
       0,     0,     0,     0,     0,  2100,     0,     0,    88,     0,
       0,   900,   446,   446,     0,     0,     0,   905,     0,    88,
     657,     0,     0,     0,     0,     0,    88,    88,     0,     0,
       0,     0,     0,   194,    63,     0,     0,     0,     0,     0,
       0,     0,     0,   728,     0,    94,     0,     0,     0,     0,
     278,   687,  2094,     0,     0,     0,   687,   687,     0,     0,
       0,  2101,     0,  2111,  2113,     0,  1021,     0,  -645,   687,
     523,     0,   687,     0,     0,     0,     0,     0,  1651,     0,
     687,  1657,   523,     0,     0,   982,   523,     0,     0,     0,
       0,     0,     0,  -645,     0,     0,     0,     1,     0,     0,
       0,     0,  -645,  -645,  -645,  -645,  -645,    63,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1698,  2112,
    2114,     0,     2,     0,  1216,  1220,  1216,  1220,     0,     0,
       0,   130,   446,  1071,    63,     0,     0,   446,     0,     0,
       0,  -645,  -645,   693,     0,     0,  -645,   664,  1062,   664,
       0,  1067,     0,  -645,     0,    63,     0,     0,     0,     0,
       0,     0,     0,     0,  1062,   439,   441,   443,   522,     0,
     431,   432,     0,     0,     0,    35,     0,  -645,  -645,   522,
       0,     0,    41,     0,   615,     0,     0,   911,     0,  -645,
    -645,     0,     0,  -645,   510,     0,  1022,   615,  1020,  -645,
       0,   785,     0,     0,     0,   140,    46,    47,     0,     0,
       0,     0,     0,   446,     0,     0,     0,     0,    56,    57,
      88,   521,    58,     0,     0,     0,     0,     0,   278,   687,
      88,     0,    88,   521,   510,   510,     0,   521,     0,   985,
     613,     0,     0,   996,     0,     0,   510,   446,     0,   446,
       0,     0,    63,     0,     0,   173,     0,     0,     0,     0,
     510,   510,     0,     0,     0,     0,     0,     0,     0,     0,
     487,  1452,     0,   446,     0,   446,     0,     0,     0,   911,
       0,     0,   510,   510,     0,     0,     0,   510,   510,     0,
       0,   510,   510,     0,     0,   210,   210,   210,   210,   210,
     210,     0,     0,     0,     0,     0,     0,   725,     0,   687,
     687,     0,     0,   725,     0,     0,   210,   210,     0,     0,
       0,   971,   974,     0,     0,     0,     0,     0,     0,     0,
       0,   510,     1,   510,     0,     0,  1105,     0,  1114,     0,
       0,   613,   487,   487,     0,     0,   487,   487,   487,     0,
       0,     0,     0,   443,     0,     0,     0,     2,   655,     0,
       0,     0,   446,     0,   446,     0,   204,   205,   206,   207,
     208,     0,     0,     0,     0,   971,   974,     0,     0,     0,
     924,     0,     0,     0,   488,     0,     0,   488,     0,     0,
       0,   924,     0,     0,     0,     0,     0,     0,     0,     0,
     488,   752,   488,     0,   488,    31,    32,   752,     0,     0,
      35,     0,     0,     0,     0,   970,   973,    41,   970,   973,
       0,     0,     0,     0,     0,  1070,     0,     0,     0,   970,
     973,   970,   973,   446,   446,   446,   446,   446,    63,     0,
      63,    46,    47,   924,     0,     0,     0,   446,   446,   446,
     446,     0,     0,    56,    57,     0,     0,    58,     0,     0,
       0,  1231,   774,     0,     0,     0,     0,   728,     0,     0,
       0,     0,     0,     0,     0,   487,   487,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1259,  1155,     0,     0,
    1259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   970,   973,     0,   725,     0,     0,     0,   911,     0,
       0,  1497,     0,     0,     0,     0,     0,     0,     0,   446,
     446,     0,     0,     0,   693,     0,     0,     0,     0,     0,
       0,   923,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   923,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   693,   693,   693,   693,     0,     0,     0,   613,
       0,     0,     0,     0,  1533,     0,     0,  1890,  1894,   615,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     668,   236,     0,   668,     0,   982,     0,     0,     0,   455,
       0,   668,     0,     0,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   547,
    1277,     0,     0,     0,  1281,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   982,     0,     0,
       0,     0,  1477,     0,     0,   785,     0,     0,     0,   911,
       0,     0,     0,     0,    88,     0,   173,   911,  1491,  1319,
       0,     0,     0,  1071,     0,  1498,     0,     0,   911,     0,
    1506,   774,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   436,     0,  1373,     0,     0,     0,
       0,   785,     0,   615,  1384,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1452,   140,
       0,     0,     0,     0,  1437,     0,     0,     0,  1535,     0,
       0,     0,     0,   617,     0,  1319,     0,     0,  1451,   140,
       0,  1384,     0,  1456,     0,     0,   488,   488,     0,   985,
       0,     0,     0,     0,     0,     0,     0,     0,  1004,     0,
       0,     0,     0,     0,   510,     0,     0,     0,     0,     0,
       0,     0,   488,   488,   441,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   488,   488,     0,     0,     0,   488,
     488,   985,     0,   488,   488,     0,   971,   974,     0,   971,
     974,     0,   487,   487,     0,     0,     0,   725,     0,   725,
     971,   974,   971,   974,     0,     0,     0,     0,     0,     0,
     668,   668,  1071,     0,  1257,  1267,   510,   510,  1257,  1267,
     510,   510,   510,   488,  1977,   488,     0,  1610,   439,  1452,
       0,     0,  1457,     0,   924,     0,     0,     0,   443,   869,
       0,     0,     0,     0,     0,   924,   487,   487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   971,   974,     0,     0,     0,  1844,     0,  -634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   917,   547,     0,     0,     0,   926,     0,     0,     0,
       0,     0,     0,     0,  -634,   933,     0,  1071,   940,  1070,
       0,     0,     0,  -634,  -634,  -634,  -634,  -634,  1071,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   367,     0,     0,
       0,     0,   991,   415,     0,     0,     0,     0,  1007,   510,
     510,     0,  -634,  -634,     0,     0,     0,  -634,     0,     0,
       0,     0,     0,   415,  -634,     0,     0,     0,   911,     0,
       0,   911,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1489,     0,     0,  -634,  -634,
       0,  1259,     0,     0,     0,     0,  1489,     0,  1259,     0,
    -634,  -634,     0,   693,  -634,     0,   693,  1845,     0,  1020,
    -634,     0,     0,     0,     0,   693,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   236,  1071,
       0,   415,     0,     0,     0,     0,  1692,  1693,   236,     0,
       0,     0,     0,   693,     0,     0,     0,  1451,     0,   693,
     693,   693,   693,     0,     0,     0,     0,     0,   236,     0,
     725,   236,     0,   236,     0,   236,     0,  1817,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   487,     0,   487,     0,     0,     0,     0,     0,     0,
       0,     0,  1071,     0,     0,  1497,     0,   615,     0,     0,
    1830,     0,     0,  1067,     0,     0,     0,   487,     0,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   655,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1766,     0,
       0,   415,     0,     0,     0,   740,   743,   745,     0,     0,
     415,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,  1071,   766,     0,     0,     0,     0,     0,     0,   367,
       0,     0,     0,  1071,     0,     0,     0,     0,     0,   900,
       0,     0,     0,     0,     0,     0,   415,   615,     0,     0,
       0,   415,     0,     0,     0,     0,     0,     0,   615,  1805,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1814,     0,     0,     0,     0,     0,
       0,   439,     0,     0,     0,     0,     0,     0,   210,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   415,     0,   415,     0,     0,   488,     0,  1071,  1827,
       0,   617,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1071,   487,   487,   487,
     487,   487,     0,     0,     0,   415,   510,   510,  1071,     0,
       0,   487,   487,   487,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   869,   869,   869,   655,
       0,     0,     0,     0,     0,     0,     0,     0,   488,   488,
       0,     0,   488,   488,   488,     0,     0,     0,     0,  1739,
     510,   510,     0,   439,     0,     0,  1739,     0,     0,     0,
       0,     0,   455,   455,   236,     0,     0,     0,     0,     0,
       0,     0,   617,   487,   487,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   725,   725,     0,  2021,     0,     0,   415,     0,     0,
       0,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,  1070,     0,
       0,     0,     0,     0,     0,     0,     0,  1529,     2,     0,
       0,     0,     0,   415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1070,
    1062,     0,   455,     0,  1940,     0,     0,     0,     0,   547,
     547,   488,   488,     0,     0,   367,     0,     0,   330,     0,
       0,     0,   547,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,     0,     0,
       0,     0,     0,     0,  1451,     0,     0,   415,     0,     0,
     336,     0,   693,   693,   337,   338,   339,   340,   341,   342,
     343,   344,   693,     0,   693,   693,     0,     0,   693,     0,
     345,   346,     0,     0,     0,   347,   693,     0,   348,   693,
     349,     0,     0,  2107,  2108,  1069,     0,     0,   350,   351,
       0,   352,   353,   354,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   236,     0,   415,     0,     0,   236,     0,     0,
       0,     0,     0,  1630,     0,   510,     0,   510,     0,  1630,
     911,     0,     0,     0,     0,   236,     0,     0,   367,     0,
       0,     0,   367,  1070,     0,     0,     0,     0,     0,     0,
       0,   510,     0,   510,     0,  1972,     0,   415,  1070,     0,
       0,     0,     0,   443,   415,     0,     0,   415,     0,     0,
    1766,     0,     0,     0,     0,  1451,     0,     0,  1456,     0,
       0,     0,     0,     0,     0,     0,     0,   367,     0,     0,
       0,     0,     0,   415,   415,   415,   415,   415,   415,   415,
       0,     0,   415,   415,     0,   415,   415,   415,   415,   415,
     415,   415,   415,     0,   367,     0,     0,     0,     0,     0,
       0,     0,   367,   415,   415,   415,   415,   415,   415,   415,
     415,   415,   415,   415,   415,   415,   415,   415,   415,   415,
     415,     0,   367,     0,   455,   236,     0,     0,     0,     0,
       0,     0,     0,  1070,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   325,  1070,     1,   326,   113,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   415,   415,     0,     0,
       2,     0,     0,     0,     0,   693,   693,   693,   693,     0,
       0,   693,     0,     0,     0,   693,   693,     0,   693,     0,
     693,   510,   510,   510,   510,   510,     0,     0,     0,     0,
       0,     0,   693,     0,     0,   510,   510,   510,   510,     0,
     330,     0,  2078,  2079,     0,   331,   332,     0,   488,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
       0,     0,     0,     0,   415,     0,   415,   385,     0,     0,
       0,     0,   336,   418,     0,     0,   337,   338,   339,   340,
     341,   342,   343,     0,     0,  1070,     0,     0,     0,     0,
       0,     0,   345,   418,     0,     0,   415,     0,     0,     0,
     742,     0,   488,   488,     0,   415,     0,   510,   510,     0,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
       0,   415,     0,     0,     0,     0,     0,     0,  1070,     0,
       0,   869,   869,     0,     0,     0,     0,     0,     0,     0,
       0,   418,     0,     0,     0,   693,     0,     0,     0,     0,
       0,     0,     0,     0,   693,     0,   693,     0,     0,     0,
       0,     0,     0,     0,   455,     0,     0,     0,   455,     0,
       0,     0,     0,   397,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   415,     0,     0,
       0,     0,     0,  1182,     0,     0,     0,  1070,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1070,
       0,     0,   693,   693,     0,     0,   693,     0,   693,     0,
       0,   693,     0,  1213,  1217,   693,     0,     0,   415,     0,
       0,   455,  2179,     0,     0,     0,     0,     0,     0,   415,
       0,     0,     0,   455,  1848,   455,  1848,     0,     0,     0,
    1070,   418,     0,     0,     0,   741,   744,   746,     0,   693,
     418,     0,     0,     0,   367,   367,   418,   591,     0,     0,
       0,     0,   767,     0,     0,     0,     0,     0,     0,   385,
       0,     0,     0,     0,  1070,     0,     0,     0,   693,     0,
       0,     0,     0,     0,     0,     0,   418,     0,     0,     0,
       0,   418,  1070,     0,  2226,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1070,     0,     0,   488,   415,   488,
     415,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   415,   488,     0,   488,     0,     0,     2,     0,
       0,   418,     0,   418,     0,     0,     0,   130,     0,   415,
       0,     0,     0,   415,     0,     0,   367,     0,     0,     0,
     415,     0,     0,     0,   415,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   418,     0,   547,   330,     0,
       0,     0,     0,   331,   332,   333,    31,    32,     0,     0,
       0,    35,     0,     0,     0,   397,   334,   335,    41,     0,
       0,     0,   455,     0,   236,     0,     0,   455,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,     0,     0,     0,     0,     0,     0,
     345,   346,     0,     0,    56,   937,     0,     0,   938,   769,
     349,     0,     0,     0,     0,     0,     0,     0,   350,   351,
       0,   352,   353,   354,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   591,     0,   591,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   455,     0,     0,     0,   418,     0,     0,
       0,     0,     0,   488,   488,   488,   488,   488,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   488,   488,   488,
     488,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   418,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
       0,     0,   415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   385,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   488,
     488,     0,     0,     0,   415,     0,     0,   418,     0,     0,
       0,     0,     0,     0,   415,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,     0,     0,     0,
     415,     0,     0,  1058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   415,     0,   367,     0,     0,     0,
       0,   415,   455,   415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   591,
     415,     0,     0,     0,   418,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1648,     0,     0,  1654,     0,     0,   385,     0,
       0,   397,   385,     0,  1671,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   418,     0,     0,
       0,     0,     0,     0,   418,   415,     0,   418,   455,     0,
     455,     0,  1695,   591,     0,     0,     0,     0,  1213,  1217,
    1213,  1217,     0,     0,     0,     0,     0,   385,     0,     0,
       0,     0,     0,   418,   418,   418,   418,   418,   418,   418,
       0,     0,   418,   418,     0,   418,   418,   418,   418,   418,
     418,   418,   418,     0,   385,     0,     0,     0,     0,     0,
       0,     0,   385,   418,   418,   418,   418,   418,   418,   418,
     418,   418,   418,   418,   418,   418,   418,   418,   418,   418,
     418,     0,   385,     0,     0,     0,   415,     0,     0,     0,
     415,   415,   415,     0,     0,     0,     0,     0,     0,     0,
       0,   367,     0,     0,   397,     0,   415,   415,   397,     0,
       0,     0,   325,   367,     1,   326,   113,   327,     0,   328,
     329,     0,     0,  1058,     0,     0,   418,   418,     0,     0,
    1058,     0,     0,  1058,   415,   415,     0,   415,   415,     2,
       0,     0,   415,   415,   415,   415,     0,     0,     0,     0,
       0,     0,     0,   397,     0,   415,   415,   415,   415,   415,
     415,   415,   415,     0,     0,     0,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     397,     0,     0,   415,   331,   332,   333,     0,   397,     0,
       0,     0,     0,     0,   418,     0,   418,   334,   335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   397,     0,
     415,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,   418,     0,     0,     0,
       0,   345,   346,     0,     0,   418,   347,     0,     0,   348,
     882,   349,     0,     0,  1778,     0,     0,     0,  1779,   350,
     351,    92,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   418,
       0,   418,     0,     0,     0,     0,     0,   505,     0,     0,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     367,   367,     0,   505,     0,   505,     0,   505,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
       0,     0,     0,     0,     0,     0,   415,   415,     0,     0,
    1058,     0,   591,     0,     0,     0,   415,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   418,     0,     0,
      92,    92,     0,     0,     0,     0,     0,     0,     0,    92,
       0,    92,     0,     0,     0,     0,     0,     0,    92,    92,
       0,   591,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   418,     0,
     415,     0,     0,     0,   415,   415,     0,     0,     0,   418,
       0,    92,    92,     0,     0,  1058,     0,  1058,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   385,   385,     0,     0,     0,     0,
     692,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1887,  1891,   591,     0,     0,     0,     0,   418,     0,
     418,  1900,     0,  1903,  1648,     0,     0,  1654,     0,     0,
       0,     0,     0,     0,     0,  1695,     0,     0,  1916,     0,
       0,     0,   418,     0,     0,     0,     0,     0,    92,     0,
     367,     0,    92,     0,  1058,     0,     0,     0,     0,   418,
       0,     0,     0,   418,     0,   591,   385,     0,   367,     0,
     418,     0,     0,     0,   418,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
     397,   397,     0,     0,   417,     0,     0,     0,     0,     0,
       0,     0,    92,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,     0,    92,     0,     0,     0,     0,     0,
       0,     0,   367,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
     505,     0,   417,     0,     0,     0,     0,     0,     0,  1058,
       0,     0,   397,     0,     0,     0,  1058,     0,     0,     0,
    1058,     0,     0,     0,     0,   505,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   505,   505,     0,
       0,     0,   505,   505,    92,     0,   505,   505,     0,     0,
       0,     0,     0,     0,     0,     0,  1056,     0,   418,     0,
       0,     0,   418,     0,  2049,  2050,  2051,  2052,     0,     0,
    2053,     0,     0,     0,  1887,  1891,     0,  1900,     0,  1903,
       0,     0,     0,     0,    92,     0,   505,     0,   505,     0,
       0,  2062,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   737,     0,   418,     0,     0,     0,     0,     0,
       0,   417,     0,     0,   418,     0,     0,   417,     0,     0,
       0,     0,     0,     0,     0,   418,     0,     0,     0,     0,
     418,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   418,     0,   385,     0,     0,     0,
       0,   418,     0,   418,     0,     0,     0,     0,     0,     0,
       0,   692,     0,     0,     0,     0,     0,     0,     0,     0,
     418,     0,   410,     0,    92,    92,    92,    92,    92,    92,
       0,    92,     0,     0,    92,     0,     0,     0,     0,   692,
     692,   692,   692,     0,     0,    92,    92,    92,     0,     0,
       0,     0,   417,     0,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    92,     0,     0,     0,     0,
       0,     0,     0,     0,  2053,   418,     0,     0,     0,     0,
    1058,     0,     0,  2133,     0,  2136,     0,     0,     0,     0,
     591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   591,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1056,     0,     0,     0,
       0,     0,   397,  1056,     0,     0,  1056,  1058,     0,  1058,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2166,  2167,     0,     0,  2133,  1058,  2136,     0,     0,
    2171,     0,     0,     0,  2173,     0,   418,     0,     0,     0,
     418,   418,   418,     0,     0,     0,     0,     0,     0,     0,
       0,   385,     0,     0,     0,     0,   418,   418,     0,     0,
       0,     0,     0,   385,     0,     0,     0,     0,  2173,     0,
      92,     0,     0,     0,     0,     0,    92,     0,  1057,     0,
       0,  1058,     0,     0,   418,   418,     0,   418,   418,     0,
       0,     0,   418,   418,   418,   418,     0,  2213,     0,     0,
       0,     0,     0,     0,     0,   418,   418,   418,   418,   418,
     418,   418,   418,     0,   417,     0,     0,   418,     0,     0,
       0,     0,     0,     0,     0,     0,   770,     0,     0,     0,
       0,     0,     0,   418,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     418,     0,     0,     0,     0,     0,   591,     0,   591,     0,
       0,     0,     0,     0,   505,   505,     0,   397,   417,     0,
       0,     0,   591,   591,     0,     0,     0,     0,   879,   397,
       0,     0,   884,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
     385,   385,     0,     0,     0,  1237,     0,     0,     0,     0,
       0,   770,     0,     0,     0,     0,     0,     0,     0,  1058,
       0,     0,     0,     0,     0,     0,   418,   418,  1056,     0,
    1056,     0,     0,     0,     0,     0,   418,     0,     0,    92,
       0,     0,     0,     0,     0,     0,     0,     0,  1057,     0,
       0,     0,     0,     0,     0,  1057,     0,     0,  1057,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   505,   505,     0,     0,   505,   505,   505,    92,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     418,     0,     0,     0,   418,   418,     0,     0,    92,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   397,   397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1056,     0,     0,
     692,     0,     0,   692,     0,     0,     0,     0,     0,     0,
       0,     0,   692,   591,     0,     0,     0,     0,     0,     0,
       0,     0,   591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1158,     0,     0,
     692,     0,     0,     0,     0,     0,   692,   692,   692,   692,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   505,   505,    92,    92,     0,     0,
     385,     0,     0,     0,     0,     0,     0,  1192,     0,     0,
     591,   591,     0,     0,     0,     0,     0,     0,   385,     0,
       0,     0,   879,   884,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1057,     0,   417,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1056,     0,     0,     0,     0,   770,     0,  1056,
     770,     0,   385,  1056,     0,     0,   417,     0,     0,     0,
       0,     0,     0,     0,  1270,     0,     0,     0,     0,     0,
       0,     0,     0,   770,     0,     0,     0,     0,   879,   884,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1057,     0,  1057,     0,     0,     0,     0,     0,     0,     0,
      92,     0,    92,     0,     0,  1316,   397,     0,     0,     0,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,   397,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,  1368,     0,     0,     0,     0,     0,     0,
       0,  1381,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1432,     0,     0,     0,     0,     0,   330,   397,     0,
       0,     0,   331,   332,   333,     0,     0,   879,   884,     0,
       0,     0,   879,  1458,  1462,   334,   335,     0,     0,  1057,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   336,
     417,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     0,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,   882,   349,
       0,     0,   883,     0,     0,     0,   770,   350,   351,  1773,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1056,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   505,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   417,     0,     0,     0,     0,     0,     0,
    1056,     0,  1056,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1057,     0,     0,     0,     0,     0,
       0,  1057,     0,     0,     0,  1057,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   505,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    80,     0,     0,     0,     0,    92,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1056,     0,     0,     0,     0,   692,
     692,     0,     0,     0,     0,     0,     0,     0,     0,   692,
       0,   692,   692,     0,     0,   692,     0,     0,     0,     0,
       0,     0,     0,   692,     0,     0,   692,     0,     0,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   190,     0,     0,     0,     0,   879,     0,     0,     0,
       0,   284,    80,     0,     0,  1658,  1660,     0,  1663,    80,
      80,     0,    92,     0,     0,     0,  1192,     0,     0,     0,
       0,     0,     0,  1682,     0,     0,     0,     0,     0,   421,
     879,   884,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   520,     0,     0,     0,   520,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1057,     0,     0,     0,     0,
     284,   284,  1056,     0,     0,   417,     0,     0,   879,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     505,   417,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   612,     0,
       0,     0,  1057,     0,  1057,     0,   505,     0,   505,     0,
       0,     0,     0,     0,   879,   884,     0,     0,     0,     0,
       0,  1057,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   692,   692,   692,   692,     0,     0,   692,     0,
       0,     0,   692,   692,     0,   692,     0,   692,     0,     0,
     654,     0,     0,   284,   284,   284,     0,     0,     0,   692,
       0,     0,     0,   190,     0,     0,   879,     0,   884,     0,
       0,     0,     0,   190,   284,    80,  1057,     0,     0,   879,
     884,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   751,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     773,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,   884,    92,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   879,     0,   884,     0,
     879,   417,   884,   417,     0,     0,   505,   505,   505,   505,
     505,     0,     0,     0,     0,     0,     0,   417,   417,     0,
     505,   505,   505,   505,     0,     0,     0,     0,     0,     0,
       0,     0,   692,     0,     0,     0,     0,     0,     0,     0,
       0,   692,     0,   692,     0,  1982,  1986,     0,  1992,  1996,
       0,     0,     0,  2000,  2004,  2008,  2012,   612,     0,     0,
       0,     0,     0,   922,     0,     0,  1982,  1986,  1992,  1996,
    2000,  2004,  2008,  2012,   922,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   505,   505,  1057,     0,     0,     0,     0,   692,
     692,     0,     0,   692,     0,   692,     0,     0,   692,   612,
       0,     0,   692,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1013,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   692,     0,     0,   612,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   284,     0,     0,  1882,   692,     0,     0,   284,     0,
       0,   284,     0,     0,     0,     0,    98,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   879,   884,   879,   884,
       0,   879,  1902,     0,     0,     0,     0,  1658,  1909,     0,
    1682,     0,   884,     0,     0,     0,     0,     0,     0,     0,
     879,   884,  1682,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,   417,     0,     0,
       0,     0,     0,   129,   141,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   195,   141,     0,     0,     0,
     247,     0,     0,  1195,     0,     0,    98,     0,     0,     0,
       0,  1057,     0,    98,    98,   417,   417,     0,     0,     0,
       0,     0,     0,     0,   284,   284,   284,   284,     0,     0,
       0,     0,     0,   422,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   433,     0,     0,     0,
       0,     0,   284,   284,   284,     0,     0,   190,     0,     0,
       0,  1243,     0,     0,     0,     0,     0,     0,     0,   284,
       0,     0,     0,     0,     0,     0,  1256,  1266,   773,     0,
    1256,  1266,     0,     0,     0,     0,     0,  1243,     0,     0,
    1243,     0,     0,     0,     0,     0,     0,     0,  1287,     0,
     570,   284,     0,     0,     0,     0,     0,     0,   284,     0,
       0,   284,     0,     0,     0,     0,   586,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,   619,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,     0,     0,   884,     0,   879,  1902,     0,
     884,  1682,     0,  2059,     0,  2061,     0,     0,     0,     0,
       0,   884,  2065,     0,     0,     0,     0,     0,     0,     0,
       0,   612,     0,     0,   141,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   195,     0,   695,
       0,     0,     0,     0,     0,     0,     0,   729,   770,    98,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   612,
       0,     0,     0,     0,     0,     0,     0,  1488,   612,     0,
       0,     0,     0,     0,     0,   612,     0,   135,  1488,   126,
     773,     0,   612,     0,   771,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   192,   135,
       0,     0,     0,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   612,  2124,  2127,     0,   879,   884,   879,
       0,     0,     0,   879,  1902,     0,   880,     0,     0,   612,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   135,
     135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   912,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   284,   284,   284,     0,     0,     0,   141,
       0,   654,   879,   884,     0,   879,  1902,     0,     0,   771,
    2172,     0,     0,     0,   571,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   986,     0,     0,   994,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   634,     0,     0,     0,
     636,     0,     0,   912,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   141,
     141,   141,   141,   141,   141,     0,     0,     0,     0,     0,
       0,     0,   284,     0,     0,   284,     0,   135,   284,     0,
     141,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     192,  1195,     0,     0,     0,     0,     0,     0,     0,     0,
    1106,     0,  1115,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1117,     0,   284,     0,     0,     0,     0,
       0,   284,   284,   284,   284,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   284,     0,   284,     0,     0,     0,
       0,     0,     0,   586,     0,     0,     0,     0,  1712,     0,
       0,   654,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -881,
       0,  1738,  -881,  -881,  -881,  1193,  -881,  -881,  1738,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     880,     0,     0,     0,     0,     0,   284,   284,   695,   695,
     695,   695,     0,   284,   284,     0,     0,   284,   284,     0,
       0,     0,   135,     0,  1229,     0,     0,     0,     0,     0,
       0,   729,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   771,  -881,     0,   771,     0,
    1261,  -881,  -881,  -881,  1261,     0,     0,     0,     0,     0,
       0,     0,   135,     0,  -881,     0,     0,     0,     0,     0,
       0,   771,   912,     0,     0,     0,   880,     0,  -881,     0,
       0,     0,  -881,  -881,  -881,  -881,  -881,  -881,  -881,  -881,
       0,     0,     0,     0,     0,     0,     0,     0,  -881,  -881,
     250,     0,     0,  1317,     0,     0,     0,     0,  -881,  -881,
       0,  -881,  -881,  -881,     0,     0,  -881,  -881,     0,  -881,
    -881,  -881,  -881,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1370,     0,     0,     0,     0,     0,     0,     0,  1382,
       0,     0,   135,   135,   135,   135,   135,   135,     0,  1063,
       0,     0,   636,     0,     0,     0,     0,     0,     0,  1434,
       0,     0,     0,   135,   135,   135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   880,     0,     0,     0,     0,
     880,  1460,  1464,   135,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   912,  1478,     0,     0,
       0,   283,     0,   912,     0,     0,     0,     0,     0,     0,
    1571,   912,  1492,     0,     0,     0,     0,     0,     0,  1499,
       0,     0,   912,   129,   141,     0,     0,     0,   284,     0,
       0,   612,     0,     0,   771,     0,     0,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   141,     0,     0,     0,     0,     0,     0,
       0,  1532,     0,     0,     0,     0,     0,   619,   -66,     0,
       0,     0,     0,   141,     0,   -66,   -66,     0,     0,     0,
     -66,     0,     0,   986,     0,     0,   -66,   -66,   -66,     0,
     283,   283,     0,     0,     0,     0,     0,     0,   250,     0,
       0,   -66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,
       0,     0,   612,   -66,     0,     0,     0,     0,   611,     0,
    1572,     0,  1573,   -66,     0,   986,     0,     0,   284,   284,
       0,     0,     0,     0,   284,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   284,     0,     0,
     284,     0,     0,     0,     0,     0,     0,     0,   284,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     653,  1611,     0,   283,   283,   283,     0,     0,     0,     0,
    1619,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   750,     0,     0,     0,     0,     0,   750,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     772,     0,     0,   773,   880,     0,     0,     0,     0,   695,
       0,     0,   695,  1659,  1661,     0,  1664,     0,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,     0,     0,     0,   880,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   695,
       0,     0,     0,     0,     0,   695,   695,   695,   695,     0,
       0,     0,     0,     0,     0,     0,     0,   135,     0,     0,
       0,     0,     0,     0,     0,     0,   284,   284,     0,     0,
       0,     0,   912,     0,     0,   912,     0,  1261,     0,     0,
       0,     0,     0,     0,     0,  1729,     0,     0,     0,     0,
     612,     0,     0,     0,     0,  1261,   135,   611,     0,     0,
       0,     0,  1261,     0,     0,     0,   880,     0,     0,     0,
       0,     0,     0,   634,     0,   636,   135,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   325,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,     0,   284,   284,   611,
       0,     0,   880,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,   131,     0,     0,     0,     0,     0,     0,
     148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   611,
       0,     0,     0,   171,   183,   209,     0,     0,     0,     0,
       0,   330,   773,     0,   880,     0,   331,   332,   333,     0,
       0,   283,     0,     0,     0,     0,     0,   880,   283,   334,
     335,   283,     0,     0,   135,   135,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   131,   131,     0,     0,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,   530,   349,  1206,     0,  1207,     0,   880,     0,
       0,   350,   351,     0,   352,   353,   354,   355,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   880,     0,     0,     0,   880,     0,
     131,     0,     0,  1806,     0,     0,     0,     0,     0,   286,
       0,     0,     0,     0,     0,     0,     0,  1813,     0,     0,
       0,     0,     0,     0,  1816,     0,     0,     0,     0,     0,
       0,     0,   433,     0,     0,     0,     0,     0,     0,     0,
     171,   608,     0,     0,   283,   283,   283,   283,   634,     0,
     636,     0,     0,  1499,     0,   619,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,   283,   283,     0,     0,     0,     0,     0,
       0,  1242,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     0,   183,     0,     0,  1255,  1265,   772,     0,
    1255,  1265,     0,     0,     0,     0,   183,  1242,   286,   286,
    1242,     0,     0,     0,     0,     0,   608,     0,  1286,     0,
       0,   283,     0,     0,     0,     0,     0,     0,   283,     0,
       0,   283,     0,     0,     0,     0,  1872,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   614,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   619,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,   695,   695,
       0,     0,     0,     0,   880,     0,   880,     0,   656,   880,
     695,   286,   286,   286,     0,  1907,  1910,     0,  1912,     0,
       0,   611,     0,     0,     0,     0,     0,     0,   880,     0,
    1923,     0,   286,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,   131,     0,
       0,   753,   334,   335,   131,     0,     0,   753,  1941,     0,
       0,     0,     0,     0,     0,     0,   336,     0,   775,   611,
     337,   338,   339,   340,   341,   342,   343,   344,   611,     0,
       0,     0,     0,     0,     0,   611,   345,   346,   608,     0,
     772,   347,   611,     0,   348,   882,   349,     0,     0,   883,
       0,     0,     0,     0,   350,   351,  1783,   352,   353,   354,
     355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   608,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   135,     0,     0,   171,     0,
       0,  1478,     0,   611,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   611,
       0,   134,     0,  1816,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   614,     0,     0,   131,   131,
     131,   131,   131,   131,   912,   131,     0,     0,   131,     0,
       0,     0,   134,   134,     0,     0,     0,     0,     0,   131,
     131,   131,     0,   283,   283,   283,     0,     0,     0,     0,
       0,   653,     0,     0,     0,     0,     0,   561,     0,   608,
       0,   131,     0,     0,     0,     0,     0,   614,   880,     0,
       0,     0,     0,     0,   131,     0,     0,     0,     0,     0,
     135,     0,     0,   134,   134,     0,     0,   695,   880,     0,
       0,     0,     0,     0,     0,   880,     0,     0,     0,  1912,
       0,  2060,     0,     0,     0,     0,     0,   614,     0,     0,
    2066,     0,     0,     0,     0,     0,  1729,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   286,
       0,     0,     0,     0,     0,     0,   286,     0,   134,   286,
       0,     0,     0,     0,     0,     0,   771,     0,     0,     0,
       0,     0,   283,     0,     0,   283,     0,     0,   283,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1225,     0,     0,   616,
       0,     0,     0,     0,   131,     0,     0,     0,     0,     0,
     608,     0,     0,     0,     0,   283,     0,     0,     0,     0,
       0,   283,   283,   283,   283,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,   283,     0,     0,     0,
       0,   134,     0,     0,     0,     0,     0,     0,  1711,     0,
       0,   653,  2125,  2128,   134,   880,     0,   880,     0,     0,
     695,   880,   695,     0,   726,     0,     0,     0,     0,     0,
       0,  1737,   286,   286,   286,   286,     0,     0,  1737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,   283,     0,     0,
     286,   286,   286,   283,   283,     0,     0,   283,   283,  1245,
       0,     0,     0,     0,     0,     0,     0,   286,     0,     0,
     880,     0,     0,   880,  1258,  1268,   775,     0,  1258,  1268,
       0,   695,     0,     0,     0,  1245,     0,     0,  1245,     0,
       0,     0,     0,     0,     0,     0,  1289,     0,     0,   286,
       0,   135,     0,     0,     0,     0,   286,     0,     0,   286,
       0,     0,     0,     0,     0,     0,     0,     0,   880,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,     0,     0,   171,
       0,   608,   616,     0,     0,     0,     0,     0,   608,     0,
       0,     0,     0,   608,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   614,
       0,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,   131,     0,     0,     0,     0,   608,     0,     0,     0,
     616,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   608,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   614,     0,     0,
       0,     0,     0,     0,     0,     0,   614,     0,     0,     0,
       0,     0,     0,   614,     0,     0,     0,     0,   775,     0,
     614,     0,     0,     0,     0,     0,   134,   134,   134,   134,
     134,   134,     0,   134,   608,     0,   726,     0,   283,     0,
       0,   611,     0,     0,     0,     0,     0,   134,   134,   134,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,     0,   616,
       0,   614,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   131,   616,     0,     0,     0,     0,   614,     0,     0,
     131,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   286,   286,   286,     0,     0,     0,     0,     0,   656,
       0,     0,   611,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,   283,
       0,     0,     0,     0,   283,   283,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
     283,     0,     0,     0,     0,     0,     1,     0,   283,     0,
     783,     0,   726,     0,     0,     0,     0,     0,   726,     0,
       0,     0,     0,     0,   131,     0,   131,   811,     0,     0,
       0,     2,   215,   216,   217,   218,   219,     8,     9,    10,
     603,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
     286,     0,     0,   286,     0,     0,   286,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,   772,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   286,     0,    43,     0,     0,     0,   286,
     286,   286,   286,   281,     0,    46,    47,    48,    49,    50,
      51,   221,   222,     0,     0,     0,     0,    56,    57,     0,
       0,   604,   286,     0,   286,     0,     0,     0,     0,     0,
       0,     0,   605,     0,   606,     0,  1714,     0,     0,   656,
       0,     0,     0,     0,     0,     0,   283,   283,     0,     0,
       0,     0,     0,     0,     0,   518,     0,     0,     0,  1740,
       0,     0,     0,     0,     0,     0,  1740,   518,     0,     0,
     611,   518,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   286,   286,     0,     0,     0,     0,
       0,   286,   286,     0,     0,   286,   286,     0,     0,   616,
       0,     0,   281,   281,     0,     0,   616,     0,   282,     0,
       0,   134,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,   283,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     610,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,   616,
     282,     0,     0,     0,   616,     0,     0,     0,     0,     0,
     134,     0,   282,     0,     0,     0,   282,   131,     0,     0,
     616,     0,   772,     0,   131,     0,     0,     0,     0,     0,
       0,   131,   652,     0,     0,   281,   281,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,   282,     0,
       0,     0,   131,     0,   608,     0,   281,   131,     0,  1763,
     131,     0,     0,     0,     0,     0,     0,     0,  1190,     0,
       0,     0,   616,     0,     0,   749,     0,     0,     0,     0,
       0,   749,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,   134,   134,
       0,     0,     0,     0,     0,     0,     0,   267,   616,     0,
     616,     0,     0,     0,    31,    32,   131,   282,     0,    35,
     282,   282,   282,     0,   131,   268,    41,   269,     0,     0,
       0,     0,     0,     0,     0,   608,   286,     0,     0,   614,
     270,   282,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,   271,   272,   273,   274,   221,   222,     0,     0,
     282,     0,    56,     0,   783,     0,   282,     0,     0,     0,
       0,     0,  -111,     0,     0,     0,     0,     0,  1318,   610,
       0,     0,     0,     0,     0,   921,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   921,  1341,  1345,  1349,
    1353,  1357,     0,     0,  1366,  1372,     0,     0,     0,     0,
     783,     0,     0,  1383,     0,     0,     0,     0,     0,     0,
       0,     0,   726,     0,   726,  1407,  1411,  1415,  1419,  1423,
       0,   610,  1366,  1436,     0,     0,     0,     0,     0,     0,
     614,     0,     0,     0,  1318,     0,     0,     0,  1012,     0,
    1383,     0,     0,     0,  1366,  1366,   286,   286,     0,     0,
       0,     0,   286,   286,     0,     0,     0,     0,     0,     0,
       0,   610,     0,     0,     0,   286,     0,   325,   286,     1,
     326,   113,   327,     0,   328,   329,   286,     0,     0,     0,
     282,     0,     0,   281,     0,     0,     0,     0,     0,     0,
     281,   282,     0,   281,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   131,
       0,   131,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1171,  1172,  1173,   672,  1174,  1175,  1176,  1177,   677,
     678,  1178,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,   282,     0,     0,     0,    35,     0,     0,
       0,   775,   334,   335,  1179,     0,   682,   683,   684,     0,
       0,     0,     0,     0,     0,     0,   336,   131,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,    46,    47,
       0,     0,     0,     0,     0,     0,   345,   346,   282,     0,
       0,   347,     0,     0,   348,   282,   349,   685,   282,     0,
       0,   277,     0,   686,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,     0,   281,   281,   281,   281,
       0,     0,     0,     0,   286,   286,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   281,   281,   281,     0,   614,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   281,     0,     0,     0,     0,     0,     0,  1254,  1264,
       0,     0,  1254,  1264,     0,   616,     0,     0,     0,     0,
       0,     0,   616,     0,     0,     0,     0,     0,     0,   134,
       0,     0,     0,   281,     0,     0,     0,     0,     0,     0,
     281,     0,     0,   281,     0,   286,   286,     0,     0,     0,
     616,     0,   616,     0,     0,   616,     0,     0,   616,     0,
       0,   282,   282,   282,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1190,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     282,   282,     0,     0,     0,     0,     0,     0,     0,     0,
     775,     0,     0,     0,     0,     0,   282,     0,   287,     0,
       0,     0,     0,   282,   282,     0,     0,   282,   282,     0,
       0,     0,     0,   610,     0,     0,     0,     0,   325,     0,
       1,   326,   113,   327,   134,   328,   329,     0,   282,     0,
       0,     0,   616,     0,     0,   282,     0,     0,   282,     0,
       0,     0,     0,   616,     0,     2,     0,     0,     0,     0,
     287,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   610,   287,     0,     0,     0,   287,     0,     0,  1487,
     610,     0,     0,     0,     0,     0,     0,   610,     0,     0,
    1487,     0,     0,     0,   610,   330,     0,  1765,     0,     0,
     331,   332,   333,     0,     0,     0,     0,   287,   287,     0,
       0,     0,     0,   334,   335,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     0,     0,     0,   610,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,   882,   349,     0,     0,
    1778,   610,     0,     0,  1786,   350,   351,     0,   352,   353,
     354,   355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,     0,   287,     0,     0,
     287,   287,   287,     0,     0,   281,   281,   281,     0,     0,
       0,     0,     0,   652,     0,     0,     0,     0,     0,     0,
       0,   287,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   616,   616,     0,   616,
     287,     0,     0,     0,     0,     0,   287,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   282,   282,     0,   281,     0,     0,   281,   282,     0,
     281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,   281,     0,     0,
       0,     0,     0,   281,   281,   281,   281,     0,     0,   336,
     287,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   287,     0,     0,     0,     0,   281,     0,   281,   345,
     346,     0,     0,     0,   347,     0,     0,   348,   882,   349,
       0,     0,  1778,   652,     0,     0,  1799,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,   282,
       0,     0,   282,  1736,     0,   282,     0,     0,     0,     0,
    1736,     0,     0,   287,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   281,   281,
       0,     0,     0,     0,     0,   281,   281,     0,     0,   281,
     281,     0,   282,     0,     0,     0,     0,     0,   282,   282,
     282,   282,     0,     0,     0,     0,     0,     0,   287,     0,
       0,     0,     0,     0,     0,   287,     0,     0,   287,     0,
       0,   282,     0,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
       0,     0,     0,     0,     0,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   282,   282,     0,     0,     0,     0,     0,
     282,   282,     0,     0,   282,   282,     0,     0,     0,  1765,
       0,     0,     0,     0,  1978,  1980,  1984,  1988,  1990,  1994,
       0,     0,     0,  1998,  2002,  2006,  2010,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1980,  1984,  1990,  1994,
    1998,  2002,  2006,  2010,     0,     0,     0,     0,     0,     0,
       0,   287,   287,   287,   287,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   287,
     287,   287,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   287,     0,     0,     0,
       0,     0,     0,   287,   287,     0,     0,   287,   287,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     281,     0,     0,   610,     0,     0,     0,     0,   287,     0,
       0,     0,     0,     0,     0,   287,     0,     0,   287,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -459,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   610,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     281,   281,     0,     0,     0,     0,   281,   281,     0,     0,
    -459,     0,     0,     0,     0,  -459,  -459,  -459,     0,   281,
       0,     0,   281,     0,     0,     0,     0,     0,  -459,  -459,
     281,     0,     0,     0,   287,     0,     0,     0,     0,     0,
       0,     0,  -459,     0,     0,   287,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,     0,     0,     0,     0,     0,     0,
       0,     0,  -459,  -459,     0,     0,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,     0,     0,  -459,     0,
    -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,   282,     0,     0,     0,
       0,   282,   282,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,   282,     0,     0,   282,     0,     0,
       0,     0,     0,     0,     0,   282,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     287,   287,   287,     0,     0,     0,     0,     0,   287,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   281,   281,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
       0,     0,   610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,   882,   349,     0,     0,  1778,     0,     0,     0,  1803,
     350,   351,     0,   352,   353,   354,   355,     0,     0,   281,
     281,     1,     0,     0,     0,     0,     0,     0,     0,   287,
       0,     0,   287,     0,     0,   287,     0,     0,     0,     0,
       0,     0,     0,   282,   282,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,   287,     0,     0,     0,     0,     0,   287,   287,
     287,   287,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,   287,     0,   287,     0,   268,    41,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   287,     0,
     270,     0,     0,     0,   282,   282,     0,     0,     0,     0,
      46,    47,   271,   272,   273,   274,   221,   222,   287,     0,
       0,     0,    56,    57,     0,   287,   910,     0,     0,     0,
       0,     0,     0,  1485,     0,     0,     0,   605,     0,     0,
       0,     0,     0,   287,   287,     0,     0,     0,     0,     0,
     287,   287,     0,     0,   287,   287,  -345,   791,     0,  -345,
    -345,  -345,  -345,   792,   793,   794,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   795,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,   796,  -345,  -345,   797,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -451,   876,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,     0,   287,  -451,  -451,  -451,     0,
       0,  -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,  -451,     0,  -451,  -451,
    -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   287,   287,     0,     0,     0,
       0,   287,   287,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   287,     0,     0,   287,     0,     0,
       0,     0,     0,  -304,   325,   287,     1,   326,   113,   327,
    -304,   328,   329,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,
       0,   330,  -304,  -304,     0,     0,   331,   332,   333,  -304,
    -304,     0,     0,  -304,  -304,  -304,  -304,  -304,  -304,   334,
     335,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,  -304,     0,   336,  -304,  -304,     0,   337,   338,   339,
     340,   341,   342,   343,   344,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,   345,   346,  -304,  -304,  -304,   347,  -304,
    -304,   348,  1284,   349,  -304,  -304,  1207,  -304,  -304,  -304,
    -304,   350,   351,  -304,   352,   353,   354,   355,  -304,  -304,
    -304,  -304,  -304,   287,   287,     0,  -305,   325,     0,     1,
     326,   113,   327,  -305,   328,   329,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,     0,     0,   330,  -305,  -305,     0,     0,   331,
     332,   333,  -305,  -305,   287,   287,  -305,  -305,  -305,  -305,
    -305,  -305,   334,   335,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,     0,  -305,     0,   336,  -305,  -305,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,   345,   346,  -305,  -305,
    -305,   347,  -305,  -305,   348,   882,   349,  -305,  -305,   883,
    -305,  -305,  -305,  -305,   350,   351,  -305,   352,   353,   354,
     355,  -305,  -305,  -305,  -305,  -305,  -566,   325,     0,     1,
     326,   113,   327,  -566,   328,   329,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     2,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
       0,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     0,     0,   330,  -566,  -566,     0,     0,   331,
     332,   333,  -566,  -566,     0,     0,  -566,  -566,  -566,  -566,
    -566,  -566,   334,   335,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,     0,  -566,     0,   336,  -566,  -566,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,   345,   346,  -566,  -566,
    -566,   347,  -566,  -566,   348,  -566,   349,  -566,  -566,  -566,
    -566,   779,  -566,  1365,   350,   351,  -566,   352,   353,   354,
     355,  -566,  -566,  -566,  -566,  -566,  -567,   325,     0,     1,
     326,   113,   327,  -567,   328,   329,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,     2,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
       0,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,     0,     0,   330,  -567,  -567,     0,     0,   331,
     332,   333,  -567,  -567,     0,     0,  -567,  -567,  -567,  -567,
    -567,  -567,   334,   335,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,     0,  -567,     0,   336,  -567,  -567,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,   345,   346,  -567,  -567,
    -567,   347,  -567,  -567,   348,  -567,   349,  -567,  -567,  -567,
    -567,   779,  -567,  1431,   350,   351,  -567,   352,   353,   354,
     355,  -567,  -567,  -567,  -567,  -567,  -577,   325,     0,     1,
     326,   113,   327,  -577,   328,   329,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   330,  -577,  -577,     0,     0,   331,
     332,   333,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,
    -577,  -577,   334,   335,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,     0,   336,  -577,  -577,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,   345,   346,  -577,  -577,
    -577,   347,  -577,  -577,   348,  -577,   349,  -577,  -577,  1207,
    -577,  -577,  -577,  -577,   350,   351,  -577,   352,   353,   354,
     355,  -577,  -577,  -577,  -577,  -577,  -579,   325,     0,     1,
     326,   113,   327,  -579,   328,   329,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,     2,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       0,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,     0,     0,   330,  -579,  -579,     0,     0,   331,
     332,   333,  -579,  -579,     0,     0,  -579,  -579,  -579,  -579,
    -579,  -579,   334,   335,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,     0,  -579,     0,   336,  -579,  -579,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,   345,   346,  -579,  -579,
    -579,   347,  -579,  -579,   348,   882,   349,  -579,  -579,   883,
    -579,  -579,  -579,  -579,   350,   351,  -579,   352,   353,   354,
     355,  -579,  -579,  -579,  -579,  -579,  -578,   325,     0,     1,
     326,   113,   327,  -578,   328,   329,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,     0,   330,  -578,  -578,     0,     0,   331,
     332,   333,  -578,  -578,     0,     0,  -578,  -578,  -578,  -578,
    -578,  -578,   334,   335,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,     0,   336,  -578,  -578,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,   345,   346,  -578,  -578,
    -578,   347,  -578,  -578,   348,  -578,   349,  -578,  -578,  1207,
    -578,  -578,  -578,  -578,   350,   351,  -578,   352,   353,   354,
     355,  -578,  -578,  -578,  -578,  -578,  -338,  1937,     0,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
       0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,     0,     0,  -338,  -338,  -338,     0,     0,  -338,
    -338,  -338,  -338,  -338,     0,     0,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,     0,  -338,     0,  -338,  -338,  -338,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -342,  1973,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
       0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,     0,  -342,  -342,  -342,     0,     0,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,     0,  -342,     0,  -342,  -342,  -342,     0,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -332,   325,     0,     1,
     326,   113,   327,  -332,   328,   329,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
       0,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     0,     0,   330,  -332,  -332,     0,     0,   331,
     332,   333,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,
    -332,  -332,   334,   335,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     0,  -332,     0,   336,  -332,  -332,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,   345,   346,  -332,  -332,
    -332,   347,  -332,  -332,   348,  -332,   349,  -332,  -332,  -332,
    -332,   779,  -332,  -332,   350,   351,  -332,   352,   353,   354,
     355,  -332,  -332,  -332,  -332,  -332,  -544,   325,     0,     1,
     326,   113,   327,  -544,   328,   329,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,     2,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     0,     0,   330,  -544,  -544,     0,     0,   331,
     332,   333,  -544,  -544,     0,     0,  -544,  -544,  -544,  -544,
    -544,  -544,   334,   335,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,     0,  -544,     0,   336,  -544,  -544,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,   345,   346,  -544,  -544,
    -544,   347,  -544,  -544,   348,  -544,   349,  -544,  -544,  -544,
    -544,   779,  -544,  -544,   350,   351,  -544,   352,   353,   354,
     355,  -544,  -544,  -544,  -544,  -544,  -552,   325,     0,     1,
     326,   113,   327,  -552,   328,   329,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       0,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     0,     0,   330,  -552,  -552,     0,     0,   331,
     332,   333,  -552,  -552,     0,     0,  -552,  -552,  -552,  -552,
    -552,  -552,   334,   335,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,     0,  -552,     0,   336,  -552,  -552,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,   345,   346,  -552,  -552,
    -552,   347,  -552,  -552,   348,  -552,   349,  -552,  -552,  -552,
    -552,   779,  -552,  -552,   350,   351,  -552,   352,   353,   354,
     355,  -552,  -552,  -552,  -552,  -552,  -545,   325,     0,     1,
     326,   113,   327,  -545,   328,   329,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       0,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,     0,     0,   330,  -545,  -545,     0,     0,   331,
     332,   333,  -545,  -545,     0,     0,  -545,  -545,  -545,  -545,
    -545,  -545,   334,   335,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,     0,  -545,     0,   336,  -545,  -545,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,   345,   346,  -545,  -545,
    -545,   347,  -545,  -545,   348,  -545,   349,  -545,  -545,  -545,
    -545,   779,  -545,  -545,   350,   351,  -545,   352,   353,   354,
     355,  -545,  -545,  -545,  -545,  -545,  -553,   325,     0,     1,
     326,   113,   327,  -553,   328,   329,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     2,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
       0,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,     0,     0,   330,  -553,  -553,     0,     0,   331,
     332,   333,  -553,  -553,     0,     0,  -553,  -553,  -553,  -553,
    -553,  -553,   334,   335,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,     0,  -553,     0,   336,  -553,  -553,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,   345,   346,  -553,  -553,
    -553,   347,  -553,  -553,   348,  -553,   349,  -553,  -553,  -553,
    -553,   779,  -553,  -553,   350,   351,  -553,   352,   353,   354,
     355,  -553,  -553,  -553,  -553,  -553,  -546,   325,     0,     1,
     326,   113,   327,  -546,   328,   329,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,     2,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,     0,   330,  -546,  -546,     0,     0,   331,
     332,   333,  -546,  -546,     0,     0,  -546,  -546,  -546,  -546,
    -546,  -546,   334,   335,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,     0,  -546,     0,   336,  -546,  -546,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,   345,   346,  -546,  -546,
    -546,   347,  -546,  -546,   348,  -546,   349,  -546,  -546,  -546,
    -546,   779,  -546,  -546,   350,   351,  -546,   352,   353,   354,
     355,  -546,  -546,  -546,  -546,  -546,  -554,   325,     0,     1,
     326,   113,   327,  -554,   328,   329,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,     2,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       0,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,     0,     0,   330,  -554,  -554,     0,     0,   331,
     332,   333,  -554,  -554,     0,     0,  -554,  -554,  -554,  -554,
    -554,  -554,   334,   335,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,     0,  -554,     0,   336,  -554,  -554,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,   345,   346,  -554,  -554,
    -554,   347,  -554,  -554,   348,  -554,   349,  -554,  -554,  -554,
    -554,   779,  -554,  -554,   350,   351,  -554,   352,   353,   354,
     355,  -554,  -554,  -554,  -554,  -554,  -547,   325,     0,     1,
     326,   113,   327,  -547,   328,   329,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,     2,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
       0,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,     0,     0,   330,  -547,  -547,     0,     0,   331,
     332,   333,  -547,  -547,     0,     0,  -547,  -547,  -547,  -547,
    -547,  -547,   334,   335,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,     0,  -547,     0,   336,  -547,  -547,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,   345,   346,  -547,  -547,
    -547,   347,  -547,  -547,   348,  -547,   349,  -547,  -547,  -547,
    -547,   779,  -547,  -547,   350,   351,  -547,   352,   353,   354,
     355,  -547,  -547,  -547,  -547,  -547,  -555,   325,     0,     1,
     326,   113,   327,  -555,   328,   329,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,     2,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
       0,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,     0,     0,   330,  -555,  -555,     0,     0,   331,
     332,   333,  -555,  -555,     0,     0,  -555,  -555,  -555,  -555,
    -555,  -555,   334,   335,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,     0,  -555,     0,   336,  -555,  -555,     0,
     337,   338,   339,   340,   341,   342,   343,   344,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,   345,   346,  -555,  -555,
    -555,   347,  -555,  -555,   348,  -555,   349,  -555,  -555,  -555,
    -555,   779,  -555,  -555,   350,   351,  -555,   352,   353,   354,
     355,  -555,  -555,  -555,  -555,  -555,  -340,  2080,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
       0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,     0,  -340,  -340,  -340,     0,     0,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,     0,  -340,     0,  -340,  -340,  -340,     0,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -339,  2081,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,  -339,     0,     0,  -339,
    -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -345,   791,     0,  -345,
    -345,  -345,  -345,   792,   793,   794,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   795,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  1204,  -345,  -345,   797,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,   791,     0,     0,     0,
       0,     0,   792,   793,   794,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -345,     0,     0,     0,     0,     0,
       0,  -345,  -345,     0,     0,     0,  -345,     0,     0,     0,
       0,     0,  -345,  -345,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,  -345,
    -345,  -345,  -345,   795,     0,     0,  -345,  1592,  -345,  -345,
       0,   796,     0,     0,   797,     0,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -459,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -459,     0,     0,     0,     0,  -459,  -459,  -459,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -459,     0,     0,     0,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,     0,     0,     0,     0,
       0,     0,     0,     0,  -459,  -459,     0,     0,     0,  -459,
    -459,  -459,  -459,  -459,  -459,     0,  -459,  -459,     0,     0,
    -459,     0,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -451,   876,     0,  -451,  -451,  -451,
    -451,     0,  -451,  -451,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
    -451,  -451,     0,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,     0,  -451,  -451,  -451,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,  -451,     0,  -451,  -451,  -451,
    1205,  -451,  -451,  -451,     0,  -451,  -451,  -451,  -451, -1111,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1111, -1111,
   -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111,
   -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111,
   -1111, -1111, -1111,     0, -1111, -1111, -1111, -1111, -1111, -1111,
   -1111, -1111, -1111, -1111, -1111,     0,     0,   330, -1111, -1111,
       0,     0,   331,   332,   333, -1111, -1111,     0,     0, -1111,
   -1111, -1111, -1111, -1111, -1111,   334,   335, -1111, -1111, -1111,
   -1111, -1111, -1111, -1111, -1111, -1111,     0, -1111,     0,   336,
   -1111, -1111,     0,   337,   338,   339,   340,   341,   342,   343,
     344, -1111, -1111, -1111, -1111, -1111, -1111, -1111, -1111,   345,
     346, -1111, -1111, -1111,   347,     0,     0,   348,   882,   349,
   -1111,     0,   883, -1111, -1111,     0, -1111,   350,   351,     0,
     352,   353,   354,   355, -1258,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,     0, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
       0,     0,   330, -1258, -1258,     0,     0,   331,   332,   333,
   -1258, -1258,     0,     0, -1258, -1258, -1258, -1258, -1258, -1258,
     334,   335, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258,     0, -1258,     0,   336, -1258, -1258,     0,   337,   338,
     339,   340,   341,   342,   343,   344, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258,   345,   346, -1258, -1258, -1258,   347,
       0,     0,   348,   882,   349,  1689,     0,   883, -1258, -1258,
       0, -1258,   350,   351,     0,   352,   353,   354,   355, -1216,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216,     0, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216,     0,     0,   330, -1216, -1216,
       0,     0,   331,   332,   333, -1216, -1216,     0,     0, -1216,
   -1216, -1216, -1216, -1216, -1216,   334,   335, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216,     0, -1216,     0,   336,
   -1216, -1216,     0,   337,   338,   339,   340,   341,   342,   343,
     344, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,   345,
     346, -1216, -1216, -1216,   347,     0,     0,   348,  1896,   349,
   -1216,     0,   883, -1216, -1216,     0, -1216,   350,   351,     0,
     352,   353,   354,   355, -1247,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1247, -1247, -1247, -1247, -1247, -1247, -1247,
   -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247,
   -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330, -1247, -1247,     0,     0,   331,   332,   333,
   -1247, -1247,     0,     0, -1247,    35, -1247, -1247, -1247, -1247,
     334,   335,  1179, -1247,   682,   683,   684, -1247, -1247, -1247,
   -1247,     0, -1247,     0,   336, -1247, -1247,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47, -1247, -1247,
   -1247, -1247, -1247, -1247,   345,   346, -1247, -1247, -1247,   347,
       0,     0,   348,   882,   349,   685,     0,   883, -1247,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355,  -578,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,     0,   330,  -578,  -578,
       0,     0,   331,   332,   333,  -578,  -578,     0,     0,  -578,
    -578,  -578,  -578,  -578,  -578,   334,   335,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   336,
    -578,  -578,     0,   337,   338,   339,   340,   341,   342,   343,
     344,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   345,
     346,  -578,  -578,  -578,   347,     0,     0,   348,  -578,   349,
    1206,     0,  1207,  -578,  -578,     0,  -578,   350,   351,     0,
     352,   353,   354,   355, -1239,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,     0, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
       0,     0,   330, -1239, -1239,     0,     0,   331,   332,   333,
   -1239, -1239,     0,     0, -1239, -1239, -1239, -1239, -1239, -1239,
     334,   335, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239,     0, -1239,     0,   336, -1239, -1239,     0,   337,   338,
     339,   340,   341,   342,   343,   344, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239,   345,   346, -1239, -1239, -1239,   347,
       0,     0,   348,  2129,   349, -1239,     0,  1207, -1239, -1239,
       0, -1239,   350,   351,     0,   352,   353,   354,   355, -1240,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240,     0, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240,     0,     0,   330, -1240, -1240,
       0,     0,   331,   332,   333, -1240, -1240,     0,     0, -1240,
   -1240, -1240, -1240, -1240, -1240,   334,   335, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240,     0, -1240,     0,   336,
   -1240, -1240,     0,   337,   338,   339,   340,   341,   342,   343,
     344, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,   345,
     346, -1240, -1240, -1240,   347,     0,     0,   348,   882,   349,
    2130,     0,   883, -1240, -1240,     0, -1240,   350,   351,     0,
     352,   353,   354,   355, -1234,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330, -1234, -1234,     0,     0,   331,   332,   333,
   -1234, -1234,     0,     0, -1234,    35, -1234, -1234, -1234, -1234,
     334,   335,  1179, -1234,   682,   683,   684, -1234, -1234, -1234,
   -1234,     0, -1234,     0,   336, -1234, -1234,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47, -1234, -1234,
   -1234, -1234, -1234, -1234,   345,   346, -1234, -1234, -1234,   347,
       0,     0,   348,   882,   349,   685,     0,   883, -1234,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1182,
     660,     0, -1182, -1182, -1182, -1182,     0, -1182, -1182,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182,     0, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182,     0,     0, -1182, -1182, -1182,
       0,     0, -1182, -1182, -1182, -1182, -1182,     0,     0, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182,     0, -1182,     0, -1182,
   -1182, -1182,     0, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182,     0,     0, -1182,     0, -1182,
     661,     0, -1182, -1182, -1182,     0, -1182, -1182, -1182,     0,
   -1182, -1182, -1182, -1182, -1205,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1205,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1205,    35, -1205, -1205, -1205, -1205,
     334,   680,   681,   269,   682,   683,   684, -1205, -1205, -1205,
   -1205,     0, -1205,     0,   336, -1205,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1205, -1205,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1183,
     660,     0, -1183, -1183, -1183, -1183,     0, -1183, -1183,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183,     0, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183,     0,     0, -1183, -1183, -1183,
       0,     0, -1183, -1183, -1183, -1183, -1183,     0,     0, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183,     0, -1183,     0, -1183,
   -1183, -1183,     0, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183,     0,     0, -1183,     0, -1183,
     661,     0, -1183, -1183, -1183,     0, -1183, -1183, -1183,     0,
   -1183, -1183, -1183, -1183, -1244,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1244, -1244, -1244, -1244, -1244, -1244, -1244,
   -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244,
   -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244,     0,  1171,
    1172,  1173,   672,  1174,  1175,  1176,  1177,   677,   678,  1178,
       0,     0,   330, -1244, -1244,     0,     0,   331,   332,   333,
   -1244, -1244,     0,     0, -1244,    35, -1244, -1244, -1244, -1244,
     334,   335,  1179, -1244,   682,   683,   684, -1244, -1244, -1244,
   -1244,     0, -1244,     0,   336, -1244, -1244,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47, -1244, -1244,
   -1244, -1244, -1244, -1244,   345,   346, -1244, -1244, -1244,   347,
       0,     0,   348,     0,   349,   685,     0, -1244, -1244,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1260,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260,     0, -1260, -1260, -1260, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260,     0,     0,   330, -1260, -1260,
       0,     0,   331,   332,   333, -1260, -1260,     0,     0, -1260,
   -1260, -1260, -1260, -1260, -1260,   334,   335, -1260, -1260, -1260,
   -1260, -1260, -1260, -1260, -1260, -1260,     0, -1260,     0,   336,
   -1260, -1260,     0,   337,   338,   339,   340,   341,   342,   343,
     344, -1260, -1260, -1260, -1260, -1260, -1260, -1260, -1260,   345,
     346, -1260, -1260, -1260,   347,     0,     0,   348,     0,   349,
    1189,     0, -1260, -1260,   779,     0, -1260,   350,   351,     0,
     352,   353,   354,   355, -1195,  1208,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1195,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1195,    35, -1195, -1195, -1195, -1195,
     334,   680,   681,   269,   682,   683,   684, -1195, -1195, -1195,
   -1195,     0, -1195,     0,   336, -1195,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1195, -1195,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1199,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,     0,     0,   330,   267, -1199,
       0,     0,   331,   332,   333,    31,    32,     0,     0, -1199,
      35, -1199, -1199, -1199, -1199,   334,   680,   681,   269,   682,
     683,   684, -1199, -1199, -1199, -1199,     0, -1199,     0,   336,
   -1199,   270,     0,   337,   338,   339,   340,   341,   342,   343,
     344,    46,    47,   271,   272,   273,   274,   221,   222,   345,
     346,   275,   276,    56,   347,     0,     0,   348,     0,   349,
     685,     0, -1199, -1199,   277,     0,   686,   350,   351,     0,
     352,   353,   354,   355, -1194,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1194,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1194,    35, -1194, -1194, -1194, -1194,
     334,   680,   681,   269,   682,   683,   684, -1194, -1194, -1194,
   -1194,     0, -1194,     0,   336, -1194,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1194, -1194,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1198,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,     0,     0,   330,   267, -1198,
       0,     0,   331,   332,   333,    31,    32,     0,     0, -1198,
      35, -1198, -1198, -1198, -1198,   334,   680,   681,   269,   682,
     683,   684, -1198, -1198, -1198, -1198,     0, -1198,     0,   336,
   -1198,   270,     0,   337,   338,   339,   340,   341,   342,   343,
     344,    46,    47,   271,   272,   273,   274,   221,   222,   345,
     346,   275,   276,    56,   347,     0,     0,   348,     0,   349,
     685,     0, -1198, -1198,   277,     0,   686,   350,   351,     0,
     352,   353,   354,   355, -1098,  1221,     0, -1098, -1098, -1098,
   -1098,     0, -1098, -1098,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,     0, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
       0,     0, -1098, -1098, -1098,     0,     0, -1098, -1098, -1098,
   -1098, -1098,     0,     0, -1098, -1098, -1098, -1098, -1098, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
   -1098,     0, -1098,     0, -1098, -1098, -1098,     0, -1098, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
   -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098, -1098,
       0,     0, -1098,     0, -1098, -1098,     0, -1098, -1098, -1098,
       0, -1098, -1098, -1098,     0, -1098, -1098, -1098, -1098, -1100,
    1222,     0, -1100, -1100, -1100, -1100,     0, -1100, -1100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100,     0, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100,     0,     0, -1100, -1100, -1100,
       0,     0, -1100, -1100, -1100, -1100, -1100,     0,     0, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100,     0, -1100,     0, -1100,
   -1100, -1100,     0, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100, -1100,
   -1100, -1100, -1100, -1100, -1100,     0,     0, -1100,     0, -1100,
   -1100,     0, -1100, -1100, -1100,     0, -1100, -1100, -1100,     0,
   -1100, -1100, -1100, -1100, -1146,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1146,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1146,    35, -1146, -1146, -1146, -1146,
     334,   680,   681,   269,   682,   683,   684, -1146, -1146, -1146,
   -1146,     0, -1146,     0,   336, -1146,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1146, -1146,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1148,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,     0,     0,   330,   267, -1148,
       0,     0,   331,   332,   333,    31,    32,     0,     0, -1148,
      35, -1148, -1148, -1148, -1148,   334,   680,   681,   269,   682,
     683,   684, -1148, -1148, -1148, -1148,     0, -1148,     0,   336,
   -1148,   270,     0,   337,   338,   339,   340,   341,   342,   343,
     344,    46,    47,   271,   272,   273,   274,   221,   222,   345,
     346,   275,   276,    56,   347,     0,     0,   348,     0,   349,
     685,     0, -1148, -1148,   277,     0,   686,   350,   351,     0,
     352,   353,   354,   355, -1196,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1196,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1196,    35, -1196, -1196, -1196, -1196,
     334,   680,   681,   269,   682,   683,   684, -1196, -1196, -1196,
   -1196,     0, -1196,     0,   336, -1196,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1196, -1196,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1200,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,     0,     0,   330,   267, -1200,
       0,     0,   331,   332,   333,    31,    32,     0,     0, -1200,
      35, -1200, -1200, -1200, -1200,   334,   680,   681,   269,   682,
     683,   684, -1200, -1200, -1200, -1200,     0, -1200,     0,   336,
   -1200,   270,     0,   337,   338,   339,   340,   341,   342,   343,
     344,    46,    47,   271,   272,   273,   274,   221,   222,   345,
     346,   275,   276,    56,   347,     0,     0,   348,     0,   349,
     685,     0, -1200, -1200,   277,     0,   686,   350,   351,     0,
     352,   353,   354,   355, -1197,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
       0,     0,   330,   267, -1197,     0,     0,   331,   332,   333,
      31,    32,     0,     0, -1197,    35, -1197, -1197, -1197, -1197,
     334,   680,   681,   269,   682,   683,   684, -1197, -1197, -1197,
   -1197,     0, -1197,     0,   336, -1197,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,   275,   276,    56,   347,
       0,     0,   348,     0,   349,   685,     0, -1197, -1197,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355, -1201,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,     0,     0,   330,   267, -1201,
       0,     0,   331,   332,   333,    31,    32,     0,     0, -1201,
      35, -1201, -1201, -1201, -1201,   334,   680,   681,   269,   682,
     683,   684, -1201, -1201, -1201, -1201,     0, -1201,     0,   336,
   -1201,   270,     0,   337,   338,   339,   340,   341,   342,   343,
     344,    46,    47,   271,   272,   273,   274,   221,   222,   345,
     346,   275,   276,    56,   347,     0,     0,   348,     0,   349,
     685,     0, -1201, -1201,   277,     0,   686,   350,   351,     0,
     352,   353,   354,   355, -1192,   660,     0, -1192, -1192, -1192,
   -1192,     0, -1192, -1192,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,     0, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
       0,     0, -1192, -1192, -1192,     0,     0, -1192, -1192, -1192,
   -1192, -1192,     0,     0, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192,     0, -1192,     0, -1192, -1192, -1192,     0, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
       0,     0, -1192,     0, -1192,   661,     0, -1192, -1192, -1192,
       0, -1192, -1192, -1192,     0, -1192, -1192, -1192, -1192, -1193,
     660,     0, -1193, -1193, -1193, -1193,     0, -1193, -1193,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193,     0,     0, -1193, -1193, -1193,
       0,     0, -1193, -1193, -1193, -1193, -1193,     0,     0, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193,     0, -1193,     0, -1193,
   -1193, -1193,     0, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193,     0,     0, -1193,     0, -1193,
     661,     0, -1193, -1193, -1193,     0, -1193, -1193, -1193,     0,
   -1193, -1193, -1193, -1193, -1022,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1022, -1022, -1022, -1022, -1022, -1022, -1022,
   -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022,
   -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022,     0, -1022,
   -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022,
       0,     0,   330, -1022, -1022,     0,     0,   331,   332,   333,
   -1022, -1022,     0,     0, -1022, -1022, -1022, -1022, -1022, -1022,
     334,   335, -1022, -1022, -1022, -1022, -1022, -1022, -1022, -1022,
   -1022,     0, -1022,     0,   336, -1022, -1022,     0,   337,   338,
     339,   340,   341,   342,   343,   344, -1022, -1022, -1022, -1022,
   -1022, -1022, -1022, -1022,   345,   346, -1022, -1022, -1022,   347,
       0,     0,   348,     0,   349, -1022,     0,  1864,  1865,  1069,
       0, -1022,   350,   351,     0,   352,   353,   354,   355, -1152,
     660,     0, -1152, -1152, -1152, -1152,     0, -1152, -1152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152,     0, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152,     0,     0, -1152, -1152, -1152,
       0,     0, -1152, -1152, -1152, -1152, -1152,     0,     0, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152,     0, -1152,     0, -1152,
   -1152, -1152,     0, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152,     0,     0, -1152,     0, -1152,
     661,     0, -1152, -1152, -1152,     0, -1152, -1152, -1152,     0,
   -1152, -1152, -1152, -1152, -1153,   660,     0, -1153, -1153, -1153,
   -1153,     0, -1153, -1153,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,     0, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
       0,     0, -1153, -1153, -1153,     0,     0, -1153, -1153, -1153,
   -1153, -1153,     0,     0, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153,     0, -1153,     0, -1153, -1153, -1153,     0, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
       0,     0, -1153,     0, -1153,   661,     0, -1153, -1153, -1153,
       0, -1153, -1153, -1153,     0, -1153, -1153, -1153, -1153, -1149,
     660,     0, -1149, -1149, -1149, -1149,     0, -1149, -1149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149,     0, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149,     0,     0, -1149, -1149, -1149,
       0,     0, -1149, -1149, -1149, -1149, -1149,     0,     0, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149,     0, -1149,     0, -1149,
   -1149, -1149,     0, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149,     0,     0, -1149,     0, -1149,
     661,     0, -1149, -1149, -1149,     0, -1149, -1149, -1149,     0,
   -1149, -1149, -1149, -1149, -1024,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,     0, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
       0,     0,   330, -1024, -1024,     0,     0,   331,   332,   333,
   -1024, -1024,     0,     0, -1024, -1024, -1024, -1024, -1024, -1024,
     334,   335, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024,     0, -1024,     0,   336, -1024, -1024,     0,   337,   338,
     339,   340,   341,   342,   343,   344, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024,   345,   346, -1024, -1024, -1024,   347,
       0,     0,   348,     0,   349, -1024,     0, -1024,  2039,  1069,
       0, -1024,   350,   351,     0,   352,   353,   354,   355, -1016,
    2042,     0, -1016, -1016, -1016, -1016,     0, -1016, -1016,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016,     0, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016,     0,     0, -1016, -1016, -1016,
       0,     0, -1016, -1016, -1016, -1016, -1016,     0,     0, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016,     0, -1016,     0, -1016,
   -1016, -1016,     0, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016,     0,     0, -1016,     0, -1016,
   -1016,     0, -1016, -1016, -1016,     0, -1016, -1016, -1016,     0,
   -1016, -1016, -1016, -1016, -1150,   660,     0, -1150, -1150, -1150,
   -1150,     0, -1150, -1150,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,     0, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
       0,     0, -1150, -1150, -1150,     0,     0, -1150, -1150, -1150,
   -1150, -1150,     0,     0, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150,     0, -1150,     0, -1150, -1150, -1150,     0, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
       0,     0, -1150,     0, -1150,   661,     0, -1150, -1150, -1150,
       0, -1150, -1150, -1150,     0, -1150, -1150, -1150, -1150, -1151,
     660,     0, -1151, -1151, -1151, -1151,     0, -1151, -1151,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151,     0, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151,     0,     0, -1151, -1151, -1151,
       0,     0, -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151,     0, -1151,     0, -1151,
   -1151, -1151,     0, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,     0, -1151,
     661,     0, -1151, -1151, -1151,     0, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1241,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,     0, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
       0,     0,   330, -1241, -1241,     0,     0,   331,   332,   333,
   -1241, -1241,     0,     0, -1241, -1241, -1241, -1241, -1241, -1241,
     334,   335, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241,     0, -1241,     0,   336, -1241, -1241,     0,   337,   338,
     339,   340,   341,   342,   343,   344, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241,   345,   346, -1241, -1241, -1241,   347,
       0,     0,   348,     0,   349, -1241,     0, -1241, -1241, -1241,
       0, -1241,   350,   351,     0,   352,   353,   354,   355, -1017,
    2121,     0, -1017, -1017, -1017, -1017,     0, -1017, -1017,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017,     0, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017,     0,     0, -1017, -1017, -1017,
       0,     0, -1017, -1017, -1017, -1017, -1017,     0,     0, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017,     0, -1017,     0, -1017,
   -1017, -1017,     0, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017,     0,     0, -1017,     0, -1017,
   -1017,     0, -1017, -1017, -1017,     0, -1017, -1017, -1017,     0,
   -1017, -1017, -1017, -1017,  -917,   622,     0,  -917,  -917,  -917,
    -917,     0,  -917,  -917,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,     0,     0,
    -917,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -917,  -917,  -917,     0,     0,  -917,  -917,  -917,
    -917,  -917,     0,     0,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,     0,     0,  -917,  -917,  -917,
    -917,     0,  -917,     0,  -917,  -917,  -917,     0,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,     0,     0,  -917,  -917,
       0,     0,  -917,   896,  -917,  -917,     0,   624,  -917,  -917,
       0,     0,  -917,  -917,     0,  -917,  -917,  -917,  -917,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,   669,   670,   671,   672,   673,   674,   675,
     676,   677,   678,   679,     0,     0,   330,   267,     0,     0,
       0,   331,   332,   333,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   334,   680,   681,   269,   682,   683,
     684,     0,     0,     0,     0,     0,     0,     0,   336,     0,
     270,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,   271,   272,   273,   274,   221,   222,   345,   346,
     275,   276,    56,   347,     0,     0,   348,     0,   349,   685,
       0,     0,     0,   277,     0,   686,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    21,
      22,   265,   266,    25,    26,    27,     0,  1171,  1172,  1173,
     672,  1174,  1175,  1176,  1177,   677,   678,  1178,     0,     0,
     330,   267,     0,     0,     0,   331,   332,   333,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   334,   680,
     681,   269,   682,   683,   684,     0,     0,     0,     0,     0,
       0,     0,   336,     0,   270,     0,   337,   338,   339,   340,
     341,   342,   343,   344,    46,    47,   271,   272,   273,   274,
     221,   222,   345,   346,   275,   276,    56,   347,     0,     0,
     348,     0,   349,   685,     0,     0,     0,   277,     0,   686,
     350,   351,     0,   352,   353,   354,   355,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    21,    22,   265,   266,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   267,     0,     0,     0,   331,
     332,   333,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   334,   680,    41,   269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,   270,     0,
     337,   338,   339,   340,   341,   342,   343,   344,    46,    47,
     271,   272,   273,   274,   221,   222,   345,   346,     0,     0,
      56,   347,     0,     0,   348,     0,   349,  1039,     0,  1040,
    1041,   779,     0,     0,   350,   351,     0,   352,   353,   354,
     355,  1293,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,   267,
       0,     0,     0,   331,   332,   333,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   334,   680,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,   270,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,   271,   272,   273,   274,   221,   222,
     345,   346,     0,     0,    56,   347,     0,     0,   348,     0,
     349,  1039,     0,  1040,  -110,   779,     0,     0,   350,   351,
       0,   352,   353,   354,   355,  1300,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   267,     0,     0,     0,   331,   332,   333,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     334,   680,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,     0,     0,    56,   347,
       0,     0,   348,     0,   349,  1039,     0,  1040,   -98,   779,
       0,     0,   350,   351,     0,   352,   353,   354,   355,  1304,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,   267,     0,     0,
       0,   331,   332,   333,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   334,   680,    41,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
     270,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,   271,   272,   273,   274,   221,   222,   345,   346,
       0,     0,    56,   347,     0,     0,   348,     0,   349,  1039,
       0,  1040,  -102,   779,     0,     0,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    21,
      22,   265,   266,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,   267,     0,     0,     0,   331,   332,   333,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   334,   680,
      41,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,   270,     0,   337,   338,   339,   340,
     341,   342,   343,   344,    46,    47,   271,   272,   273,   274,
     221,   222,   345,   346,     0,     0,    56,   347,     0,     0,
     348,     0,   349,  1576,     0,  1040,   -65,   779,     0,     0,
     350,   351,     0,   352,   353,   354,   355,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    21,    22,   265,   266,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   267,     0,     0,     0,   331,
     332,   333,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   334,   680,    41,   269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,   270,     0,
     337,   338,   339,   340,   341,   342,   343,   344,    46,    47,
     271,   272,   273,   274,   221,   222,   345,   346,     0,     0,
      56,   347,     0,     0,   348,     0,   349,  1585,     0,  1040,
    1586,   779,     0,     0,   350,   351,     0,   352,   353,   354,
     355,  1645,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,   267,
       0,     0,     0,   331,   332,   333,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   334,   680,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,   270,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,   271,   272,   273,   274,   221,   222,
     345,   346,     0,     0,    56,   347,     0,     0,   348,     0,
     349,  1039,     0,  1040,   -81,   779,     0,     0,   350,   351,
       0,   352,   353,   354,   355,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   267,     0,     0,     0,   331,   332,   333,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     334,   680,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,     0,     0,    56,   347,
       0,     0,   348,     0,   349,  1585,     0,  1040,  -107,   779,
       0,     0,   350,   351,     0,   352,   353,   354,   355,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,   267,     0,     0,
       0,   331,   332,   333,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   334,   680,    41,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
     270,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,   271,   272,   273,   274,   221,   222,   345,   346,
       0,     0,    56,   347,     0,     0,   348,     0,   349,  1585,
       0,  1040,   -97,   779,     0,     0,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    21,
      22,   265,   266,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,   267,     0,     0,     0,   331,   332,   333,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   334,   680,
      41,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,   270,     0,   337,   338,   339,   340,
     341,   342,   343,   344,    46,    47,   271,   272,   273,   274,
     221,   222,   345,   346,     0,     0,    56,   347,     0,     0,
     348,     0,   349,  1585,     0,  1040,  -101,   779,     0,     0,
     350,   351,     0,   352,   353,   354,   355,  1823,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    21,    22,   265,   266,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   267,     0,     0,     0,   331,
     332,   333,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   334,   680,    41,   269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,   270,     0,
     337,   338,   339,   340,   341,   342,   343,   344,    46,    47,
     271,   272,   273,   274,   221,   222,   345,   346,     0,     0,
      56,   347,     0,     0,   348,     0,   349,  1039,     0,  1040,
     -88,   779,     0,     0,   350,   351,     0,   352,   353,   354,
     355,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,   267,
       0,     0,     0,   331,   332,   333,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   334,   680,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,   270,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,   271,   272,   273,   274,   221,   222,
     345,   346,     0,     0,    56,   347,     0,     0,   348,     0,
     349,  1585,     0,  1040,   -78,   779,     0,     0,   350,   351,
       0,   352,   353,   354,   355,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   267,     0,     0,     0,   331,   332,   333,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     334,   680,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,   270,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,   271,   272,
     273,   274,   221,   222,   345,   346,     0,     0,    56,   347,
       0,     0,   348,     0,   349,  1585,     0,  1040,   -85,   779,
       0,     0,   350,   351,     0,   352,   353,   354,   355,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,     0,     0,
       0,   331,   332,   333,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,   334,   445,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
      43,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,    48,    49,    50,    51,   221,   222,   345,   346,
       0,     0,    56,   347,     0,     0,   348,   325,   349,     1,
     326,   113,   327,     0,   328,   329,   350,   351,     0,   352,
     353,   354,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   914,    30,     0,     0,     0,   331,
     332,   333,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,   334,   445,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,    43,     0,
     337,   338,   339,   340,   341,   342,   343,   344,    46,    47,
      48,    49,    50,    51,   221,   222,   345,   346,     0,     0,
      56,   347,     0,     0,   348,   325,   349,     1,   326,   113,
     327,     0,   328,   329,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,     0,     0,     0,   331,   332,   333,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
     334,   445,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,    43,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,    48,    49,
      50,    51,     0,     0,   345,   346,     0,     0,    56,   347,
       0,     0,   348,   769,   349,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,   352,   353,   354,   355,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1239,    30,     0,     0,
       0,   331,   332,   333,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,   334,   445,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
      43,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,    48,    49,    50,    51,     0,     0,   345,   346,
       0,     0,    56,   347,     0,     0,   348,   769,   349,     0,
       0,     0,     0,     0,     0,     0,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,     0,     0,     0,   331,   332,   333,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,   334,   445,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,    43,     0,   337,   338,   339,   340,
     341,   342,   343,   344,    46,    47,    48,    49,    50,    51,
       0,     0,   345,   346,     0,     0,    56,   347,     0,     0,
     348,   325,   349,     1,   326,   113,   327,   277,   328,   329,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,   603,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
       0,     0,     0,   331,   332,   333,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,   334,   445,    41,    42,
       0,   325,     0,     1,   326,   113,   327,     0,   328,   329,
     336,     0,    43,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,    48,    49,    50,    51,     2,     0,
     345,   346,     0,     0,    56,   937,     0,     0,   938,   769,
     349,     0,     0,     0,     0,     0,     0,     0,   350,   351,
       0,   352,   353,   354,   355,  1171,  1172,  1173,   672,  1174,
    1175,  1176,  1177,   677,   678,  1178,     0,     0,   330,     0,
       0,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,   334,   335,  1179,     0,
     682,   683,   684,     0,     0,     0,     0,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,    46,    47,     0,     0,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   348,  -454,
     349,   685,     0,  -454,     0,   277,     0,   686,   350,   351,
       0,   352,   353,   354,   355,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1171,
    1172,  1173,   672,  1174,  1175,  1176,  1177,   677,   678,  1178,
       0,     0,   330,     0,     0,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
     334,   335,  1179,     0,   682,   683,   684,     0,     0,     0,
       0,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,    46,    47,     0,     0,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,   882,   349,   685,     0,   883,     0,   277,
       0,   686,   350,   351,     0,   352,   353,   354,   355,  1899,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1171,  1172,  1173,   672,  1174,  1175,  1176,
    1177,   677,   678,  1178,     0,     0,   330,     0,     0,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,   334,   335,  1179,     0,   682,   683,
     684,     0,     0,     0,     0,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
      46,    47,     0,     0,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,     0,   349,   685,
       0,     0,     0,   277,     0,   686,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   669,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,     0,     0,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,   334,   335,
    1179,     0,   682,   683,   684,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,    46,    47,     0,     0,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,     0,   349,   685,     0,     0,     0,   277,     0,   686,
     350,   351,     0,   352,   353,   354,   355,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1919,     0,     1,   326,
     113,   327,     0,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     0,     0,   330,     0,     0,   345,   346,   331,   332,
     333,   347,     0,     0,   348,   882,   349,  1689,     0,   883,
       0,   334,   335,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       0,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,   882,   349,  1920,     0,   883,     0,
       0,     0,     0,   350,   351,     0,   352,   353,   354,   355,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2063,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     0,     0,   330,     0,     0,   345,
     346,   331,   332,   333,   347,     0,     0,   348,   882,   349,
    1920,     0,   883,     0,   334,   335,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,   882,   349,  1920,
       0,   883,     0,     0,     0,     0,   350,   351,     0,   352,
     353,   354,   355,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,     0,   349,     0,     0,  2119,  2120,  1069,     0,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,  2131,   349,
    2132,     0,  1207,     0,     0,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,   325,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     2,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,   882,   349,  2130,     0,   883,
       0,     0,     0,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   330,     0,     0,     0,     0,   331,   332,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     335,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     2,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,     0,   349,     0,     0,  2224,  2225,  1069,     0,
       0,   350,   351,     0,   352,   353,   354,   355,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,     0,
       0,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,   325,     0,
       1,   326,   113,   327,     0,   328,   329,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,     0,     0,     0,     2,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   348,     0,
     349,     0,     0,     0,     0,   779,     0,     0,   350,   351,
     780,   352,   353,   354,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,     0,     0,     0,     0,
     331,   332,   333,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   334,   335,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     2,     0,     0,     0,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,   877,   349,     0,     0,
     878,     0,     0,     0,     0,   350,   351,     0,   352,   353,
     354,   355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,     0,     0,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,   882,   349,     0,     0,   883,     0,     0,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
       0,     0,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     2,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
    1309,   349,     0,     0,     0,     0,   779,     0,     0,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   334,   335,   325,     0,     1,   326,
     113,   327,     0,   328,   329,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     2,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,  1376,   349,     0,
       0,     0,     0,   779,     0,     0,   350,   351,     0,   352,
     353,   354,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,     0,     0,     0,     0,   331,   332,
     333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   334,   335,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       2,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,  1643,   349,     0,     0,  1644,     0,
       0,     0,     0,   350,   351,     0,   352,   353,   354,   355,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
    1678,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,     0,   349,  1189,     0,     0,     0,   779,     0,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,  1679,   349,
    1680,     0,     0,     0,     0,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,   325,     0,
       1,   326,   113,   327,   330,   328,   329,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,   330,   349,  1688,     0,  1207,
     331,   332,   333,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,   334,   335,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     2,     0,     0,     0,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,  1742,   349,     0,     0,
    1207,     0,     0,     0,     0,   350,   351,     0,   352,   353,
     354,   355,     0,     0,     0,     0,   325,     0,     1,   326,
     113,   327,   330,   328,   329,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     334,   335,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     0,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,   330,   349,     0,     0,  1207,   331,   332,
     333,     0,   350,   351,  1772,   352,   353,   354,   355,     0,
       0,   334,   335,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       2,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,     0,   349,     0,     0,  1775,     0,
       0,     0,  1776,   350,   351,     0,   352,   353,   354,   355,
       0,     0,     0,     0,   325,     0,     1,   326,   113,   327,
     330,   328,   329,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,   330,   349,     0,     0,  1207,   331,   332,   333,     0,
     350,   351,  1782,   352,   353,   354,   355,     0,     0,   334,
     335,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     2,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,     0,   349,     0,     0,  1775,     0,     0,     0,
    1784,   350,   351,     0,   352,   353,   354,   355,     0,     0,
       0,     0,   325,     0,     1,   326,   113,   327,   330,   328,
     329,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   348,   330,
     349,     0,     0,  1775,   331,   332,   333,  1797,   350,   351,
       0,   352,   353,   354,   355,     0,     0,   334,   335,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     2,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
       0,   349,     0,     0,  1775,     0,     0,     0,  1801,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   334,   335,   325,     0,     1,   326,
     113,   327,     0,   328,   329,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     2,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,  1895,   349,     0,
       0,  1207,     0,     0,     0,     0,   350,   351,     0,   352,
     353,   354,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,     0,     0,     0,     0,   331,   332,
     333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   334,   335,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       2,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,  1897,   349,     0,     0,  1207,     0,
       0,     0,     0,   350,   351,     0,   352,   353,   354,   355,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,  1898,   349,     0,     0,   883,     0,     0,     0,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,  1901,   349,
       0,     0,  1207,     0,     0,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,   325,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     2,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,  1679,   349,  1680,     0,     0,
       0,     0,     0,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,  1921,     0,     1,   326,   113,
     327,   330,   328,   329,     0,     0,   331,   332,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     335,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,   330,   349,  1918,     0,  1207,   331,   332,   333,
       0,   350,   351,     0,   352,   353,   354,   355,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,  1922,   349,  1680,     0,     0,     0,     0,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
       0,     0,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     2,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
    2047,   349,     0,     0,  1207,     0,     0,     0,     0,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   334,   335,   325,     0,     1,   326,
     113,   327,     0,   328,   329,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     2,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,  1896,   349,     0,
       0,   883,     0,     0,     0,     0,   350,   351,     0,   352,
     353,   354,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,     0,     0,     0,     0,   331,   332,
     333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   334,   335,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       2,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,  2055,   349,     0,     0,  1207,     0,
       0,     0,     0,   350,   351,     0,   352,   353,   354,   355,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,     0,     0,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,  1922,   349,  1680,     0,     0,     0,     0,     0,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,  2135,   349,
       0,     0,  1207,     0,     0,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,   325,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     2,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,     0,   349,     0,     0,     0,
    2163,  1069,     0,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   330,     0,     0,     0,     0,   331,   332,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     335,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     2,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,     0,   349,     0,     0,     0,  2165,  1069,     0,
       0,   350,   351,     0,   352,   353,   354,   355,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,     0,
       0,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,   325,     0,
       1,   326,   113,   327,     0,   328,   329,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,     0,     0,     0,     2,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   348,  2168,
     349,     0,     0,  1207,     0,     0,     0,     0,   350,   351,
       0,   352,   353,   354,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,     0,     0,     0,     0,
     331,   332,   333,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   334,   335,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     2,     0,     0,     0,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,  2169,   349,     0,     0,
    1207,     0,     0,     0,     0,   350,   351,     0,   352,   353,
     354,   355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,     0,     0,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,  2198,   349,     0,     0,  1207,     0,     0,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
       0,     0,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     2,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
       0,   349,     0,     0,     0,  2232,  1069,     0,     0,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
     325,     0,     1,   326,   113,   327,   330,   328,   329,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   334,   335,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,   330,   349,     0,
       0,     0,   331,   332,   333,     0,   350,   351,   588,   352,
     353,   354,   355,     0,     0,   334,   335,   325,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,     0,   349,
       0,     0,     0,     0,   779,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,   325,     0,
       1,   326,   113,   327,   330,   328,   329,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     0,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,   330,   349,     0,     0,     0,
     331,   332,   333,     0,   350,   351,   888,   352,   353,   354,
     355,     0,     0,   334,   335,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     2,     0,     0,     0,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,     0,   349,     0,     0,
       0,     0,     0,     0,     0,   350,   351,   892,   352,   353,
     354,   355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,     0,     0,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,     0,   349,     0,     0,     0,     0,  1069,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,   325,     0,     1,   326,   113,   327,   330,
     328,   329,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
     330,   349,     0,     0,     0,   331,   332,   333,     0,   350,
     351,  1110,   352,   353,   354,   355,     0,     0,   334,   335,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,     0,   349,     0,     0,     0,     0,     0,     0,  1163,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,  1520,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,   769,   349,
       0,     0,     0,     0,     0,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,   325,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     2,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,     0,   349,     0,     0,     0,
       0,   779,     0,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,   325,     0,     1,   326,   113,
     327,   330,   328,   329,     0,     0,   331,   332,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     335,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     0,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,   330,   349,     0,     0,     0,   331,   332,   333,
       0,   350,   351,  1624,   352,   353,   354,   355,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,   348,  1662,   349,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,   325,     0,     1,   326,   113,   327,   330,
     328,   329,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
     330,   349,     0,     0,     0,   331,   332,   333,  1665,   350,
     351,     0,   352,   353,   354,   355,     0,     0,   334,   335,
     325,     0,     1,   326,   113,   327,     0,   328,   329,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     2,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,     0,   349,     0,     0,     0,     0,  1758,     0,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,     0,     0,
       0,     0,   331,   332,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   334,   335,  1854,     0,     1,
     326,   113,   327,     0,   328,   329,     0,     0,     0,   336,
       0,     0,     0,   337,   338,   339,   340,   341,   342,   343,
     344,     0,     0,     0,     2,     0,     0,     0,     0,   345,
     346,     0,     0,     0,   347,     0,     0,   348,     0,   349,
       0,     0,     0,     0,  1853,     0,     0,   350,   351,     0,
     352,   353,   354,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,     0,     0,     0,     0,   331,
     332,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   334,   335,  1857,     0,     1,   326,   113,   327,
       0,   328,   329,     0,     0,     0,   336,     0,     0,     0,
     337,   338,   339,   340,   341,   342,   343,   344,     0,     0,
       0,     2,     0,     0,     0,     0,   345,   346,     0,     0,
       0,   347,     0,     0,   348,     0,   349,     0,     0,     0,
       0,   779,     0,     0,   350,   351,     0,   352,   353,   354,
     355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   330,     0,     0,     0,     0,   331,   332,   333,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     335,  1861,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     2,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   348,     0,   349,     0,     0,     0,     0,   779,     0,
       0,   350,   351,     0,   352,   353,   354,   355,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,     0,
       0,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,   325,     0,
       1,   326,   113,   327,     0,   328,   329,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,     0,     0,     0,     2,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   348,     0,
     349,     0,     0,     0,     0,   779,     0,     0,   350,   351,
       0,   352,   353,   354,   355,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,     0,     0,     0,     0,
     331,   332,   333,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   334,   335,   325,     0,     1,   326,   113,
     327,     0,   328,   329,     0,     0,     0,   336,     0,     0,
       0,   337,   338,   339,   340,   341,   342,   343,   344,     0,
       0,     0,     2,     0,     0,     0,     0,   345,   346,     0,
       0,     0,   347,     0,     0,   348,  1908,   349,     0,     0,
       0,     0,     0,     0,     0,   350,   351,     0,   352,   353,
     354,   355,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,     0,     0,     0,     0,   331,   332,   333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     334,   335,   325,     0,     1,   326,   113,   327,     0,   328,
     329,     0,     0,     0,   336,     0,     0,     0,   337,   338,
     339,   340,   341,   342,   343,   344,     0,     0,     0,     2,
       0,     0,     0,     0,   345,   346,     0,     0,     0,   347,
       0,     0,  1960,     0,   349,     0,     0,     0,     0,  1853,
       0,     0,   350,   351,     0,   352,   353,   354,   355,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
       0,     0,     0,     0,   331,   332,   333,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   334,   335,   325,
       0,     1,   326,   113,   327,     0,   328,   329,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     2,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   348,
    2064,   349,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
       0,   331,   332,   333,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   334,   335,   325,     0,     1,   326,
     113,   327,     0,   328,   329,     0,     0,     0,   336,     0,
       0,     0,   337,   338,   339,   340,   341,   342,   343,   344,
       0,     0,     0,     2,     0,     0,     0,     0,   345,   346,
       0,     0,     0,   347,     0,     0,   348,  2126,   349,     0,
       0,     0,     0,     0,     0,     0,   350,   351,     0,   352,
     353,   354,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,     0,     0,     0,     0,   331,   332,
     333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   334,   335,   325,     0,     1,   326,   113,   327,     0,
     328,   329,     0,     0,     0,   336,     0,     0,     0,   337,
     338,   339,   340,   341,   342,   343,   344,     0,     0,     0,
       2,     0,     0,     0,     0,   345,   346,     0,     0,     0,
     347,     0,     0,   348,     0,   349,     0,     0,     0,     0,
    2194,     0,     0,   350,   351,     0,   352,   353,   354,   355,
       0,     0,     0,     0,   325,     0,     1,   326,   113,   327,
     330,   328,   329,     0,     0,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   334,   335,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   336,     0,     0,     0,   337,   338,   339,   340,
     341,   342,   343,   344,     0,     0,     0,     0,     0,     0,
       0,     0,   345,   346,     0,     0,     0,   347,     0,     0,
     348,   330,   349,     0,     0,     0,   331,   332,   333,     0,
     350,   351,     0,   352,   353,   354,   355,     0,     0,   334,
     335,   325,     0,     1,   326,   113,   327,     0,   328,   329,
       0,     0,     0,   336,     0,     0,     0,   337,   338,   339,
     340,   341,   342,   343,   344,     0,     0,     0,     2,     0,
       0,     0,     0,   345,   346,     0,     0,     0,   347,     0,
       0,   739,     0,   349,     0,     0,     0,     0,     0,     0,
       0,   350,   351,     0,   352,   353,   354,   355,     0,     0,
       0,     0,   325,     0,     1,   326,   113,   327,   330,   328,
     329,     0,     0,   331,   332,   333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   334,   335,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     336,     0,     0,     0,   337,   338,   339,   340,   341,   342,
     343,   344,     0,     0,     0,     0,     0,     0,     0,     0,
     345,   346,     0,     0,     0,   347,     0,     0,   742,   330,
     349,     0,     0,     0,   331,   332,   333,     0,   350,   351,
       0,   352,   353,   354,   355,     0,     0,   334,   335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   336,     0,     0,     0,   337,   338,   339,   340,   341,
     342,   343,   344,     0,     0,     0,     0,     0,     0,     0,
       0,   345,   346,     0,     0,     0,   347,     0,     0,   765,
       0,   349,  -905,   622,     0,  -905,  -905,  -905,     0,   350,
     351,     0,   352,   353,   354,   355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,  -905,  -905,  -905,     0,     0,  -905,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -905,  -905,  -905,     0,     0,  -905,  -905,     0,  -905,  -905,
       0,     0,  -905,  -905,  -905,  -905,  -905,  -905,     0,  -905,
    -905,  -905,  -905,     0,     0,  -905,  -905,  -905,  -905,     0,
    -905,     0,  -905,  -905,  -905,     0,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,     0,  -905,  -905,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,     0,     0,     0,  -905,  -905,     0,     0,
    -905,   623,  -905,  -905,     0,   624,  -905,     0,     0,     0,
    -905,  -905,  -189,   955,     0,  -189,  -189,  -189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -189,  -189,  -189,     0,     0,  -189,  -189,     0,  -189,  -189,
       0,     0,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,     0,
    -189,     0,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,     0,     0,     0,  -189,  -189,     0,     0,
    -189,     0,  -189,   956,     0,   957,  -189,     0,     0,     0,
    -189,  -189,  -253,   969,     0,     1,   326,   113,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,  -253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,  -251,   972,  -253,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
    -251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,  -254,   969,  -251,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,  -254,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,  -252,   972,
    -254,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,  -252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   460,  -252,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   526,   476,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   548,   527,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   553,   549,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   557,
     554,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   969,   558,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   972,  -760,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   969,  -761,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   972,  -757,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   969,
    -758,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   972,  -763,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,  1092,  -764,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,  1096,  1093,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   325,  1097,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   969,
    -653,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   972,  -740,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   969,  -741,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   972,  -743,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,  1606,  -744,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   969,
    1607,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   972,  -648,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   969,  -649,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   972,  -746,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   325,  -747,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   325,
    -652,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   325,  -650,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   325,  -628,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   969,  -627,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   972,  -641,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   325,
    -642,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   969,  -651,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   972,  -637,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   969,  -638,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   972,  -625,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,     0,   969,
    -626,     1,   326,   113,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,    30,   461,     0,
       0,   331,   332,     0,    31,    32,     0,     0,   462,    35,
     463,   464,    38,    39,     0,   445,    41,    42,   465,     0,
       0,   466,   467,   468,   469,     0,   470,     0,   471,   472,
      43,     0,   337,   338,   339,   340,   341,   342,   343,     0,
      46,    47,    48,    49,    50,    51,   221,   222,   345,     0,
       0,     0,    56,    57,     0,     0,   473,     0,   474,   475,
       0,   972,  -620,     1,   326,   113,   350,   351,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,    30,
     461,     0,     0,   331,   332,     0,    31,    32,     0,     0,
     462,    35,   463,   464,    38,    39,     0,   445,    41,    42,
     465,     0,     0,   466,   467,   468,   469,     0,   470,     0,
     471,   472,    43,     0,   337,   338,   339,   340,   341,   342,
     343,     0,    46,    47,    48,    49,    50,    51,   221,   222,
     345,     0,     0,     0,    56,    57,     0,     0,   473,     0,
     474,   475,     0,   969,  -621,     1,   326,   113,   350,   351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   215,   216,   217,   218,   219,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,    30,   461,     0,     0,   331,   332,     0,    31,    32,
       0,     0,   462,    35,   463,   464,    38,    39,     0,   445,
      41,    42,   465,     0,     0,   466,   467,   468,   469,     0,
     470,     0,   471,   472,    43,     0,   337,   338,   339,   340,
     341,   342,   343,     0,    46,    47,    48,    49,    50,    51,
     221,   222,   345,     0,     0,     0,    56,    57,     0,     0,
     473,     0,   474,   475,     0,   972,  -639,     1,   326,   113,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,    30,   461,     0,     0,   331,   332,     0,
      31,    32,     0,     0,   462,    35,   463,   464,    38,    39,
       0,   445,    41,    42,   465,     0,     0,   466,   467,   468,
     469,     0,   470,     0,   471,   472,    43,     0,   337,   338,
     339,   340,   341,   342,   343,     0,    46,    47,    48,    49,
      50,    51,   221,   222,   345,     0,     0,     0,    56,    57,
       0,     0,   473,     0,   474,   475,     0,   460,  -640,     1,
     326,   113,   350,   351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,    30,   461,     0,     0,   331,
     332,     0,    31,    32,     0,     0,   462,    35,   463,   464,
      38,    39,     0,   445,    41,    42,   465,     0,     0,   466,
     467,   468,   469,     0,   470,     0,   471,   472,    43,     0,
     337,   338,   339,   340,   341,   342,   343,     0,    46,    47,
      48,    49,    50,    51,   221,   222,   345,     0,     0,     0,
      56,    57,     0,     0,   473,     0,   474,   475,   526,     0,
       1,   326,   113,     0,   350,   351,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   215,   216,   217,   218,
     219,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,    30,   461,     0,     0,
     331,   332,     0,    31,    32,     0,     0,   462,    35,   463,
     464,    38,    39,     0,   445,    41,    42,   465,     0,     0,
     466,   467,   468,   469,     0,   470,     0,   471,   472,    43,
       0,   337,   338,   339,   340,   341,   342,   343,     0,    46,
      47,    48,    49,    50,    51,   221,   222,   345,   214,     0,
       1,    56,    57,     0,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   350,   351,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   215,   216,   217,   218,
     219,     8,     9,    10,   603,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   221,   222,   214,     0,     1,
       0,    56,    57,     0,     0,   604,  1101,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   605,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   221,   222,     1,     0,     0,     0,
      56,    57,     0,     0,   910,  1101,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   605,     0,     0,     0,     0,
       0,     2,   215,   216,   217,   218,   219,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   221,   222,     1,     0,     0,     0,    56,    57,     0,
       0,   910,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   605,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   268,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,   271,   272,   273,   274,   221,   222,
       1,     0,     0,     0,    56,    57,     0,     0,   910,     0,
       0,     0,     0,     0,     0,  1502,     0,     0,     0,   605,
       0,     0,     0,     0,     0,     2,   215,   216,   217,   218,
     219,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    21,    22,   265,   266,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   267,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,     0,   268,    41,   269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   271,   272,   273,   274,   221,   222,     1,     0,     0,
       0,    56,    57,     0,     0,  1251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1252,     0,     0,     0,
       0,     0,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   267,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
       0,   268,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,   271,   272,
     273,   274,   221,   222,     1,     0,     0,     0,    56,    57,
       0,     0,  1251,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1274,     0,     0,     0,     0,     0,     2,
     215,   216,   217,   218,   219,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    21,    22,
     265,   266,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     267,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   268,    41,
     269,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,   271,   272,   273,   274,   221,
     222,     1,     0,     0,     0,    56,    57,     0,     0,  1251,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1734,     0,     0,     0,     0,     0,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   268,    41,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,     0,     0,     0,     1,     0,     0,
      46,    47,   271,   272,   273,   274,   221,   222,     0,     0,
       0,     0,    56,    57,     0,     0,  1251,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,  1749,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,     1,     0,     0,     0,     0,     0,    56,    57,
       0,     0,   910,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   605,     0,     0,     0,     2,     3,     4,
     296,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,     0,     0,     0,    31,    32,   297,    34,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,    45,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,    52,    53,     1,
       0,     0,     0,    56,    57,     0,     0,    58,     0,     0,
       0,     0,     0,     0,     0,     0,   298,     0,     0,     0,
       0,     0,     0,     0,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,   461,     0,     0,     0,
       0,     0,    31,    32,     0,     0,   462,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   221,   222,     1,     0,     0,     0,
      56,    57,     0,     0,   997,     0,   474,     0,     0,     0,
       0,     0,     0,   998,     0,     0,     0,     0,     0,     0,
       0,     2,   215,   216,   217,   218,   219,     8,     9,    10,
     603,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   221,   222,     1,     0,     0,     0,    56,    57,     0,
       0,   977,     0,     0,     0,     0,     0,     0,     0,     0,
     978,     0,     0,     0,     0,     0,     0,     0,     2,   215,
     216,   217,   218,   219,     8,     9,    10,   603,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,   662,    46,    47,    48,    49,    50,    51,   221,   222,
       0,     0,     0,     0,    56,    57,     0,     0,    58,     0,
       0,     0,     0,     0,     0,     0,     0,   978,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   268,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,     0,     0,     0,  1767,
       0,     0,    46,    47,   271,   272,   273,   274,   221,   222,
       0,     0,   275,   276,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   268,    41,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,     0,     0,  1768,     0,     0,     0,
      46,    47,   271,   272,   273,   274,   221,   222,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -95,     2,   215,   216,   217,   218,   219,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    21,    22,   265,   266,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   267,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,     0,   268,    41,   269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   270,     0,     0,
       0,     0,     0,  1886,     0,     0,     0,    46,    47,   271,
     272,   273,   274,   221,   222,     0,     0,     0,     0,    56,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -96,
       2,   215,   216,   217,   218,   219,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    21,
      22,   265,   266,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   268,
      41,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   270,     0,     0,     0,     0,     0,
    2024,     0,     0,     0,    46,    47,   271,   272,   273,   274,
     221,   222,     0,     0,     0,     0,    56,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -80,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   267,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   268,    41,   269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   270,     0,     0,     0,     0, -1315,   315,     0,     1,
       0,    46,    47,   271,   272,   273,   274,   221,   222,     0,
       0,     0,     0,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -87,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,    35,    36,    37,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,    45,     1,     0,     0,     0,    46,    47,
      48,    49,    50,    51,    52,    53,     0,     0,    54,    55,
      56,    57,     0,     0,    58,     0,     0,    59,     0,     2,
     215,   216,   217,   218,   219,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     867,     1,     0,    46,    47,    48,    49,    50,    51,   221,
     222,     0,     0,     0,     0,    56,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1444,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,   867,     1,     0,
      46,    47,    48,    49,    50,    51,   221,   222,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1794,     2,   215,   216,   217,   218,   219,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,   174,   867,     1,     0,    46,    47,    48,
      49,    50,    51,   221,   222,     0,     0,     0,     0,    56,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1795,
       2,     3,     4,   175,     6,     7,     8,     9,    10,   176,
     177,   178,   179,   180,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,   174,     0,     1,
       0,     0,     0,     0,    46,    47,    48,    49,    50,    51,
      52,    53,     0,     0,     0,     0,    56,    57,     0,     0,
      58,     0,     0,   181,     2,     3,     4,   175,     6,     7,
       8,     9,    10,   176,   177,   178,   179,   180,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,   644,     0,     1,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,    52,    53,     0,     0,     0,     0,
      56,    57,     0,     0,    58,     0,     0,   181,     2,   215,
     216,   217,   218,   219,   252,   253,   254,   645,   646,   647,
     648,   649,   260,   261,   262,   263,   264,    21,    22,   265,
     266,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   268,    41,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   270,     0,     0,  -927,     0,  -927,     0,     0,
       0,     0,    46,    47,   271,   272,   273,   274,   221,   222,
       0,     0,     0,     0,    56,    57,     0,     0,    58,     0,
       0,   650,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -927,     0,     0,     0,     0,     0,     0,
    -927,  -927,     0,     0,     0,  -927,     0,     0,     0,     0,
       0,  -927,  -927,  -927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -927,     0,     0,     0,
       0,     1,     0,     0,     0,     0,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,     0,     0,     0,     0,  -927,  -927,
       0,     0,  -927,     0,     0,  -927,     2,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,    35,
      36,    37,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0, -1316,   307,    45,     1,     0,     0,     0,
      46,    47,    48,    49,    50,    51,    52,    53,     0,     0,
      54,    55,    56,    57,     0,     0,    58,     0,     0,    59,
       0,     2,     3,     4,   175,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,    36,    37,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,   214,     0,     1,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,    52,    53,     0,     0,     0,     0,    56,    57,     0,
       0,    58,     0,     2,   215,   216,   217,   218,   219,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,   214,     0,
       1,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   221,   222,     0,     0,     0,     0,    56,
      57,     0,     0,  1251,  1721,     2,   215,   216,   217,   218,
     219,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
     214,     0,     1,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   221,   222,     0,     0,     0,
       0,    56,     0,     0,     0,     0,   223,     2,   215,   216,
     217,   218,   219,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   220,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,   990,     0,     1,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   221,   222,     0,
       0,     0,     0,    56,     0,     0,     0,     0,   426,     2,
     215,   216,   217,   218,   219,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,  1528,     0,     1,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   221,
     222,     0,     0,     0,     0,    56,     0,     0,     0,     0,
     223,     2,   215,   216,   217,   218,   219,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   220,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,   214,     0,     1,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   221,   222,     0,     0,     0,     0,    56,     0,     0,
       0,     0,   426,     2,   215,   216,   217,   218,   219,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,   214,     0,
       1,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   221,   222,     0,     0,     0,     0,    56,
       0,     0,     0,     0,  1621,     2,   215,   216,   217,   218,
     219,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
     174,     0,     1,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   221,   222,     0,     0,     0,
       0,    56,     0,     0,     0,     0,  1950,     2,     3,     4,
     175,     6,     7,     8,     9,    10,   603,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,   174,     0,     1,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,    52,    53,     0,
       0,     0,     0,    56,    57,     0,     0,    58,     0,     2,
       3,     4,   175,     6,     7,     8,     9,    10,   603,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,   934,     0,     1,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,    52,
      53,     0,     0,     0,     0,    56,    57,     0,     0,    58,
       0,     2,   215,   216,   217,   218,   219,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      21,    22,   265,   266,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   267,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     268,    41,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   270,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    46,    47,   271,   272,   273,
     274,   221,   222,     0,     0,     0,     0,    56,     0,     0,
       0,   935,     2,     3,     4,   175,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,    56,    57,
       0,     0,    58,     2,   215,   216,   217,   218,   219,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   221,   222,     0,     0,     0,     0,    56,
      57,     0,     0,    58,     2,   215,   216,   217,   218,   219,
       8,     9,    10,   603,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   221,   222,     0,     0,     0,     0,
      56,    57,     0,     0,    58,     2,   215,   216,   217,   218,
     219,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   221,   222,     0,     0,     0,
       0,    56,     0,     0,     0,   757,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   221,   222,     0,     0,
       0,     0,    56,     0,     0,     0,  1507,     2,   215,   216,
     217,   218,   219,   252,   253,   254,  1593,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   267,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   268,    41,   269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   270,  1124,     0,     1,     0,     0,     0,     0,     0,
       0,    46,    47,   271,   272,   273,   274,   221,   222,     0,
       0,     0,     0,    56,    57,     0,     0,    58,     0,     2,
     215,   216,   217,   218,   219,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,  1125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,  1130,
       0,     1,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   221,
     222,     0,     0,     0,     0,    56,     2,   215,   216,   217,
     218,   219,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,  1131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,    30,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,    38,    39,     0,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,  1136,     0,     1,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,    48,    49,    50,    51,   221,   222,     0,     0,
       0,     0,    56,     2,   215,   216,   217,   218,   219,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,  1137,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,   919,     0,     1,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   221,   222,     0,     0,     0,     0,    56,
       2,   215,   216,   217,   218,   219,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    21,
      22,   265,   266,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   268,
      41,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,   270,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,    47,   271,   272,   273,   274,
     221,   222,     0,     0,     0,     0,    56,     2,   215,   216,
     217,   218,   219,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,  1085,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   220,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   221,   222,     0,
       0,     0,     0,    56,     2,   215,   216,   217,   218,   219,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    1142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   221,   222,     0,     0,     0,     0,
      56,     2,   215,   216,   217,   218,   219,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   540,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   221,   222,     0,     0,     0,     0,    56,     2,   215,
     216,   217,   218,   219,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,     0,     0,     0,     0,     0,     0,   867,
       0,     0,    46,    47,    48,    49,    50,    51,   221,   222,
       0,     0,     0,     0,    56,     2,   215,   216,   217,   218,
     219,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   221,   222,     0,     0,     0,
       0,    56,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   267,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,   515,   516,     0,     0,
       0,   268,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,   271,   272,
     273,   274,   221,   222,     0,     0,     0,     0,    56,     2,
     215,   216,   217,   218,   219,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   221,
     222,     0,     0,     0,     0,    56,     2,   215,   216,   217,
     218,   219,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    21,    22,   265,   266,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   268,    41,   269,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,    47,   271,   272,   273,   274,   221,   222,     2,     0,
       0,     0,    56,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,     0,     0,
       0,     0,     0,     0,    56,     2,   215,   216,   217,   218,
     219,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    21,    22,   265,   266,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   267,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,     0,   268,    41,   269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   271,   272,   273,   274,   221,   222,     0,     0,     0,
       0,    56,    57,     0,     0,   910,  1718,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   605,     2,   215,   216,
     217,   218,   219,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    21,    22,   265,   266,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   267,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   268,    41,   269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   270,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,   271,   272,   273,   274,   221,   222,     0,
       0,   275,   276,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     2,   215,   216,   217,   218,
     219,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    21,    22,   265,   266,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   267,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,     0,   268,    41,   269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   271,   272,   273,   274,   221,   222,     0,     0,     0,
       0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1582,     2,   215,   216,   217,   218,   219,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    21,    22,   265,   266,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   267,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
       0,   268,    41,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,   271,   272,
     273,   274,   221,   222,     0,     0,   275,   276,    56
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-1871)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,   507,    92,   909,   756,   976,   165,   758,    92,  1261,
      90,   107,    89,  1154,   575,   141,   684,   137,    99,  1051,
     575,  1053,   872,  1008,     1,   779,    89,   507,   976,   909,
     162,   100,   786,    33,    34,   789,    70,   508,   872,   125,
       5,  1052,     5,   145,    44,   100,   153,   137,    89,   107,
     779,  1758,   511,   137,   909,  1672,    17,   786,    58,   166,
     789,   168,     3,   170,   351,    65,     1,  1684,   100,   195,
      70,  1051,    72,  1053,     1,   107,    89,   986,   128,     1,
      65,   137,    89,    76,    77,     5,   153,   100,    88,    89,
      90,   619,    92,   100,   107,   126,     3,    33,    98,   166,
     100,   168,     1,   170,   135,     3,    79,   107,   108,    45,
       1,   111,     3,  1051,  1052,  1053,   126,   198,   199,   128,
     120,    28,   133,   123,     1,   135,     3,   137,   139,     1,
      37,     3,   125,   368,   311,   120,     1,   137,   128,     1,
     140,   141,     3,    17,     5,   145,  1853,     1,   128,   149,
     150,   151,   186,   153,     5,   198,   199,   157,     1,   159,
     137,     3,   162,   163,   137,   165,   166,   167,   168,   368,
     170,   136,     1,   173,  1029,  1051,   139,  1053,   114,   115,
       3,   594,   118,     1,     3,     3,   186,     1,   149,    89,
       1,   926,  1051,     3,  1053,   195,     7,     8,     9,   134,
       1,     5,     1,     1,   131,    28,   133,   134,   288,     1,
     291,   624,   134,   213,   627,   311,   629,   313,   631,     1,
       1,   128,    89,    90,   301,   225,     1,   227,   213,   128,
       3,   129,   139,    75,   311,   235,   236,   323,   301,     3,
       3,     5,     5,   134,   313,     1,   332,   247,   311,   141,
     293,   251,   338,   311,   293,   313,     3,   134,   313,     3,
     301,   929,   134,  1295,    11,  1250,   131,    11,   129,   312,
    1302,   373,   134,   140,  1306,   149,   137,   311,   125,     5,
     134,   313,  2152,  1294,     3,     3,     5,   138,   288,     3,
    1301,   134,   134,   293,  1305,   195,  1913,   297,     3,   458,
     313,   301,     3,   195,   311,   134,   313,   433,   594,    28,
     129,   311,   135,   313,   133,  1295,   134,   128,   137,   129,
     134,   132,  1302,   133,  1059,   136,  1306,   137,   139,   133,
     507,   331,   131,   134,   133,   134,   134,   337,   624,   933,
    2210,   627,   134,   629,   795,   631,     3,     3,   348,     3,
      68,    17,   134,   134,     1,   457,  1294,  1295,   131,   134,
     133,   297,   362,  1301,  1302,   129,   129,  1305,  1306,     5,
      75,   126,    28,   137,   137,   131,   131,     3,   125,   126,
     127,   125,   126,   127,   912,   132,   133,     3,   135,   133,
     841,   135,   765,     5,     3,   768,   477,   478,   479,   480,
     293,   301,    28,   129,   404,   405,  1160,   125,   126,   126,
      17,   311,     5,  1007,   350,   129,   135,   135,   508,  1295,
       1,   288,     3,   423,   508,   425,  1302,   933,   129,     3,
    1306,  1160,   126,   433,   301,   133,  1295,     1,   423,   439,
     425,   135,   140,  1302,   570,     5,   926,  1306,     5,     3,
      76,    77,   452,     5,   128,   455,    58,   457,   458,     1,
     586,   461,   462,   595,     7,     8,     9,   467,   125,   126,
     470,   471,   472,   473,   474,   129,   323,  1729,   135,   135,
     131,   128,   129,   149,   604,   332,   133,  2194,   134,   291,
     292,   338,   599,   129,   601,   576,     3,  1638,   579,  1484,
    1251,  1007,   502,   503,   504,     3,   986,   507,   508,   135,
     126,   511,   983,     3,   514,   131,   125,   126,  1269,   519,
       3,   133,   809,   523,   524,  1276,   135,  1007,   528,   529,
     134,     3,   599,     0,   601,   994,   129,   996,   140,     1,
     540,   433,   149,   135,   125,   126,   546,   547,   604,   836,
     550,   551,   133,  1059,     1,   555,   556,   844,   735,   559,
     560,   135,  1547,   563,   564,   565,   566,   567,   568,   133,
     570,   131,   129,   573,  1480,   129,   128,   864,  1106,  1059,
     815,   816,   817,  1492,   584,   585,   586,     1,     3,  1117,
     590,   133,   128,   136,   594,   595,   139,  1447,  1448,   599,
    1480,   601,   602,    75,   604,   605,   606,   507,     1,   609,
     845,   846,   847,  1447,  1448,  1647,   815,   816,   817,   619,
     605,  1592,    89,  1532,   624,  1480,  1535,   627,   135,   629,
     135,   631,   137,   100,   236,  1646,     3,   135,   638,   735,
     107,   108,   125,   126,  1592,   135,   845,   846,   847,   135,
     736,   137,   135,   638,     7,     8,     9,     1,   735,     1,
    1566,    28,   134,   702,   703,   704,   705,  1647,     3,   131,
     570,   133,   735,   573,   674,   756,   676,   735,   570,  1559,
     134,  1561,   129,   830,   684,     5,   133,   730,   731,  1941,
       1,     1,     0,    28,   586,   132,   563,   564,   565,   566,
     567,   568,   702,   703,   704,   705,    12,    13,  1646,  1647,
    1123,   858,    47,   128,   128,   129,   831,   584,   585,   133,
     720,   721,   824,   825,   135,   827,   137,   619,  1141,   729,
       7,     8,     9,     1,     5,   735,   129,    71,    72,   739,
     133,    76,    77,  1728,   859,     3,   131,   747,  1733,   926,
     852,   853,   854,   855,   754,   755,   756,   757,   758,   759,
     133,     7,     8,     9,    97,   765,   139,   832,   768,   236,
      28,  1647,  1526,     3,   576,   128,   776,   579,     7,     8,
       9,   717,   718,   136,   128,   129,   139,   129,  1647,   133,
     910,   133,   792,  1825,   129,   860,   796,  1526,   133,   139,
     134,    76,    77,     7,     8,     9,   908,   909,   128,   702,
     703,   704,   705,  1824,     7,     8,     9,   133,   129,   129,
     126,   127,   133,   133,  1809,   761,   762,   763,     3,   729,
    1007,    76,    77,     3,   301,   735,   133,  1123,   838,   133,
     704,   705,   842,  1129,   311,  1825,   313,     3,    11,  1135,
     125,   128,     3,    28,   910,  1141,  1015,  1016,    28,   136,
      11,   129,   139,   983,     3,   133,     5,   867,   868,   869,
     128,   473,   872,   873,   874,    90,    91,    92,   959,   960,
     125,   962,  1059,   833,   965,   966,  1824,  1825,   134,   736,
     136,  1023,    31,   983,   133,     3,   126,   127,   125,   983,
     702,   703,   704,   705,  1813,  1814,  1008,   136,   908,   909,
     910,   861,   133,     3,   914,  1022,   916,   917,   145,   146,
      76,    77,     3,     3,   924,   925,   926,   983,   132,   929,
     732,    81,   136,   933,   133,   935,   936,     3,   938,     5,
     940,     3,   878,   136,   131,     3,  1852,    28,   135,  1825,
    1478,   133,     3,   128,     5,  1022,    37,   830,  1090,  1091,
     293,  1042,   112,   113,   127,    31,  1825,     1,   134,     3,
     133,  1722,   128,  1958,   125,   126,   127,   977,    81,   979,
    1106,   132,   133,   983,   135,   858,   986,   137,   455,     3,
     128,   991,   128,  1100,   994,   132,   996,   997,  1118,  1751,
     137,   139,   604,   139,   606,   135,  1006,  1007,  1008,   112,
     113,  1298,  1492,  1568,   132,  1015,  1016,   125,   126,   137,
    1020,  1527,  1022,  1023,   132,   834,   926,   863,  1028,  1029,
    1030,  1031,   134,  1100,  1702,   125,   126,   129,  1599,     0,
     507,   831,   132,   832,  1599,   125,   126,   128,  1927,   885,
     886,  2022,  1532,   862,    68,  1535,  1291,   129,    92,  1059,
     828,   829,  1118,   125,   126,    81,   128,   125,   126,   859,
     128,   860,   128,   127,   125,   126,     3,    12,    13,   133,
     547,   833,     6,  1611,     8,     9,   986,   128,   856,   857,
    1090,  1091,  1291,   128,  1094,  1095,   112,   113,  1098,  1099,
    1100,    28,  1102,   128,   139,  1105,  1106,  1007,     3,   861,
      37,   125,   126,   128,   834,  1115,   132,  1117,  1118,  1119,
       1,  1228,     3,  1123,  1163,   128,  1126,  1166,    89,  1129,
     134,  1251,  1132,    28,  1119,  1135,   139,    79,  1138,   100,
     132,  1141,   862,  1143,   477,   128,   107,   108,  1250,    76,
      77,    75,    47,   135,  2034,   137,  2036,  1157,   135,  1059,
     137,  1228,    86,  1163,  1203,   128,  1166,   863,     1,   132,
    1209,  1210,  1211,  1212,   127,  1175,   139,  1177,   828,   829,
     133,    76,    77,   128,   131,  1185,   133,   111,  1743,   885,
     886,   126,   127,    99,  2073,  1251,  2075,   121,  1198,   128,
     533,   128,   126,  1203,  1204,    81,   856,   857,  1960,  1209,
    1210,  1211,  1212,   128,  1106,   139,   127,   126,   142,   143,
     144,    81,   133,  1115,   133,  1117,   127,  1227,  1228,  1229,
     139,  1231,   133,   131,   129,   133,   112,   113,  1105,  1239,
       3,  1241,   128,    76,    77,     1,  1246,     3,    81,     3,
    1250,  1251,   112,   113,  1239,    88,   132,   131,  1194,   818,
     819,   135,  2141,  1931,  2143,    28,  2145,   125,   735,  1269,
    1163,   131,   739,  1166,    28,   135,  1276,   127,  1806,   112,
     113,   820,   821,   133,    47,  1285,   128,   145,   146,   848,
     849,   124,   198,   199,   128,   128,   129,   128,   765,  1163,
     133,   768,  1166,  1864,     1,  2184,  2185,   128,  2187,  1864,
    1203,   850,   851,    76,    77,   127,  1209,  1210,  1211,  1212,
     127,   133,    76,    77,   127,  2204,   133,    71,    72,  1229,
     133,  1231,   141,  1813,  1814,   135,   938,   818,   819,  1203,
     301,   674,     1,  2222,  1872,  1209,  1210,  1211,  1212,    93,
     311,   127,   313,    97,   127,    99,  1292,   133,   135,   367,
     133,  1163,   820,   821,  1166,    76,    77,   848,   849,   702,
     703,   704,   705,   381,   131,   977,   133,   385,  1480,    76,
      77,     1,  1484,     3,    81,   291,   147,   293,   127,   991,
     134,    88,   850,   851,   133,   997,   142,   143,   127,   127,
     408,  1203,   869,   411,   133,   133,   312,  1209,  1210,  1211,
    1212,    10,    11,     3,  1975,   112,   113,    76,    77,   129,
    1975,   129,    81,   133,   129,   133,   148,   124,   133,    88,
    1232,    16,  1234,   129,   131,   132,   133,   133,  1438,  1439,
     129,   137,  1442,  1443,   133,  1547,   129,  1447,  1448,   141,
     917,   129,   129,   112,   113,   133,   133,   129,   129,   926,
     137,   133,   133,     3,  1566,   124,   933,   129,   135,   148,
     137,   133,   131,   940,   133,   137,  1476,  2038,   129,   147,
    1480,  1481,   133,  2038,  1484,  1611,    76,    77,  2156,   129,
    1490,    81,  1492,   133,    16,  1495,   129,   137,    88,  1499,
     133,   462,   129,  1105,  1504,  1505,  1506,  1443,     3,   135,
    1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,   135,   135,
     137,   129,   112,   113,   991,   133,   163,  1527,   129,  1529,
     167,   129,  1532,    28,   124,  1535,    76,    77,  1538,   128,
    1007,    81,    37,    14,    15,   135,  2107,  1547,    88,     1,
     129,     3,  2107,   135,  1554,  1555,   142,   143,  2119,  1559,
    1560,  1561,  1562,     1,  2119,     3,     1,   150,     3,   131,
     153,   477,   112,   113,   480,   131,   135,   133,   137,    10,
      11,    76,    77,   166,   124,   168,    81,   170,   128,   131,
     133,   133,  1492,    88,   131,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,  2160,    14,    15,  1608,  1609,
    1730,  1611,   126,  1652,  1653,   584,   585,   112,   113,  1619,
     135,  1573,   137,  1575,   126,  1664,  1728,   126,   455,   124,
    1630,  1733,  1532,   128,  1573,  1535,  1575,   702,   703,  1506,
     957,   958,   957,   958,   139,   563,   564,   565,   566,   567,
     568,  2212,  1652,  1653,   702,   703,   989,  2212,   107,   108,
     873,   874,  1662,  2224,  1664,  1665,   584,   585,  1668,  2224,
     576,   133,  1672,   579,  1730,   135,  1676,   140,   135,  1679,
     135,   140,   140,   133,   135,   139,  1019,   133,   133,   145,
    1776,  1777,   133,  1779,  1780,   134,   128,   131,  1784,  1785,
    1786,  1787,  1702,  1703,   137,   131,     1,  1809,  1644,   132,
     128,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1611,
     547,   128,   131,   128,   128,   131,   140,  1619,  1728,   131,
    1730,   131,   135,  1733,  1815,  2022,  1843,   131,  1845,  1675,
     126,   129,   134,   140,   140,   140,  1872,   140,   126,   140,
    1852,  1751,   139,  1753,  1754,  1691,   135,  1757,   135,  1652,
    1653,   131,  1869,   134,  1871,   133,   126,   134,   134,    59,
     129,  1664,  1239,   129,   735,   129,  1843,   604,  1845,  1246,
     129,    76,    77,   140,   128,   140,    81,   140,  1652,  1653,
     129,  1791,   129,    88,   137,   137,   702,   703,   704,   705,
    1664,   137,  1869,   128,  1871,   128,   128,   131,   128,  1809,
      76,    77,   131,  1813,  1814,    81,  1816,   112,   113,   131,
     126,   126,    88,   131,   730,   731,   732,   129,  1828,   124,
    1163,   129,   126,  1166,   126,   128,   131,   132,   133,   128,
     139,   129,  1175,  1843,   129,  1845,   112,   113,  1848,   129,
    1652,  1653,   139,   129,   133,   133,  1958,   134,   124,   133,
     129,   129,  1901,  1665,   137,   137,  1668,   137,   129,  1869,
    1203,  1871,  1872,   137,  1676,   137,  1209,  1210,  1211,  1212,
     137,   137,    47,    48,   137,   129,   131,   134,   129,   129,
     132,   129,   140,   129,   140,  1895,  1896,  1897,  1898,    59,
     128,  1901,   137,   140,  1506,  1905,  1906,   137,  1908,   129,
    1910,    76,    77,  1813,  1814,   128,    81,   373,   128,   502,
     503,   129,  1922,    88,  2031,  2160,   129,  1529,   129,  1776,
    1777,  1931,  1779,  1780,  1934,   129,  2022,  1784,  1785,  1786,
    1787,   129,   140,   129,   140,   528,   529,   112,   113,   776,
    1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1958,   124,
    1960,  2160,   126,   128,  2031,   139,   139,   550,   551,   140,
     213,   140,   555,   556,   131,    11,   559,   560,     3,   135,
    1872,   132,   135,   137,   131,   137,   132,    76,    77,  1925,
     132,  1927,    81,   128,   131,   135,   368,     3,   129,    88,
     129,   457,   129,    28,   140,    76,    77,   140,  1901,   129,
      81,   129,   140,   129,   140,   140,   599,    88,   601,   140,
      47,    48,    28,   112,   113,  2064,   140,  2066,  1630,  2029,
    2030,  2031,  2032,  2033,  2034,   124,  2036,  1901,   140,   129,
     129,   112,   113,  2043,  2044,  2045,  2046,   129,    67,    76,
      77,    76,    77,   124,    81,  2055,    81,    67,   129,   131,
     129,    88,  1529,    88,  2064,   140,  2066,  2067,  2149,  2150,
      76,    77,   140,   129,   140,    81,  2076,  2077,   140,   131,
     131,   140,    88,   910,   131,   112,   113,   112,   113,   332,
     917,   131,   135,   131,   129,   338,  2135,   124,   925,   124,
     131,   128,   131,  1905,  1906,     3,   112,   113,   131,   936,
     135,   131,  1562,   131,   131,  2115,  2116,   131,   124,   131,
     129,  2192,  2122,  2123,     0,   514,  2126,   131,  2128,   135,
      28,  2131,   514,   514,   514,  2135,  1042,  2073,   514,  2075,
    1028,   908,   841,   311,   311,   963,  1527,  1020,   759,   533,
    2150,   472,  2152,   337,   288,   462,  2156,  2140,   107,   100,
     100,   293,   108,  1630,   100,    -1,  1791,    -1,    44,  2169,
      -1,  2064,    -1,  2066,    -1,  2022,    -1,    -1,    76,    77,
     423,    -1,   425,    81,    -1,    -1,    -1,    -1,    -1,    65,
      88,    -1,  2192,  2193,    -1,    -1,    72,    -1,  2198,    -1,
    2064,    -1,  2066,    -1,  2140,  2141,    -1,  2143,    -1,  2145,
    2210,    -1,    -1,    89,   112,   113,    92,    76,    77,    -1,
      -1,    -1,    81,    99,   100,    -1,   124,    -1,   569,    88,
      -1,   107,   108,    -1,    -1,    -1,   423,    -1,   425,  2175,
      -1,    -1,  2135,    -1,   120,    -1,    -1,   123,  2184,  2185,
      -1,  2187,    -1,   112,   113,    -1,    -1,  1163,    -1,    -1,
    1166,   137,    -1,    -1,    -1,   124,    -1,    -1,  2204,   145,
      -1,  2135,    -1,    -1,   150,   151,   135,   153,  1105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2222,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,    -1,  1203,    -1,     3,
      -1,    -1,    -1,  1209,  1210,  1211,  1212,   679,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,  1652,
    1653,    -1,   198,   199,    28,    88,  1232,    -1,  1234,  1662,
      -1,  1664,  1665,    37,    -1,  1668,    -1,   213,    -1,    -1,
      -1,    -1,    -1,  1676,    -1,    -1,  1679,    -1,    -1,   112,
     113,   227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     236,   124,   605,    -1,    -1,    -1,   129,    -1,   824,   825,
      -1,   827,    76,    77,   957,   958,    -1,    81,    -1,    -1,
      -1,  1848,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,   852,   853,   854,   855,
      47,    48,    -1,    -1,    -1,    -1,   747,    -1,   112,   113,
      -1,    -1,   288,    -1,    -1,   291,   292,   293,   605,  1246,
     124,   125,  1249,   795,   128,   301,   669,    -1,    -1,    76,
      77,     0,    -1,   137,    81,   311,   312,   313,   779,  1022,
      -1,    88,    -1,    -1,    -1,   786,    -1,    -1,   789,    -1,
      -1,    -1,   908,   909,    -1,   331,   828,   829,   830,   831,
     832,   337,    -1,   835,    -1,   112,   113,    47,    48,   841,
      -1,    -1,   348,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,   669,    -1,   856,   857,   858,   859,   860,    -1,
      -1,   863,    -1,     3,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,   875,    -1,    -1,    -1,    -1,    88,   881,
      -1,  1094,  1095,   885,   886,  1098,  1099,  1100,    28,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,   405,
      -1,   100,   112,   113,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   124,   125,    -1,   423,    -1,   425,
      -1,    -1,  1008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1895,  1896,  1897,  1898,    76,    77,  1901,    -1,
      -1,    81,  1905,  1906,    -1,  1908,    -1,  1910,    88,   455,
      -1,   457,   458,    -1,    -1,   461,   462,    -1,    -1,  1922,
      -1,   467,    -1,    -1,    -1,   471,   472,    -1,   474,    -1,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,   502,   503,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   139,
      -1,   507,   508,    -1,   528,   529,    -1,    -1,   514,    -1,
      -1,    -1,    -1,   519,  1227,  1228,    -1,    -1,   524,    -1,
    1477,    -1,   528,   529,    -1,    -1,   550,   551,    76,    77,
      -1,   555,   556,    81,    -1,   559,   560,   236,    -1,    -1,
      88,   547,    -1,    -1,   550,   551,    -1,  1583,    -1,   555,
     556,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   112,   113,    -1,    -1,    -1,    -1,
     576,    -1,    -1,   579,    76,    77,   124,     0,    -1,    81,
    1051,  1052,  1053,    -1,   132,    -1,    88,    -1,   594,    -1,
      -1,    -1,  2055,   599,    -1,   601,    -1,    -1,   604,   605,
      -1,  2064,   301,  2066,    -1,   978,    -1,    -1,    -1,    -1,
     112,   113,   311,    -1,   313,    -1,  1652,  1653,   624,    -1,
      -1,   627,   124,   629,    -1,   631,    -1,   129,  1664,    -1,
      -1,    -1,   638,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,  1017,    -1,    88,     7,    -1,   348,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,  2122,
    2123,   978,    -1,  2126,  1250,  2128,    89,    -1,  2131,     3,
     112,   113,  2135,  1630,    -1,    -1,  1178,   100,    -1,    -1,
      -1,    -1,   124,   125,   107,   108,   128,    -1,    -1,  1160,
      -1,    -1,    -1,    -1,    28,    -1,   702,   703,   704,   705,
    1017,    -1,    -1,    37,    -1,    -1,  2169,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   730,   731,   732,    -1,   151,   735,
      -1,    -1,    -1,   739,    -1,  2198,    -1,    -1,    -1,    -1,
     163,   747,    76,    77,   167,    -1,  1119,    81,   754,   755,
     756,    -1,   758,   759,    88,    -1,   455,    -1,    -1,   765,
      -1,    -1,   768,    -1,    -1,    -1,   126,   127,    -1,    -1,
     776,    -1,    -1,   779,    -1,    -1,   136,    -1,   112,   113,
     786,    -1,    -1,   789,    -1,   145,   146,   147,   148,   149,
     124,   125,    -1,    -1,   128,   129,   291,   292,  1171,    -1,
      -1,    -1,  1119,    -1,    -1,    -1,    -1,    -1,   507,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,  1294,  1295,    -1,    -1,    -1,    -1,    -1,
    1301,  1302,    -1,     0,  1305,  1306,    -1,    -1,    -1,    -1,
      -1,  1554,  1555,    -1,    -1,    -1,    -1,    -1,   547,    -1,
      -1,    -1,    -1,    -1,  1171,    -1,    -1,    -1,    -1,   502,
     503,    -1,    -1,   869,    -1,  1901,   872,   873,   874,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,  1252,
      -1,    -1,    -1,    -1,    -1,   528,   529,    -1,   311,    -1,
     313,  1848,    -1,    -1,  1480,  1608,  1609,    -1,  1484,    -1,
      -1,  1274,   908,   909,   910,    -1,    -1,   550,   551,    -1,
      -1,   917,   555,   556,    -1,    -1,   559,   560,    -1,   925,
     926,    -1,    89,    -1,    -1,    -1,    -1,   933,   126,   127,
     936,    -1,   938,   100,   940,  1252,    -1,    -1,   136,    -1,
     107,   108,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,   149,    -1,    -1,    -1,    -1,    -1,  1274,    -1,    -1,
      -1,  1547,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   983,    -1,    -1,
    1566,    -1,    -1,    -1,   151,   991,    -1,    -1,   150,    -1,
      -1,   153,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,
     167,  1007,  1008,    -1,   166,    -1,   168,    -1,   170,  1015,
    1016,    -1,    -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,
      -1,    -1,  1028,    -1,    -1,    -1,    -1,    -1,  2064,    -1,
    2066,    -1,    -1,    -1,    -1,    -1,   735,    -1,   461,    -1,
     739,    -1,    -1,    -1,    -1,  1051,  1052,  1053,    -1,   472,
      -1,    -1,    -1,  1059,    -1,  1526,    -1,   756,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   765,    -1,    -1,   768,
    1094,  1095,    -1,    -1,  1098,  1099,    -1,   776,    -1,    -1,
      -1,   576,    -1,    -1,   579,    -1,    -1,    -1,  1094,  1095,
      -1,    -1,  1098,  1099,  1100,    -1,    -1,    -1,    -1,  2135,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1118,  1119,    -1,    -1,    -1,  1123,    -1,    -1,
      -1,    -1,    -1,  1129,    -1,    -1,    -1,    -1,    -1,  1135,
    1843,    -1,  1845,    -1,   301,  1141,    -1,    -1,    -1,     3,
      -1,    -1,  1728,    -1,   311,    -1,   313,  1733,    -1,    -1,
      -1,    -1,    -1,    -1,  1160,    -1,  1869,  1163,  1871,    -1,
    1166,    -1,    -1,  1536,    28,    -1,    -1,    -1,    -1,    -1,
     869,    -1,    -1,    37,    -1,  1646,  1647,     3,    -1,  1552,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1203,    -1,    -1,
      -1,    -1,    28,  1209,  1210,  1211,  1212,   702,   703,   704,
     705,    37,    76,    77,    -1,    -1,    -1,    81,   917,  1536,
      -1,  1227,  1228,  1809,    88,    -1,  1232,   926,  1234,   575,
      -1,    -1,    -1,  1239,   933,  1552,    -1,   732,    -1,   938,
    1246,   940,    -1,  1249,  1250,  1251,    -1,    -1,   112,   113,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
     124,   125,    88,  1269,   128,    -1,  1852,    -1,  1770,    -1,
    1276,    -1,    -1,  1775,  1776,  1777,  1778,  1779,  1780,    -1,
      -1,    -1,  1784,  1785,  1786,  1787,   112,   113,  1294,  1295,
      -1,    -1,   991,    -1,   461,  1301,  1302,    -1,   124,  1305,
    1306,    -1,   128,    -1,    -1,   472,    -1,    -1,  1007,   141,
      -1,    -1,   735,    -1,    -1,    -1,  2029,  2030,  2031,  2032,
    2033,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2043,  2044,  2045,  2046,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,  1824,  1825,    -1,    -1,   524,    -1,  1732,
      -1,  1734,    -1,   195,    -1,    -1,   528,   529,    -1,    -1,
      -1,    -1,  1958,    -1,    -1,  1748,  1749,    -1,    -1,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   550,   551,
      -1,    -1,    -1,   555,   556,    -1,    -1,   559,   560,    -1,
      -1,    -1,  2115,  2116,   236,    -1,    -1,    -1,    -1,    -1,
      88,    89,    90,    -1,    -1,  1732,    -1,  1734,    -1,    -1,
      98,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,  1748,  1749,    76,    77,    -1,    -1,   599,    81,   601,
      -1,  1447,  1448,    -1,    -1,    88,    -1,    -1,    -1,   795,
      -1,  1094,  1095,    -1,    -1,  1098,  1099,    -1,    -1,    -1,
      -1,    -1,   140,   141,   142,   143,   144,    -1,    -1,   112,
     113,    -1,   150,    -1,  1480,   153,    -1,    -1,  1484,   311,
      -1,   124,   125,    -1,    -1,   128,    -1,    -1,   166,    -1,
     168,    -1,   170,    -1,    -1,   841,   139,    -1,    -1,    -1,
      -1,    -1,   925,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      -1,    -1,    -1,   936,    -1,    -1,    -1,   195,   196,   197,
    1526,    -1,    -1,  1529,    -1,    -1,    -1,    -1,    -1,   875,
    1554,  1555,   878,    -1,    -1,   881,    -1,   883,    -1,    -1,
      -1,  1547,    -1,    -1,    -1,    -1,    -1,  1246,  1554,  1555,
      -1,    -1,    -1,  1559,  1560,  1561,  1562,   235,   236,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1608,  1609,  1959,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1968,    -1,    -1,    89,    -1,
      -1,   433,  1608,  1609,    -1,    -1,    -1,   439,    -1,   100,
     288,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,    -1,   301,  1630,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   311,    -1,   313,    -1,    -1,    -1,    -1,
    1646,  1647,  1959,    -1,    -1,    -1,  1652,  1653,    -1,    -1,
      -1,  1968,    -1,  2026,  2027,    -1,     1,    -1,     3,  1665,
     151,    -1,  1668,    -1,    -1,    -1,    -1,    -1,  1163,    -1,
    1676,  1166,   163,    -1,    -1,   507,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    37,    38,    39,    40,    41,  1703,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1203,  2026,
    2027,    -1,    28,    -1,  1209,  1210,  1211,  1212,    -1,    -1,
      -1,    37,  1728,  1069,  1730,    -1,    -1,  1733,    -1,    -1,
      -1,    76,    77,   293,    -1,    -1,    81,  1232,   570,  1234,
      -1,   573,    -1,    88,    -1,  1751,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   586,   433,   434,   435,   925,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,   112,   113,   936,
      -1,    -1,    88,    -1,   606,    -1,    -1,   455,    -1,   124,
     125,    -1,    -1,   128,   462,    -1,   131,   619,   133,   134,
      -1,   351,    -1,    -1,    -1,   473,   112,   113,    -1,    -1,
      -1,    -1,    -1,  1809,    -1,    -1,    -1,    -1,   124,   125,
     301,   151,   128,    -1,    -1,    -1,    -1,    -1,  1824,  1825,
     311,    -1,   313,   163,   502,   503,    -1,   167,    -1,   507,
    1529,    -1,    -1,   511,    -1,    -1,   514,  1843,    -1,  1845,
      -1,    -1,  1848,    -1,    -1,   523,    -1,    -1,    -1,    -1,
     528,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1022,  1207,    -1,  1869,    -1,  1871,    -1,    -1,    -1,   547,
      -1,    -1,   550,   551,    -1,    -1,    -1,   555,   556,    -1,
      -1,   559,   560,    -1,    -1,   563,   564,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,    -1,   729,    -1,  1905,
    1906,    -1,    -1,   735,    -1,    -1,   584,   585,    -1,    -1,
      -1,  1554,  1555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   599,     3,   601,    -1,    -1,   604,    -1,   606,    -1,
      -1,  1630,  1094,  1095,    -1,    -1,  1098,  1099,  1100,    -1,
      -1,    -1,    -1,   621,    -1,    -1,    -1,    28,   288,    -1,
      -1,    -1,  1958,    -1,  1960,    -1,    37,    38,    39,    40,
      41,    -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   150,    -1,    -1,   153,    -1,    -1,
      -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   331,   168,    -1,   170,    76,    77,   337,    -1,    -1,
      81,    -1,    -1,    -1,    -1,  2029,  2030,    88,  2032,  2033,
      -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,  2043,
    2044,  2045,  2046,  2029,  2030,  2031,  2032,  2033,  2034,    -1,
    2036,   112,   113,   524,    -1,    -1,    -1,  2043,  2044,  2045,
    2046,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,
      -1,   729,  1751,    -1,    -1,    -1,    -1,   735,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1227,  1228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   754,   637,    -1,    -1,
     758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2115,  2116,    -1,   926,    -1,    -1,    -1,   776,    -1,
      -1,   933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2115,
    2116,    -1,    -1,    -1,   674,    -1,    -1,    -1,    -1,    -1,
      -1,   461,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   702,   703,   704,   705,    -1,    -1,    -1,  1848,
      -1,    -1,    -1,    -1,   986,    -1,    -1,  1652,  1653,   991,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1665,   137,    -1,  1668,    -1,  1007,    -1,    -1,    -1,   145,
      -1,  1676,    -1,    -1,   524,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   165,
     760,    -1,    -1,    -1,   764,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1059,    -1,    -1,
      -1,    -1,   910,    -1,    -1,   795,    -1,    -1,    -1,   917,
      -1,    -1,    -1,    -1,   735,    -1,   924,   925,   926,   809,
      -1,    -1,    -1,  1599,    -1,   933,    -1,    -1,   936,    -1,
     938,  1960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1106,    -1,   836,    -1,    -1,    -1,
      -1,   841,    -1,  1115,   844,  1117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1644,   977,
      -1,    -1,    -1,    -1,   864,    -1,    -1,    -1,   986,    -1,
      -1,    -1,    -1,   991,    -1,   875,    -1,    -1,   878,   997,
      -1,   881,    -1,   883,    -1,    -1,   502,   503,    -1,  1007,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,
      -1,    -1,    -1,    -1,  1022,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,  1032,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   550,   551,    -1,    -1,    -1,   555,
     556,  1059,    -1,   559,   560,    -1,  2029,  2030,    -1,  2032,
    2033,    -1,  1554,  1555,    -1,    -1,    -1,  1229,    -1,  1231,
    2043,  2044,  2045,  2046,    -1,    -1,    -1,    -1,    -1,    -1,
    1905,  1906,  1758,    -1,   754,   755,  1094,  1095,   758,   759,
    1098,  1099,  1100,   599,  1770,   601,    -1,  1105,  1106,  1775,
      -1,    -1,  1778,    -1,   925,    -1,    -1,    -1,  1116,   405,
      -1,    -1,    -1,    -1,    -1,   936,  1608,  1609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2115,  2116,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   457,   458,    -1,    -1,    -1,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,   471,    -1,  1853,   474,  1069,
      -1,    -1,    -1,    37,    38,    39,    40,    41,  1864,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   508,   125,    -1,    -1,    -1,    -1,   514,  1227,
    1228,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,   145,    88,    -1,    -1,    -1,  1246,    -1,
      -1,  1249,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   925,    -1,    -1,   112,   113,
      -1,  1269,    -1,    -1,    -1,    -1,   936,    -1,  1276,    -1,
     124,   125,    -1,  1163,   128,    -1,  1166,   131,    -1,   133,
     134,    -1,    -1,    -1,    -1,  1175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   594,  1975,
      -1,   213,    -1,    -1,    -1,    -1,  1196,  1197,   604,    -1,
      -1,    -1,    -1,  1203,    -1,    -1,    -1,  1207,    -1,  1209,
    1210,  1211,  1212,    -1,    -1,    -1,    -1,    -1,   624,    -1,
    1492,   627,    -1,   629,    -1,   631,    -1,  1499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1843,    -1,  1845,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2038,    -1,    -1,  1527,    -1,  1529,    -1,    -1,
    1532,    -1,    -1,  1535,    -1,    -1,    -1,  1869,    -1,  1871,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1059,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1298,    -1,
      -1,   323,    -1,    -1,    -1,   327,   328,   329,    -1,    -1,
     332,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,    -1,
      -1,  2107,   344,    -1,    -1,    -1,    -1,    -1,    -1,   351,
      -1,    -1,    -1,  2119,    -1,    -1,    -1,    -1,    -1,  1611,
      -1,    -1,    -1,    -1,    -1,    -1,   368,  1619,    -1,    -1,
      -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,  1630,  1477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1492,    -1,    -1,    -1,    -1,    -1,
      -1,  1499,    -1,    -1,    -1,    -1,    -1,    -1,  1506,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   423,    -1,   425,    -1,    -1,  1022,    -1,  2194,  1527,
      -1,  1529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2212,  2029,  2030,  2031,
    2032,  2033,    -1,    -1,    -1,   457,  1554,  1555,  2224,    -1,
      -1,  2043,  2044,  2045,  2046,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   872,   873,   874,  1249,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1094,  1095,
      -1,    -1,  1098,  1099,  1100,    -1,    -1,    -1,    -1,  1269,
    1608,  1609,    -1,  1611,    -1,    -1,  1276,    -1,    -1,    -1,
      -1,    -1,   908,   909,   910,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1630,  2115,  2116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1813,  1814,    -1,  1816,    -1,    -1,   569,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1568,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   983,    28,    -1,
      -1,    -1,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1599,
    1872,    -1,  1008,    -1,  1722,    -1,    -1,    -1,    -1,  1015,
    1016,  1227,  1228,    -1,    -1,   637,    -1,    -1,    68,    -1,
      -1,    -1,  1028,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,  1644,    -1,    -1,   669,    -1,    -1,
     100,    -1,  1652,  1653,   104,   105,   106,   107,   108,   109,
     110,   111,  1662,    -1,  1664,  1665,    -1,    -1,  1668,    -1,
     120,   121,    -1,    -1,    -1,   125,  1676,    -1,   128,  1679,
     130,    -1,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1118,    -1,   736,    -1,    -1,  1123,    -1,    -1,
      -1,    -1,    -1,  1129,    -1,  1843,    -1,  1845,    -1,  1135,
    1848,    -1,    -1,    -1,    -1,  1141,    -1,    -1,   760,    -1,
      -1,    -1,   764,  1743,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1869,    -1,  1871,    -1,  1755,    -1,   779,  1758,    -1,
      -1,    -1,    -1,  1881,   786,    -1,    -1,   789,    -1,    -1,
    1770,    -1,    -1,    -1,    -1,  1775,    -1,    -1,  1778,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,    -1,    -1,
      -1,    -1,    -1,   815,   816,   817,   818,   819,   820,   821,
      -1,    -1,   824,   825,    -1,   827,   828,   829,   830,   831,
     832,   833,   834,    -1,   836,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   844,   845,   846,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
     862,    -1,   864,    -1,  1250,  1251,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1853,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,  1864,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   908,   909,    -1,    -1,
      28,    -1,    -1,    -1,    -1,  1895,  1896,  1897,  1898,    -1,
      -1,  1901,    -1,    -1,    -1,  1905,  1906,    -1,  1908,    -1,
    1910,  2029,  2030,  2031,  2032,  2033,    -1,    -1,    -1,    -1,
      -1,    -1,  1922,    -1,    -1,  2043,  2044,  2045,  2046,    -1,
      68,    -1,  1932,  1933,    -1,    73,    74,    -1,  1554,  1555,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,
      -1,    -1,    -1,    -1,   976,    -1,   978,   119,    -1,    -1,
      -1,    -1,   100,   125,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,  1975,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   145,    -1,    -1,  1008,    -1,    -1,    -1,
     128,    -1,  1608,  1609,    -1,  1017,    -1,  2115,  2116,    -1,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1051,
      -1,  1053,    -1,    -1,    -1,    -1,    -1,    -1,  2038,    -1,
      -1,  1447,  1448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,  2055,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2064,    -1,  2066,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1480,    -1,    -1,    -1,  1484,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1119,    -1,    -1,
      -1,    -1,    -1,   674,    -1,    -1,    -1,  2107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2119,
      -1,    -1,  2122,  2123,    -1,    -1,  2126,    -1,  2128,    -1,
      -1,  2131,    -1,   704,   705,  2135,    -1,    -1,  1160,    -1,
      -1,  1547,  2142,    -1,    -1,    -1,    -1,    -1,    -1,  1171,
      -1,    -1,    -1,  1559,  1560,  1561,  1562,    -1,    -1,    -1,
    2160,   323,    -1,    -1,    -1,   327,   328,   329,    -1,  2169,
     332,    -1,    -1,    -1,  1196,  1197,   338,   213,    -1,    -1,
      -1,    -1,   344,    -1,    -1,    -1,    -1,    -1,    -1,   351,
      -1,    -1,    -1,    -1,  2194,    -1,    -1,    -1,  2198,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,
      -1,   373,  2212,    -1,  2214,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2224,    -1,    -1,  1843,  1250,  1845,
    1252,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1274,  1869,    -1,  1871,    -1,    -1,    28,    -1,
      -1,   423,    -1,   425,    -1,    -1,    -1,    37,    -1,  1291,
      -1,    -1,    -1,  1295,    -1,    -1,  1298,    -1,    -1,    -1,
    1302,    -1,    -1,    -1,  1306,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   457,    -1,  1703,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,   351,    86,    87,    88,    -1,
      -1,    -1,  1728,    -1,  1730,    -1,    -1,  1733,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,   425,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1809,    -1,    -1,    -1,   569,    -1,    -1,
      -1,    -1,    -1,  2029,  2030,  2031,  2032,  2033,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2043,  2044,  2045,
    2046,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1480,    -1,
      -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2115,
    2116,    -1,    -1,    -1,  1526,    -1,    -1,   669,    -1,    -1,
      -1,    -1,    -1,    -1,  1536,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1547,    -1,    -1,    -1,    -1,
    1552,    -1,    -1,   569,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1566,    -1,  1568,    -1,    -1,    -1,
      -1,  1573,  1958,  1575,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   605,
    1592,    -1,    -1,    -1,   736,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1163,    -1,    -1,  1166,    -1,    -1,   760,    -1,
      -1,   637,   764,    -1,  1175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   779,    -1,    -1,
      -1,    -1,    -1,    -1,   786,  1647,    -1,   789,  2034,    -1,
    2036,    -1,  1203,   669,    -1,    -1,    -1,    -1,  1209,  1210,
    1211,  1212,    -1,    -1,    -1,    -1,    -1,   809,    -1,    -1,
      -1,    -1,    -1,   815,   816,   817,   818,   819,   820,   821,
      -1,    -1,   824,   825,    -1,   827,   828,   829,   830,   831,
     832,   833,   834,    -1,   836,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   844,   845,   846,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
     862,    -1,   864,    -1,    -1,    -1,  1728,    -1,    -1,    -1,
    1732,  1733,  1734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1743,    -1,    -1,   760,    -1,  1748,  1749,   764,    -1,
      -1,    -1,     1,  1755,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,   779,    -1,    -1,   908,   909,    -1,    -1,
     786,    -1,    -1,   789,  1776,  1777,    -1,  1779,  1780,    28,
      -1,    -1,  1784,  1785,  1786,  1787,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   809,    -1,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,    -1,    -1,    -1,    -1,  1809,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
     836,    -1,    -1,  1825,    73,    74,    75,    -1,   844,    -1,
      -1,    -1,    -1,    -1,   976,    -1,   978,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   864,    -1,
    1852,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,  1008,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,  1017,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,   138,
     139,     0,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1051,
      -1,  1053,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
     153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1932,  1933,    -1,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    -1,  1958,  1959,    -1,    -1,
     976,    -1,   978,    -1,    -1,    -1,  1968,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1119,    -1,    -1,
      89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
      -1,  1017,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1160,    -1,
    2022,    -1,    -1,    -1,  2026,  2027,    -1,    -1,    -1,  1171,
      -1,   140,   141,    -1,    -1,  1051,    -1,  1053,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1196,  1197,    -1,    -1,    -1,    -1,
     293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1652,  1653,  1119,    -1,    -1,    -1,    -1,  1250,    -1,
    1252,  1662,    -1,  1664,  1665,    -1,    -1,  1668,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1676,    -1,    -1,  1679,    -1,
      -1,    -1,  1274,    -1,    -1,    -1,    -1,    -1,   247,    -1,
    2142,    -1,   251,    -1,  1160,    -1,    -1,    -1,    -1,  1291,
      -1,    -1,    -1,  1295,    -1,  1171,  1298,    -1,  2160,    -1,
    1302,    -1,    -1,    -1,  1306,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
    1196,  1197,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   311,    -1,   313,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1252,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,  1295,
      -1,    -1,  1298,    -1,    -1,    -1,  1302,    -1,    -1,    -1,
    1306,    -1,    -1,    -1,    -1,   528,   529,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   550,   551,    -1,
      -1,    -1,   555,   556,   433,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   569,    -1,  1480,    -1,
      -1,    -1,  1484,    -1,  1895,  1896,  1897,  1898,    -1,    -1,
    1901,    -1,    -1,    -1,  1905,  1906,    -1,  1908,    -1,  1910,
      -1,    -1,    -1,    -1,   473,    -1,   599,    -1,   601,    -1,
      -1,  1922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   323,    -1,  1526,    -1,    -1,    -1,    -1,    -1,
      -1,   332,    -1,    -1,  1536,    -1,    -1,   338,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1547,    -1,    -1,    -1,    -1,
    1552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1566,    -1,  1568,    -1,    -1,    -1,
      -1,  1573,    -1,  1575,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1592,    -1,   124,    -1,   563,   564,   565,   566,   567,   568,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,    -1,   702,
     703,   704,   705,    -1,    -1,   584,   585,   586,    -1,    -1,
      -1,    -1,   423,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   604,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2055,  1647,    -1,    -1,    -1,    -1,
    1526,    -1,    -1,  2064,    -1,  2066,    -1,    -1,    -1,    -1,
    1536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1552,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   779,    -1,    -1,    -1,
      -1,    -1,  1568,   786,    -1,    -1,   789,  1573,    -1,  1575,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2122,  2123,    -1,    -1,  2126,  1592,  2128,    -1,    -1,
    2131,    -1,    -1,    -1,  2135,    -1,  1728,    -1,    -1,    -1,
    1732,  1733,  1734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1743,    -1,    -1,    -1,    -1,  1748,  1749,    -1,    -1,
      -1,    -1,    -1,  1755,    -1,    -1,    -1,    -1,  2169,    -1,
     729,    -1,    -1,    -1,    -1,    -1,   735,    -1,   569,    -1,
      -1,  1647,    -1,    -1,  1776,  1777,    -1,  1779,  1780,    -1,
      -1,    -1,  1784,  1785,  1786,  1787,    -1,  2198,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,    -1,   605,    -1,    -1,  1809,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,  1825,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1852,    -1,    -1,    -1,    -1,    -1,  1732,    -1,  1734,    -1,
      -1,    -1,    -1,    -1,   957,   958,    -1,  1743,   669,    -1,
      -1,    -1,  1748,  1749,    -1,    -1,    -1,    -1,   410,  1755,
      -1,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1022,
    1932,  1933,    -1,    -1,    -1,   736,    -1,    -1,    -1,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1825,
      -1,    -1,    -1,    -1,    -1,    -1,  1958,  1959,  1051,    -1,
    1053,    -1,    -1,    -1,    -1,    -1,  1968,    -1,    -1,   938,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   779,    -1,
      -1,    -1,    -1,    -1,    -1,   786,    -1,    -1,   789,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1094,  1095,    -1,    -1,  1098,  1099,  1100,   977,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2022,    -1,    -1,    -1,  2026,  2027,    -1,    -1,   997,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1932,  1933,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1160,    -1,    -1,
    1163,    -1,    -1,  1166,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1175,  1959,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1968,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   639,    -1,    -1,
    1203,    -1,    -1,    -1,    -1,    -1,  1209,  1210,  1211,  1212,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1227,  1228,  1105,  1106,    -1,    -1,
    2142,    -1,    -1,    -1,    -1,    -1,    -1,   679,    -1,    -1,
    2026,  2027,    -1,    -1,    -1,    -1,    -1,    -1,  2160,    -1,
      -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   976,    -1,   978,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1295,    -1,    -1,    -1,    -1,   739,    -1,  1302,
     742,    -1,  2214,  1306,    -1,    -1,  1017,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   756,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   765,    -1,    -1,    -1,    -1,   770,   771,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1051,    -1,  1053,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1229,    -1,  1231,    -1,    -1,   797,  2142,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,  2160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,   835,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   843,    -1,    -1,    -1,    -1,    -1,    -1,  1119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   863,    -1,    -1,    -1,    -1,    -1,    68,  2214,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,   879,   880,    -1,
      -1,    -1,   884,   885,   886,    86,    87,    -1,    -1,  1160,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
    1171,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,    -1,    -1,    -1,   938,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1526,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1554,  1555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1274,    -1,    -1,    -1,    -1,    -1,    -1,
    1573,    -1,  1575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1295,    -1,    -1,    -1,    -1,    -1,
      -1,  1302,    -1,    -1,    -1,  1306,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,  1506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1647,    -1,    -1,    -1,    -1,  1652,
    1653,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1662,
      -1,  1664,  1665,    -1,    -1,  1668,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1676,    -1,    -1,  1679,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    -1,    -1,    -1,    -1,  1158,    -1,    -1,    -1,
      -1,    99,   100,    -1,    -1,  1167,  1168,    -1,  1170,   107,
     108,    -1,  1611,    -1,    -1,    -1,  1178,    -1,    -1,    -1,
      -1,    -1,    -1,  1185,    -1,    -1,    -1,    -1,    -1,   127,
    1192,  1193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1526,    -1,    -1,    -1,    -1,
     198,   199,  1825,    -1,    -1,  1536,    -1,    -1,  1270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1843,  1552,  1845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,  1573,    -1,  1575,    -1,  1869,    -1,  1871,    -1,
      -1,    -1,    -1,    -1,  1316,  1317,    -1,    -1,    -1,    -1,
      -1,  1592,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1895,  1896,  1897,  1898,    -1,    -1,  1901,    -1,
      -1,    -1,  1905,  1906,    -1,  1908,    -1,  1910,    -1,    -1,
     288,    -1,    -1,   291,   292,   293,    -1,    -1,    -1,  1922,
      -1,    -1,    -1,   301,    -1,    -1,  1368,    -1,  1370,    -1,
      -1,    -1,    -1,   311,   312,   313,  1647,    -1,    -1,  1381,
    1382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,   337,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1432,    -1,  1434,  1872,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1458,    -1,  1460,    -1,
    1462,  1732,  1464,  1734,    -1,    -1,  2029,  2030,  2031,  2032,
    2033,    -1,    -1,    -1,    -1,    -1,    -1,  1748,  1749,    -1,
    2043,  2044,  2045,  2046,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2055,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2064,    -1,  2066,    -1,  1776,  1777,    -1,  1779,  1780,
      -1,    -1,    -1,  1784,  1785,  1786,  1787,   455,    -1,    -1,
      -1,    -1,    -1,   461,    -1,    -1,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,   472,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2115,  2116,  1825,    -1,    -1,    -1,    -1,  2122,
    2123,    -1,    -1,  2126,    -1,  2128,    -1,    -1,  2131,   507,
      -1,    -1,  2135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   524,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2169,    -1,    -1,   547,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   569,    -1,    -1,  1636,  2198,    -1,    -1,   576,    -1,
      -1,   579,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1658,  1659,  1660,  1661,
      -1,  1663,  1664,    -1,    -1,    -1,    -1,  1669,  1670,    -1,
    1672,    -1,  1674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1682,  1683,  1684,    -1,    -1,    -1,    -1,    -1,  1959,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1968,    -1,    -1,
      -1,    -1,    -1,    57,    58,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    90,    -1,    -1,    -1,
      94,    -1,    -1,   681,    -1,    -1,   100,    -1,    -1,    -1,
      -1,  2022,    -1,   107,   108,  2026,  2027,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   702,   703,   704,   705,    -1,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,    -1,   730,   731,   732,    -1,    -1,   735,    -1,    -1,
      -1,   739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   747,
      -1,    -1,    -1,    -1,    -1,    -1,   754,   755,   756,    -1,
     758,   759,    -1,    -1,    -1,    -1,    -1,   765,    -1,    -1,
     768,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,
     194,   779,    -1,    -1,    -1,    -1,    -1,    -1,   786,    -1,
      -1,   789,    -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1882,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1902,    -1,    -1,    -1,    -1,  1907,    -1,  1909,  1910,    -1,
    1912,  1913,    -1,  1915,    -1,  1917,    -1,    -1,    -1,    -1,
      -1,  1923,  1924,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   869,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,   293,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   311,  1960,   313,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   917,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   925,   926,    -1,
      -1,    -1,    -1,    -1,    -1,   933,    -1,    58,   936,   937,
     938,    -1,   940,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   991,  2056,  2057,    -1,  2059,  2060,  2061,
      -1,    -1,    -1,  2065,  2066,    -1,   410,    -1,    -1,  1007,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1051,  1052,  1053,    -1,    -1,    -1,   473,
      -1,  1059,  2124,  2125,    -1,  2127,  2128,    -1,    -1,   473,
    2132,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   507,    -1,    -1,   510,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
     251,    -1,    -1,   547,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   563,
     564,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1160,    -1,    -1,  1163,    -1,   288,  1166,    -1,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     301,  1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     604,    -1,   606,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   617,    -1,  1203,    -1,    -1,    -1,    -1,
      -1,  1209,  1210,  1211,  1212,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1232,    -1,  1234,    -1,    -1,    -1,
      -1,    -1,    -1,   657,    -1,    -1,    -1,    -1,  1246,    -1,
      -1,  1249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,  1269,     4,     5,     6,   679,     8,     9,  1276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     694,    -1,    -1,    -1,    -1,    -1,  1294,  1295,   702,   703,
     704,   705,    -1,  1301,  1302,    -1,    -1,  1305,  1306,    -1,
      -1,    -1,   433,    -1,   728,    -1,    -1,    -1,    -1,    -1,
      -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   739,    68,    -1,   742,    -1,
     754,    73,    74,    75,   758,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,   765,   776,    -1,    -1,    -1,   770,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     511,    -1,    -1,   797,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   835,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   843,
      -1,    -1,   563,   564,   565,   566,   567,   568,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,   863,
      -1,    -1,    -1,   584,   585,   586,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   879,    -1,    -1,    -1,    -1,
     884,   885,   886,   604,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   910,   911,    -1,    -1,
      -1,    99,    -1,   917,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   925,   926,    -1,    -1,    -1,    -1,    -1,    -1,   933,
      -1,    -1,   936,   937,   938,    -1,    -1,    -1,  1526,    -1,
      -1,  1529,    -1,    -1,   938,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,   977,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   985,    -1,    -1,    -1,    -1,    -1,   991,    69,    -1,
      -1,    -1,    -1,   997,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,  1007,    -1,    -1,    87,    88,    89,    -1,
     198,   199,    -1,    -1,    -1,    -1,    -1,    -1,   729,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,  1630,   124,    -1,    -1,    -1,    -1,   236,    -1,
     131,    -1,   133,   134,    -1,  1059,    -1,    -1,  1646,  1647,
      -1,    -1,    -1,    -1,  1652,  1653,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1665,    -1,    -1,
    1668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1676,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,  1105,    -1,   291,   292,   293,    -1,    -1,    -1,    -1,
    1114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,   337,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     348,    -1,    -1,  1751,  1158,    -1,    -1,    -1,    -1,  1163,
      -1,    -1,  1166,  1167,  1168,    -1,  1170,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1178,    -1,    -1,    -1,    -1,    -1,
      -1,  1185,    -1,    -1,    -1,    -1,    -1,    -1,  1192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1203,
      -1,    -1,    -1,    -1,    -1,  1209,  1210,  1211,  1212,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   938,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1824,  1825,    -1,    -1,
      -1,    -1,  1246,    -1,    -1,  1249,    -1,  1251,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1259,    -1,    -1,    -1,    -1,
    1848,    -1,    -1,    -1,    -1,  1269,   977,   455,    -1,    -1,
      -1,    -1,  1276,    -1,    -1,    -1,  1270,    -1,    -1,    -1,
      -1,    -1,    -1,   994,    -1,   996,   997,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,  1905,  1906,   507,
      -1,    -1,  1316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   547,
      -1,    -1,    -1,    88,    89,    90,    -1,    -1,    -1,    -1,
      -1,    68,  1960,    -1,  1368,    -1,    73,    74,    75,    -1,
      -1,   569,    -1,    -1,    -1,    -1,    -1,  1381,   576,    86,
      87,   579,    -1,    -1,  1105,  1106,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,   157,   130,   131,    -1,   133,    -1,  1432,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,   173,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1458,    -1,    -1,    -1,  1462,    -1,
     195,    -1,    -1,  1477,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1491,    -1,    -1,
      -1,    -1,    -1,    -1,  1498,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,   702,   703,   704,   705,  1229,    -1,
    1231,    -1,    -1,  1527,    -1,  1529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   730,   731,   732,    -1,    -1,    -1,    -1,    -1,
      -1,   739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   747,
      -1,    -1,    -1,   288,    -1,    -1,   754,   755,   756,    -1,
     758,   759,    -1,    -1,    -1,    -1,   301,   765,   198,   199,
     768,    -1,    -1,    -1,    -1,    -1,   311,    -1,   776,    -1,
      -1,   779,    -1,    -1,    -1,    -1,    -1,    -1,   786,    -1,
      -1,   789,    -1,    -1,    -1,    -1,  1610,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1630,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,  1652,  1653,
      -1,    -1,    -1,    -1,  1658,    -1,  1660,    -1,   288,  1663,
    1664,   291,   292,   293,    -1,  1669,  1670,    -1,  1672,    -1,
      -1,   869,    -1,    -1,    -1,    -1,    -1,    -1,  1682,    -1,
    1684,    -1,   312,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,
      -1,   331,    86,    87,   439,    -1,    -1,   337,  1722,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   348,   917,
     104,   105,   106,   107,   108,   109,   110,   111,   926,    -1,
      -1,    -1,    -1,    -1,    -1,   933,   120,   121,   473,    -1,
     938,   125,   940,    -1,   128,   129,   130,    -1,    -1,   133,
      -1,    -1,    -1,    -1,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1506,    -1,    -1,   523,    -1,
      -1,  1805,    -1,   991,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1007,
      -1,    58,    -1,  1827,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,   563,   564,
     565,   566,   567,   568,  1848,   570,    -1,    -1,   573,    -1,
      -1,    -1,    89,    90,    -1,    -1,    -1,    -1,    -1,   584,
     585,   586,    -1,  1051,  1052,  1053,    -1,    -1,    -1,    -1,
      -1,  1059,    -1,    -1,    -1,    -1,    -1,   602,    -1,   604,
      -1,   606,    -1,    -1,    -1,    -1,    -1,   507,  1882,    -1,
      -1,    -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,    -1,
    1611,    -1,    -1,   140,   141,    -1,    -1,  1901,  1902,    -1,
      -1,    -1,    -1,    -1,    -1,  1909,    -1,    -1,    -1,  1913,
      -1,  1915,    -1,    -1,    -1,    -1,    -1,   547,    -1,    -1,
    1924,    -1,    -1,    -1,    -1,    -1,  1940,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   569,
      -1,    -1,    -1,    -1,    -1,    -1,   576,    -1,   195,   579,
      -1,    -1,    -1,    -1,    -1,    -1,  1960,    -1,    -1,    -1,
      -1,    -1,  1160,    -1,    -1,  1163,    -1,    -1,  1166,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   721,    -1,    -1,   236,
      -1,    -1,    -1,    -1,   729,    -1,    -1,    -1,    -1,    -1,
     735,    -1,    -1,    -1,    -1,  1203,    -1,    -1,    -1,    -1,
      -1,  1209,  1210,  1211,  1212,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1232,    -1,  1234,    -1,    -1,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,  1246,    -1,
      -1,  1249,  2056,  2057,   301,  2059,    -1,  2061,    -1,    -1,
    2064,  2065,  2066,    -1,   311,    -1,    -1,    -1,    -1,    -1,
      -1,  1269,   702,   703,   704,   705,    -1,    -1,  1276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1294,  1295,    -1,    -1,
     730,   731,   732,  1301,  1302,    -1,    -1,  1305,  1306,   739,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   747,    -1,    -1,
    2124,    -1,    -1,  2127,   754,   755,   756,    -1,   758,   759,
      -1,  2135,    -1,    -1,    -1,   765,    -1,    -1,   768,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,    -1,   779,
      -1,  1872,    -1,    -1,    -1,    -1,   786,    -1,    -1,   789,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,    -1,   924,
      -1,   926,   439,    -1,    -1,    -1,    -1,    -1,   933,    -1,
      -1,    -1,    -1,   938,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   869,
      -1,    -1,   977,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   986,    -1,    -1,    -1,    -1,   991,    -1,    -1,    -1,
     507,    -1,   997,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1007,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   917,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,    -1,    -1,
      -1,    -1,    -1,   933,    -1,    -1,    -1,    -1,   938,    -1,
     940,    -1,    -1,    -1,    -1,    -1,   563,   564,   565,   566,
     567,   568,    -1,   570,  1059,    -1,   573,    -1,  1526,    -1,
      -1,  1529,    -1,    -1,    -1,    -1,    -1,   584,   585,   586,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   604,    -1,   606,
      -1,   991,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1105,  1106,   619,    -1,    -1,    -1,    -1,  1007,    -1,    -1,
    1115,    -1,  1117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1051,  1052,  1053,    -1,    -1,    -1,    -1,    -1,  1059,
      -1,    -1,  1630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1646,  1647,
      -1,    -1,    -1,    -1,  1652,  1653,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1665,    -1,    -1,
    1668,    -1,    -1,    -1,    -1,    -1,     3,    -1,  1676,    -1,
     351,    -1,   729,    -1,    -1,    -1,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,  1229,    -1,  1231,   368,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
    1160,    -1,    -1,  1163,    -1,    -1,  1166,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,  1751,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1203,    -1,   102,    -1,    -1,    -1,  1209,
    1210,  1211,  1212,    99,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,  1232,    -1,  1234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   139,    -1,   141,    -1,  1246,    -1,    -1,  1249,
      -1,    -1,    -1,    -1,    -1,    -1,  1824,  1825,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,  1269,
      -1,    -1,    -1,    -1,    -1,    -1,  1276,   163,    -1,    -1,
    1848,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1294,  1295,    -1,    -1,    -1,    -1,
      -1,  1301,  1302,    -1,    -1,  1305,  1306,    -1,    -1,   926,
      -1,    -1,   198,   199,    -1,    -1,   933,    -1,    99,    -1,
      -1,   938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1905,  1906,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     977,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   986,
     151,    -1,    -1,    -1,   991,    -1,    -1,    -1,    -1,    -1,
     997,    -1,   163,    -1,    -1,    -1,   167,  1492,    -1,    -1,
    1007,    -1,  1960,    -1,  1499,    -1,    -1,    -1,    -1,    -1,
      -1,  1506,   288,    -1,    -1,   291,   292,   293,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,   199,    -1,
      -1,    -1,  1527,    -1,  1529,    -1,   312,  1532,    -1,     1,
    1535,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   679,    -1,
      -1,    -1,  1059,    -1,    -1,   331,    -1,    -1,    -1,    -1,
      -1,   337,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,  1105,  1106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,  1115,    -1,
    1117,    -1,    -1,    -1,    76,    77,  1611,   288,    -1,    81,
     291,   292,   293,    -1,  1619,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1630,  1526,    -1,    -1,  1529,
     102,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     331,    -1,   124,    -1,   795,    -1,   337,    -1,    -1,    -1,
      -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,   809,   455,
      -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   472,   828,   829,   830,
     831,   832,    -1,    -1,   835,   836,    -1,    -1,    -1,    -1,
     841,    -1,    -1,   844,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1229,    -1,  1231,   856,   857,   858,   859,   860,
      -1,   507,   863,   864,    -1,    -1,    -1,    -1,    -1,    -1,
    1630,    -1,    -1,    -1,   875,    -1,    -1,    -1,   524,    -1,
     881,    -1,    -1,    -1,   885,   886,  1646,  1647,    -1,    -1,
      -1,    -1,  1652,  1653,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   547,    -1,    -1,    -1,  1665,    -1,     1,  1668,     3,
       4,     5,     6,    -1,     8,     9,  1676,    -1,    -1,    -1,
     461,    -1,    -1,   569,    -1,    -1,    -1,    -1,    -1,    -1,
     576,   472,    -1,   579,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1813,  1814,
      -1,  1816,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,   524,    -1,    -1,    -1,    81,    -1,    -1,
      -1,  1751,    86,    87,    88,    -1,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,  1872,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   569,    -1,
      -1,   125,    -1,    -1,   128,   576,   130,   131,   579,    -1,
      -1,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,   702,   703,   704,   705,
      -1,    -1,    -1,    -1,  1824,  1825,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   730,   731,   732,    -1,  1848,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   747,    -1,    -1,    -1,    -1,    -1,    -1,   754,   755,
      -1,    -1,   758,   759,    -1,  1492,    -1,    -1,    -1,    -1,
      -1,    -1,  1499,    -1,    -1,    -1,    -1,    -1,    -1,  1506,
      -1,    -1,    -1,   779,    -1,    -1,    -1,    -1,    -1,    -1,
     786,    -1,    -1,   789,    -1,  1905,  1906,    -1,    -1,    -1,
    1527,    -1,  1529,    -1,    -1,  1532,    -1,    -1,  1535,    -1,
      -1,   702,   703,   704,   705,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   730,
     731,   732,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1960,    -1,    -1,    -1,    -1,    -1,   747,    -1,    99,    -1,
      -1,    -1,    -1,   754,   755,    -1,    -1,   758,   759,    -1,
      -1,    -1,    -1,   869,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,  1611,     8,     9,    -1,   779,    -1,
      -1,    -1,  1619,    -1,    -1,   786,    -1,    -1,   789,    -1,
      -1,    -1,    -1,  1630,    -1,    28,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   917,   163,    -1,    -1,    -1,   167,    -1,    -1,   925,
     926,    -1,    -1,    -1,    -1,    -1,    -1,   933,    -1,    -1,
     936,    -1,    -1,    -1,   940,    68,    -1,  1298,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,   198,   199,    -1,
      -1,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   991,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,  1007,    -1,    -1,   137,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   925,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   936,    -1,   288,    -1,    -1,
     291,   292,   293,    -1,    -1,  1051,  1052,  1053,    -1,    -1,
      -1,    -1,    -1,  1059,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1813,  1814,    -1,  1816,
     331,    -1,    -1,    -1,    -1,    -1,   337,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1872,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1051,  1052,  1053,    -1,  1160,    -1,    -1,  1163,  1059,    -1,
    1166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,  1203,    -1,    -1,
      -1,    -1,    -1,  1209,  1210,  1211,  1212,    -1,    -1,   100,
     461,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   472,    -1,    -1,    -1,    -1,  1232,    -1,  1234,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,  1249,    -1,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,  1160,
      -1,    -1,  1163,  1269,    -1,  1166,    -1,    -1,    -1,    -1,
    1276,    -1,    -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1294,  1295,
      -1,    -1,    -1,    -1,    -1,  1301,  1302,    -1,    -1,  1305,
    1306,    -1,  1203,    -1,    -1,    -1,    -1,    -1,  1209,  1210,
    1211,  1212,    -1,    -1,    -1,    -1,    -1,    -1,   569,    -1,
      -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,   579,    -1,
      -1,  1232,    -1,  1234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1269,    -1,
      -1,    -1,    -1,    -1,    -1,  1276,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1294,  1295,    -1,    -1,    -1,    -1,    -1,
    1301,  1302,    -1,    -1,  1305,  1306,    -1,    -1,    -1,  1770,
      -1,    -1,    -1,    -1,  1775,  1776,  1777,  1778,  1779,  1780,
      -1,    -1,    -1,  1784,  1785,  1786,  1787,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,   704,   705,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   730,
     731,   732,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   747,    -1,    -1,    -1,
      -1,    -1,    -1,   754,   755,    -1,    -1,   758,   759,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1526,    -1,    -1,  1529,    -1,    -1,    -1,    -1,   779,    -1,
      -1,    -1,    -1,    -1,    -1,   786,    -1,    -1,   789,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1630,  1526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1646,  1647,    -1,    -1,    -1,    -1,  1652,  1653,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,  1665,
      -1,    -1,  1668,    -1,    -1,    -1,    -1,    -1,    86,    87,
    1676,    -1,    -1,    -1,   925,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,   936,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,   132,   133,    -1,    -1,   136,    -1,
     138,   139,    -1,   141,   142,   143,   144,   145,   146,   147,
     148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1646,  1647,    -1,    -1,    -1,
      -1,  1652,  1653,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,  1665,    -1,    -1,  1668,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1676,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1051,  1052,  1053,    -1,    -1,    -1,    -1,    -1,  1059,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1824,  1825,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
      -1,    -1,  1848,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,  1905,
    1906,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1160,
      -1,    -1,  1163,    -1,    -1,  1166,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1824,  1825,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,  1203,    -1,    -1,    -1,    -1,    -1,  1209,  1210,
    1211,  1212,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,  1232,    -1,  1234,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1249,    -1,
     102,    -1,    -1,    -1,  1905,  1906,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,  1269,    -1,
      -1,    -1,   124,   125,    -1,  1276,   128,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,  1294,  1295,    -1,    -1,    -1,    -1,    -1,
    1301,  1302,    -1,    -1,  1305,  1306,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,    -1,    -1,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,  1526,    68,    69,    70,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1646,  1647,    -1,    -1,    -1,
      -1,  1652,  1653,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1665,    -1,    -1,  1668,    -1,    -1,
      -1,    -1,    -1,     0,     1,  1676,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,  1824,  1825,    -1,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,  1905,  1906,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
     144,   145,   146,   147,   148,   149,     1,    -1,    -1,    -1,
      -1,    -1,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
     125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
      -1,   136,    -1,    -1,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,    -1,   132,   133,    -1,    -1,
     136,    -1,   138,   139,    -1,   141,   142,   143,   144,   145,
     146,   147,   148,   149,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,    -1,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,    -1,
     141,   142,   143,   144,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,   133,   134,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,   133,   134,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,   133,   134,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,     1,   130,     3,
       4,     5,     6,    -1,     8,     9,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,   128,     1,   130,     3,     4,     5,
       6,    -1,     8,     9,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,   121,    -1,    -1,   124,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
     128,     1,   130,     3,     4,     5,     6,   135,     8,     9,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    -1,
     120,   121,    -1,    -1,   124,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,   131,    -1,   133,    -1,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,   144,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    90,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,   135,
      -1,   137,   138,   139,    -1,   141,   142,   143,   144,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,   120,   121,    73,    74,
      75,   125,    -1,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    86,    87,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,   131,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,   120,
     121,    73,    74,    75,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,    -1,    86,    87,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,   131,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
     131,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,   129,   130,   131,    -1,   133,
      -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    68,     8,     9,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    68,   130,   131,    -1,   133,
      73,    74,    75,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    68,     8,     9,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    68,   130,    -1,    -1,   133,    73,    74,
      75,    -1,   138,   139,   140,   141,   142,   143,   144,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    -1,   130,    -1,    -1,   133,    -1,
      -1,    -1,   137,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      68,     8,     9,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    68,   130,    -1,    -1,   133,    73,    74,    75,    -1,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,   133,    -1,    -1,    -1,
     137,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    68,     8,
       9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    68,
     130,    -1,    -1,   133,    73,    74,    75,   137,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    68,     8,     9,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    68,   130,   131,    -1,   133,    73,    74,    75,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,
      -1,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,   135,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,
     130,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
     133,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,   133,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      -1,   130,    -1,    -1,    -1,   134,   135,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    68,     8,     9,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,    68,   130,    -1,
      -1,    -1,    73,    74,    75,    -1,   138,   139,   140,   141,
     142,   143,   144,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    68,     8,     9,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    68,   130,    -1,    -1,    -1,
      73,    74,    75,    -1,   138,   139,   140,   141,   142,   143,
     144,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,   140,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    68,
       8,     9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      68,   130,    -1,    -1,    -1,    73,    74,    75,    -1,   138,
     139,   140,   141,   142,   143,   144,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    68,     8,     9,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    68,   130,    -1,    -1,    -1,    73,    74,    75,
      -1,   138,   139,   140,   141,   142,   143,   144,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,   129,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    68,
       8,     9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      68,   130,    -1,    -1,    -1,    73,    74,    75,   137,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,    -1,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,    -1,   141,   142,   143,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,   125,    -1,    -1,   128,   129,   130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,
     142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
     125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      68,     8,     9,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,
     128,    68,   130,    -1,    -1,    -1,    73,    74,    75,    -1,
     138,   139,    -1,   141,   142,   143,   144,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    68,     8,
       9,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,    68,
     130,    -1,    -1,    -1,    73,    74,    75,    -1,   138,   139,
      -1,   141,   142,   143,   144,    -1,    -1,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,   128,
      -1,   130,     0,     1,    -1,     3,     4,     5,    -1,   138,
     139,    -1,   141,   142,   143,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,   133,   134,    -1,    -1,    -1,
     138,   139,     0,     1,    -1,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,   133,   134,    -1,    -1,    -1,
     138,   139,     0,     1,    -1,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,     0,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,     0,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,     0,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,     1,
     134,     3,     4,     5,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,     1,   134,     3,     4,     5,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
     130,   131,    -1,     1,   134,     3,     4,     5,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,   130,   131,    -1,     1,   134,     3,     4,     5,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,   130,   131,    -1,     1,   134,     3,
       4,     5,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,   131,     1,    -1,
       3,     4,     5,    -1,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,     1,    -1,
       3,   124,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,     1,    -1,     3,
      -1,   124,   125,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,     3,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,     3,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
       3,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,     3,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,     3,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,     3,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     139,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   139,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,     3,    -1,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,    79,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,     3,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    70,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    80,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,     3,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,     3,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
      -1,    -1,    -1,   107,     3,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,   123,
     124,   125,    -1,    -1,   128,    -1,    -1,   131,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
     109,     3,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,   109,     3,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,     1,   109,     3,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
     128,    -1,    -1,   131,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    -1,    -1,   131,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,
      -1,   131,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    -1,    -1,   131,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,    -1,     0,     1,   107,     3,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,   123,   124,   125,    -1,    -1,   128,    -1,    -1,   131,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    56,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,   128,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,   129,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,   129,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
     129,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    -1,   129,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,   129,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   128,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,   128,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,   128,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,   128,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,   128,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,   128,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,   128,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,   109,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    28,    -1,
      -1,    -1,   124,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   139,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,   123,   124
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    56,    68,
      69,    76,    77,    78,    79,    81,    82,    83,    84,    85,
      87,    88,    89,   102,   103,   107,   112,   113,   114,   115,
     116,   117,   118,   119,   122,   123,   124,   125,   128,   131,
     151,   152,   153,   155,   180,   217,   218,   219,   220,   221,
     222,   274,   277,   278,   281,   282,   283,   284,   285,   286,
     287,   289,   293,   296,   297,   298,   299,   300,   301,   306,
     307,   316,   317,   318,   325,   326,   330,   331,   334,   339,
     369,   372,   373,   391,   392,   394,   395,   396,   397,   398,
     399,    79,   137,     5,    31,   222,   393,   222,   128,   128,
     128,   155,   222,   393,   128,   128,   287,   288,   325,   334,
      37,   153,   222,   315,   316,   318,   320,   321,   322,   324,
     325,   334,   337,   338,   343,   126,   131,   152,   153,   222,
     135,   137,   131,   135,   134,   125,   126,   217,   222,   135,
     155,   222,   135,   137,   134,   126,   135,   137,   135,   134,
     135,   153,   222,   325,     1,    31,    37,    38,    39,    40,
      41,   131,   151,   153,   219,   221,   222,   274,   284,   285,
     287,   289,   318,   322,   325,   334,   337,   338,   339,   341,
     350,   351,   352,   353,    37,    38,    39,    40,    41,   153,
     325,   352,   128,   139,     1,    29,    30,    31,    32,    33,
      68,   118,   119,   129,   151,   222,   273,   277,   279,   280,
     287,   289,   293,   294,   295,   301,   305,   313,   314,   356,
     357,   358,   359,   360,   361,    76,    77,   334,   128,   330,
     318,   325,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    49,    50,    69,    87,    89,
     102,   114,   115,   116,   117,   122,   123,   135,   155,   176,
     177,   273,   278,   279,   287,   290,   294,   296,   304,   371,
     374,   375,   376,   381,   382,   383,    31,    78,   137,   219,
     221,   306,   372,   373,   391,   392,   399,     1,   219,   283,
     300,   306,   339,   369,   395,     1,   394,   395,     0,   222,
     393,   393,     5,   132,   393,     1,     4,     6,     8,     9,
      68,    73,    74,    75,    86,    87,   100,   104,   105,   106,
     107,   108,   109,   110,   111,   120,   121,   125,   128,   130,
     138,   139,   141,   142,   143,   144,   155,   181,   182,   222,
     223,   224,   225,   226,   229,   230,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   393,   405,
     406,   407,   408,   152,   222,   135,   155,   222,   234,   249,
     251,   255,   267,   268,   269,   234,   247,   248,   255,   266,
     271,   287,   334,   139,   128,   139,   129,   313,   314,   360,
     361,    76,    77,   334,   337,   338,   315,   320,   324,   325,
     129,   325,   129,   325,   325,    87,   155,   207,   209,   211,
     215,   216,   222,   239,   259,   305,   131,   126,   126,   131,
       1,    70,    80,    82,    83,    90,    93,    94,    95,    96,
      98,   100,   101,   128,   130,   131,   134,   156,   157,   158,
     159,   160,   161,   162,   163,   178,   179,   181,   182,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   198,
     202,   203,   204,   205,   222,   230,   253,   305,   317,   319,
     325,   334,   339,   340,   370,    82,    83,   222,   273,   277,
     287,   290,   293,   301,   308,   309,     1,   134,   204,   205,
     153,   222,     1,   222,   275,   276,     1,   134,   276,   309,
      68,   208,   210,   212,   213,   214,   222,   305,     1,   134,
     204,   205,   309,     1,   134,   204,   205,     1,   134,   204,
     205,   153,   222,   133,   133,   133,   133,   133,   133,   135,
     334,   318,   322,   325,     1,   132,   375,   382,   383,   375,
     382,   383,     1,   131,   133,   133,   334,   131,   140,   152,
     222,   267,   271,   272,   133,   135,   155,   222,   134,   135,
     134,   135,   325,    37,   128,   139,   141,   151,   153,   222,
     273,   279,   287,   289,   294,   315,   316,   325,   332,   334,
     335,   338,     1,   129,   133,     1,   129,   133,     1,   133,
       1,   133,   129,   129,   318,   128,   318,   128,   128,   128,
       1,   131,     1,   134,     1,    37,    38,    39,    40,    41,
     131,   222,   273,   279,   287,   290,   294,   325,   352,   353,
       1,   131,     1,   371,   374,   382,   383,   371,   374,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      87,    88,    90,    91,    92,   131,   137,   155,   199,   200,
     201,   222,   230,   249,   251,   269,   330,   362,   363,   366,
     367,   368,   375,   376,   377,   378,   379,   380,   382,   383,
     385,   386,   387,   388,   389,   390,   134,    31,   222,   393,
     222,   217,   218,   220,   221,   315,   316,   322,   325,   334,
     339,   341,   375,   383,   219,   306,   132,   248,   129,   128,
     234,   255,   128,   234,   255,   234,   255,   128,   222,   273,
     279,   287,   290,   294,   312,   271,   128,   128,   312,   271,
     128,   128,   128,   128,   128,   128,   234,   255,   128,   129,
     251,   269,   279,   287,   289,   294,   302,   354,   393,   135,
     140,   183,   184,   227,   231,   249,   135,     1,   134,   135,
     222,     1,     7,     8,     9,   128,   136,   139,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,   132,   250,
     184,   227,   228,   236,   256,   125,   145,   146,   142,   143,
      10,    11,   239,   259,    12,    13,   126,   127,    14,    15,
     141,   147,   148,    16,    17,   149,   250,   129,     7,     8,
       9,   128,   136,   139,   250,   125,   145,   146,   142,   143,
      10,    11,    12,    13,   126,   127,    14,    15,   141,   147,
     148,    16,    17,   149,   250,   129,   129,   109,   222,   305,
     400,   403,   404,   135,   135,   250,     1,   129,   133,   251,
     269,   250,   129,   133,   251,   149,   149,   129,   140,   152,
     271,   272,   140,   152,   271,   272,   129,   129,   129,   129,
     315,   320,   324,   129,   129,   315,    11,   127,   133,   132,
     128,   325,   334,   335,    68,   214,   222,   305,   214,     1,
     222,   273,   287,   290,   301,   310,   305,   339,   340,   128,
     155,   222,   222,   305,     1,   128,   310,   125,   128,   222,
     305,   131,   330,   382,   383,   382,   383,   382,   131,   382,
     383,   131,     1,   134,     1,     1,   131,   133,   133,    71,
      72,    93,    97,    99,   134,    71,    72,   134,   131,     1,
     202,   203,     1,   202,   203,     1,   132,   128,   137,   222,
     291,   292,   315,   321,   323,   325,   334,   341,   342,   343,
       1,   305,   313,   358,   334,   319,   325,   128,   137,   162,
     163,   178,   179,   181,   182,   191,   222,   305,   126,   155,
     222,   222,   273,   287,   290,   126,   126,   132,   330,   331,
     133,     1,   131,   135,    28,   154,   222,   127,   133,   132,
     222,   335,   337,   350,   350,   350,   350,   350,   350,   131,
     133,   134,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   227,   228,   230,   248,   267,   304,
     347,   348,   315,   318,   320,   322,   324,   315,   322,   135,
     249,   268,   344,   346,   382,   383,   382,   383,   350,   351,
     350,   351,   140,   140,   140,    54,   356,   357,     1,   276,
     135,   135,     1,   134,   204,   205,     1,   134,   204,   205,
     135,   129,   222,   313,   314,   325,   334,   335,   360,   361,
     140,   152,   271,   272,   325,   334,   338,   334,   128,   139,
     332,     1,     1,   133,     1,    54,   222,   356,   357,   133,
       1,    54,   222,   356,   357,   133,     1,    54,   222,   356,
     357,   133,    54,   222,   356,   357,     3,    28,    47,    76,
      77,   129,   327,   328,   329,   249,   152,   222,   251,   134,
     135,   131,   131,   137,   271,   272,   137,   128,   128,     1,
     128,    55,    56,    57,    59,    60,    61,    62,    65,    88,
     222,   330,   362,   385,   389,   128,   222,   131,   131,   131,
     227,   228,   251,   269,   128,   287,   128,   128,   195,   222,
     131,   131,   131,   137,   136,   136,   131,   133,     1,   377,
     378,   377,   378,   362,   363,   371,   374,   362,   363,   371,
     374,     1,     1,   393,   393,   153,   222,   135,   135,   334,
     322,   325,   375,   383,   375,   383,   383,   248,   131,    68,
     151,   222,   279,   287,   289,   294,   303,   355,   222,   304,
     126,   128,   139,   222,   273,   279,   287,   290,   294,   325,
     333,   334,   336,   222,   273,   279,   287,   290,   294,   311,
     251,   354,   382,   222,   139,   336,   311,   249,   393,   393,
     393,   249,   355,   355,   129,   222,   279,   287,   289,   294,
     335,   129,   136,     1,   174,   175,     1,   134,   133,   140,
       1,   174,   175,   134,     1,   174,   175,     1,   222,   129,
     228,   231,   232,   268,     1,   222,   251,   269,   227,   249,
       1,   236,   256,   236,   256,   236,   256,   237,   257,   237,
     257,   238,   258,   238,   258,   239,   259,   239,   259,   239,
     259,   227,   228,   241,   260,   227,   228,   241,   260,   227,
     228,   242,   261,   227,   228,   243,   262,   227,   228,   244,
     263,   245,   264,   246,   265,   137,   227,   228,   251,   252,
     269,   270,   227,   249,     1,   222,   129,   231,   232,     1,
     222,   251,   269,   227,   249,   236,   256,   236,   256,   236,
     256,   237,   257,   237,   257,   238,   258,   238,   258,   239,
     259,   239,   259,   239,   259,   239,   259,   227,   228,   241,
     260,   227,   228,   241,   260,   227,   228,   242,   261,   227,
     228,   243,   262,   227,   228,   244,   263,   245,   264,   246,
     265,   137,   251,   252,   269,   270,   227,   249,   126,   127,
     222,   401,   402,   222,   134,   400,   403,   404,   404,   228,
     268,   249,   268,   393,   228,   268,   249,   268,   251,   252,
     269,   270,   251,   252,   269,   270,   140,   140,   140,   140,
     140,   140,   215,   207,   209,   211,   222,   325,   334,   127,
     132,   335,   127,   135,   126,   135,   222,   273,   287,   290,
     335,   325,   334,   341,   342,   195,   292,   315,   325,   334,
     135,   222,   135,   222,   335,   222,   325,   128,   131,   134,
     185,   186,   185,   186,   382,   382,   382,   224,   382,   382,
       1,   347,   348,   129,   271,   272,   135,   133,     1,   305,
     313,   358,   334,   315,   323,   325,   137,   330,   222,   128,
     319,   319,   222,     1,     1,   292,   216,   126,   214,   214,
     271,   272,   132,   275,   204,   205,     1,   134,   276,   132,
     137,   132,   137,   213,   209,   222,   132,   222,   132,   382,
     383,     1,   131,   133,   131,   133,   131,   166,   167,   170,
     171,   172,   134,   164,   167,   131,   134,   166,   167,   170,
     171,   172,   132,    37,   341,   342,   343,   344,   346,   349,
       1,   134,   276,     1,   134,   276,     1,   134,   204,   205,
     325,   334,   335,   129,   129,   129,   140,   140,   140,   334,
     332,   129,   360,   361,   140,   152,   271,   272,   356,   357,
     305,   356,   356,   356,   357,   129,   128,   129,   133,   328,
     129,   129,   129,   129,   133,     1,   174,   175,   362,   363,
     371,   374,   137,   137,   362,   363,   371,   374,   251,   269,
     251,   269,   129,   251,   269,   137,   271,   272,   137,   128,
     128,   362,   128,   228,   269,   128,   137,    59,     1,   129,
     131,   222,   251,   269,   384,   131,   131,   131,   131,   131,
     393,   128,   249,   249,   222,   362,   363,   371,   374,    92,
      90,    91,    92,   126,   322,   383,   383,   131,   151,   152,
     151,   279,   287,   289,   294,   335,   129,   129,   129,   335,
     216,   129,   325,   336,   360,   361,   271,   272,   126,   334,
     128,   333,   139,   126,   139,   222,   273,   279,   287,   290,
     294,   336,   129,   129,   129,   129,   271,   272,   139,   139,
     336,   133,   129,   133,   133,   133,   129,   133,   135,   236,
     256,   345,   393,     1,   134,   227,   249,     1,     1,   129,
     133,   129,   140,   140,     1,   133,   137,   137,   133,   137,
     137,   129,   140,   140,   137,   137,   137,   137,   222,   222,
     131,   133,   222,   393,   134,   134,   129,   137,   137,   137,
     137,   137,   137,   137,   137,   325,   334,   209,   216,   126,
     135,   135,   222,   334,   325,   129,   334,   315,   129,   135,
     135,   222,   129,     1,   174,   175,   291,   325,   222,   128,
     315,   323,   323,   271,   272,   128,   129,   127,   216,   127,
     127,   271,   272,   131,     1,   131,   207,   206,   305,   207,
     206,   211,   132,   135,     1,   168,   169,     1,   168,   169,
     383,     1,   347,   348,   133,   134,   344,   346,     1,   131,
       1,   131,   334,   332,   129,   129,   129,   140,   140,   140,
     335,   338,   251,   129,   328,   393,     1,   362,   363,   371,
     374,   362,   363,   371,   374,   129,   129,   129,   129,     1,
     362,   129,   251,   362,   363,   137,   137,   269,   129,   251,
     269,    59,   269,   384,   393,   128,   362,   137,   131,     1,
     131,     1,   129,   269,   384,     3,   129,   137,   393,   129,
     129,   133,   128,   128,   195,   129,   129,     1,   129,   127,
     325,   334,   336,   129,   129,   129,   140,   140,   216,   333,
     129,   360,   361,   271,   272,   216,   271,   272,   126,   139,
     128,   344,   140,   140,   271,   272,   271,   272,   139,   354,
     222,   222,   249,     1,   222,   349,   228,   268,   227,   228,
     227,   228,   248,   266,   227,   228,   248,   266,   227,   228,
     227,   228,   248,   266,   227,   228,   248,   266,   227,   228,
     248,   266,   227,   228,   248,   266,   227,   228,   248,   266,
     227,   228,   248,   266,   401,   131,   131,   127,   216,   135,
     382,   315,   132,   135,     1,   128,   137,   137,   127,   204,
     205,   131,   204,   205,   132,   335,   132,   211,   349,   134,
     344,   346,     1,   204,   205,   204,   205,   129,   129,   362,
     362,   362,   362,   362,   363,   129,   128,   384,   129,   251,
     269,   251,   362,     1,   129,   251,   269,   139,   364,   365,
     393,   131,   365,     3,   129,   137,   135,   195,   249,   249,
       1,     1,   333,   129,   127,   129,   129,   140,   140,   127,
     140,   140,   216,   271,   272,   354,   140,   140,   140,   140,
     271,   272,   129,   129,   129,   129,   129,   133,   134,   127,
     347,   271,   272,   271,   272,   204,   205,   207,   207,   133,
     134,     1,    67,    67,   251,   269,   129,   251,   269,   129,
     131,   129,   131,   362,   363,   129,   362,   363,   222,   129,
     133,   137,   128,     3,   129,   137,   365,   131,   365,    75,
     195,   196,   197,   129,   129,   129,   133,   127,   140,   140,
     129,   140,   140,   134,   131,   134,   362,   362,   129,   129,
     131,   362,   251,   362,   363,   140,   131,   364,   365,   249,
     365,   131,   365,   129,   137,     3,   129,   137,   382,   382,
     134,   196,   135,   195,   135,   236,   256,   344,   129,   393,
     129,   129,   129,   129,   137,   131,   365,   365,   131,   365,
     197,   129,   349,   362,   128,   131,   131,   131,   365,   129,
     129,   129,   137,   134,   133,   134,   249,   129,   131,   131,
     131,   365,   134,   129,   131,   129,   131
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 151: /* guess_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12079 "grammar.ec"
        break;
      case 152: /* type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12086 "grammar.ec"
        break;
      case 153: /* base_strict_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12093 "grammar.ec"
        break;
      case 154: /* base_strict_type_name */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 12100 "grammar.ec"
        break;
      case 155: /* strict_type */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12107 "grammar.ec"
        break;
      case 156: /* class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12114 "grammar.ec"
        break;
      case 157: /* constructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12121 "grammar.ec"
        break;
      case 158: /* destructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12128 "grammar.ec"
        break;
      case 159: /* virtual_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12135 "grammar.ec"
        break;
      case 160: /* class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12142 "grammar.ec"
        break;
      case 161: /* virtual_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12149 "grammar.ec"
        break;
      case 162: /* class_function_definition */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12156 "grammar.ec"
        break;
      case 163: /* class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12163 "grammar.ec"
        break;
      case 164: /* instance_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12170 "grammar.ec"
        break;
      case 165: /* instance_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12177 "grammar.ec"
        break;
      case 166: /* instance_class_function_definition */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12184 "grammar.ec"
        break;
      case 167: /* instance_class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 245 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12191 "grammar.ec"
        break;
      case 168: /* data_member_initialization */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12198 "grammar.ec"
        break;
      case 169: /* data_member_initialization_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12205 "grammar.ec"
        break;
      case 170: /* data_member_initialization_list */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12212 "grammar.ec"
        break;
      case 171: /* data_member_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12219 "grammar.ec"
        break;
      case 172: /* data_member_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12226 "grammar.ec"
        break;
      case 173: /* members_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12233 "grammar.ec"
        break;
      case 174: /* members_initialization_list */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12240 "grammar.ec"
        break;
      case 175: /* members_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12247 "grammar.ec"
        break;
      case 176: /* instantiation_named */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12254 "grammar.ec"
        break;
      case 177: /* instantiation_named_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12261 "grammar.ec"
        break;
      case 181: /* instantiation_unnamed */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12268 "grammar.ec"
        break;
      case 182: /* instantiation_unnamed_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12275 "grammar.ec"
        break;
      case 185: /* default_property */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12282 "grammar.ec"
        break;
      case 186: /* default_property_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12289 "grammar.ec"
        break;
      case 187: /* default_property_list */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12296 "grammar.ec"
        break;
      case 188: /* default_property_list_error */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12303 "grammar.ec"
        break;
      case 191: /* property */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1393 of yacc.c  */
#line 12310 "grammar.ec"
        break;
      case 202: /* struct_declaration */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12317 "grammar.ec"
        break;
      case 203: /* struct_declaration_error */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12324 "grammar.ec"
        break;
      case 204: /* struct_declaration_list */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12331 "grammar.ec"
        break;
      case 205: /* struct_declaration_list_error */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12338 "grammar.ec"
        break;
      case 206: /* template_datatype */
/* Line 1393 of yacc.c  */
#line 273 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1393 of yacc.c  */
#line 12345 "grammar.ec"
        break;
      case 207: /* template_type_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12352 "grammar.ec"
        break;
      case 208: /* template_type_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12359 "grammar.ec"
        break;
      case 209: /* template_identifier_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12366 "grammar.ec"
        break;
      case 210: /* template_identifier_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12373 "grammar.ec"
        break;
      case 211: /* template_expression_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12380 "grammar.ec"
        break;
      case 212: /* template_expression_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12387 "grammar.ec"
        break;
      case 213: /* template_parameter */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12394 "grammar.ec"
        break;
      case 214: /* template_parameters_list */
/* Line 1393 of yacc.c  */
#line 274 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1393 of yacc.c  */
#line 12401 "grammar.ec"
        break;
      case 215: /* template_argument */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12408 "grammar.ec"
        break;
      case 216: /* template_arguments_list */
/* Line 1393 of yacc.c  */
#line 275 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1393 of yacc.c  */
#line 12415 "grammar.ec"
        break;
      case 217: /* class_entry */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12422 "grammar.ec"
        break;
      case 218: /* class_decl */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12429 "grammar.ec"
        break;
      case 219: /* class */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12436 "grammar.ec"
        break;
      case 220: /* class_head */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12443 "grammar.ec"
        break;
      case 221: /* class_error */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12450 "grammar.ec"
        break;
      case 222: /* identifier */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1393 of yacc.c  */
#line 12457 "grammar.ec"
        break;
      case 223: /* primary_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12464 "grammar.ec"
        break;
      case 224: /* i18n_string */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12471 "grammar.ec"
        break;
      case 229: /* primary_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12478 "grammar.ec"
        break;
      case 230: /* postfix_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12485 "grammar.ec"
        break;
      case 231: /* argument_expression_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12492 "grammar.ec"
        break;
      case 232: /* argument_expression_list_error */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12499 "grammar.ec"
        break;
      case 234: /* unary_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12506 "grammar.ec"
        break;
      case 236: /* cast_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12513 "grammar.ec"
        break;
      case 237: /* multiplicative_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12520 "grammar.ec"
        break;
      case 238: /* additive_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12527 "grammar.ec"
        break;
      case 239: /* shift_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12534 "grammar.ec"
        break;
      case 241: /* relational_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12541 "grammar.ec"
        break;
      case 242: /* equality_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12548 "grammar.ec"
        break;
      case 243: /* and_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12555 "grammar.ec"
        break;
      case 244: /* exclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12562 "grammar.ec"
        break;
      case 245: /* inclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12569 "grammar.ec"
        break;
      case 246: /* logical_and_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12576 "grammar.ec"
        break;
      case 247: /* logical_or_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12583 "grammar.ec"
        break;
      case 248: /* conditional_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12590 "grammar.ec"
        break;
      case 249: /* assignment_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12597 "grammar.ec"
        break;
      case 251: /* expression */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12604 "grammar.ec"
        break;
      case 253: /* postfix_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12611 "grammar.ec"
        break;
      case 255: /* unary_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12618 "grammar.ec"
        break;
      case 256: /* cast_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12625 "grammar.ec"
        break;
      case 257: /* multiplicative_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12632 "grammar.ec"
        break;
      case 258: /* additive_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12639 "grammar.ec"
        break;
      case 259: /* shift_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12646 "grammar.ec"
        break;
      case 260: /* relational_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12653 "grammar.ec"
        break;
      case 261: /* equality_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12660 "grammar.ec"
        break;
      case 262: /* and_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12667 "grammar.ec"
        break;
      case 263: /* exclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12674 "grammar.ec"
        break;
      case 264: /* inclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12681 "grammar.ec"
        break;
      case 265: /* logical_and_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12688 "grammar.ec"
        break;
      case 266: /* logical_or_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12695 "grammar.ec"
        break;
      case 267: /* conditional_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12702 "grammar.ec"
        break;
      case 268: /* assignment_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12709 "grammar.ec"
        break;
      case 269: /* expression_error */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12716 "grammar.ec"
        break;
      case 271: /* constant_expression */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12723 "grammar.ec"
        break;
      case 272: /* constant_expression_error */
/* Line 1393 of yacc.c  */
#line 207 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12730 "grammar.ec"
        break;
      case 273: /* storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12737 "grammar.ec"
        break;
      case 274: /* external_storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12744 "grammar.ec"
        break;
      case 275: /* enumerator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1393 of yacc.c  */
#line 12751 "grammar.ec"
        break;
      case 276: /* enumerator_list */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1393 of yacc.c  */
#line 12758 "grammar.ec"
        break;
      case 278: /* enum_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12765 "grammar.ec"
        break;
      case 279: /* enum_specifier_compound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12772 "grammar.ec"
        break;
      case 280: /* enum_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12779 "grammar.ec"
        break;
      case 282: /* enum_class */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12786 "grammar.ec"
        break;
      case 283: /* enum_class_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12793 "grammar.ec"
        break;
      case 284: /* class_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12800 "grammar.ec"
        break;
      case 285: /* class_specifier_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12807 "grammar.ec"
        break;
      case 286: /* ext_storage */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12814 "grammar.ec"
        break;
      case 287: /* type_qualifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12821 "grammar.ec"
        break;
      case 288: /* type_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12828 "grammar.ec"
        break;
      case 289: /* type_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12835 "grammar.ec"
        break;
      case 290: /* strict_type_specifier */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12842 "grammar.ec"
        break;
      case 291: /* struct_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12849 "grammar.ec"
        break;
      case 292: /* struct_declarator_list */
/* Line 1393 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1393 of yacc.c  */
#line 12856 "grammar.ec"
        break;
      case 293: /* struct_entry */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12863 "grammar.ec"
        break;
      case 294: /* struct_or_union_specifier_compound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12870 "grammar.ec"
        break;
      case 295: /* struct_or_union_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12877 "grammar.ec"
        break;
      case 296: /* struct_or_union_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12884 "grammar.ec"
        break;
      case 297: /* struct_decl */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12891 "grammar.ec"
        break;
      case 298: /* struct_head */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12898 "grammar.ec"
        break;
      case 299: /* struct_class */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12905 "grammar.ec"
        break;
      case 300: /* struct_class_error */
/* Line 1393 of yacc.c  */
#line 218 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12912 "grammar.ec"
        break;
      case 302: /* specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12919 "grammar.ec"
        break;
      case 303: /* guess_specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12926 "grammar.ec"
        break;
      case 304: /* declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12933 "grammar.ec"
        break;
      case 305: /* guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12940 "grammar.ec"
        break;
      case 306: /* external_guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12947 "grammar.ec"
        break;
      case 307: /* external_guess_declaration_specifiers_error */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12954 "grammar.ec"
        break;
      case 308: /* _inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12961 "grammar.ec"
        break;
      case 309: /* inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12968 "grammar.ec"
        break;
      case 313: /* identifier_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12975 "grammar.ec"
        break;
      case 314: /* identifier_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12982 "grammar.ec"
        break;
      case 315: /* direct_declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12989 "grammar.ec"
        break;
      case 316: /* direct_declarator_nofunction */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12996 "grammar.ec"
        break;
      case 317: /* direct_declarator_function_start */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13003 "grammar.ec"
        break;
      case 318: /* direct_declarator_function */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13010 "grammar.ec"
        break;
      case 319: /* direct_declarator_function_error */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13017 "grammar.ec"
        break;
      case 320: /* direct_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13024 "grammar.ec"
        break;
      case 321: /* direct_declarator_function_start_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13031 "grammar.ec"
        break;
      case 322: /* direct_declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13038 "grammar.ec"
        break;
      case 323: /* direct_declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13045 "grammar.ec"
        break;
      case 324: /* direct_declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13052 "grammar.ec"
        break;
      case 325: /* ext_decl */
/* Line 1393 of yacc.c  */
#line 278 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1393 of yacc.c  */
#line 13059 "grammar.ec"
        break;
      case 327: /* attribute_word */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13066 "grammar.ec"
        break;
      case 328: /* attribute */
/* Line 1393 of yacc.c  */
#line 279 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1393 of yacc.c  */
#line 13073 "grammar.ec"
        break;
      case 329: /* attribs_list */
/* Line 1393 of yacc.c  */
#line 280 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1393 of yacc.c  */
#line 13080 "grammar.ec"
        break;
      case 330: /* attrib */
/* Line 1393 of yacc.c  */
#line 277 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1393 of yacc.c  */
#line 13087 "grammar.ec"
        break;
      case 331: /* multi_attrib */
/* Line 1393 of yacc.c  */
#line 281 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1393 of yacc.c  */
#line 13094 "grammar.ec"
        break;
      case 332: /* direct_abstract_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13101 "grammar.ec"
        break;
      case 333: /* direct_abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13108 "grammar.ec"
        break;
      case 334: /* pointer */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1393 of yacc.c  */
#line 13115 "grammar.ec"
        break;
      case 335: /* abstract_declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13122 "grammar.ec"
        break;
      case 336: /* abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13129 "grammar.ec"
        break;
      case 337: /* declarator */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13136 "grammar.ec"
        break;
      case 338: /* declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13143 "grammar.ec"
        break;
      case 339: /* declarator_function */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13150 "grammar.ec"
        break;
      case 340: /* declarator_function_error */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13157 "grammar.ec"
        break;
      case 341: /* declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13164 "grammar.ec"
        break;
      case 342: /* declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13171 "grammar.ec"
        break;
      case 343: /* declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 224 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13178 "grammar.ec"
        break;
      case 344: /* initializer */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13185 "grammar.ec"
        break;
      case 346: /* initializer_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13192 "grammar.ec"
        break;
      case 347: /* initializer_condition */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13199 "grammar.ec"
        break;
      case 348: /* initializer_condition_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13206 "grammar.ec"
        break;
      case 349: /* initializer_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1393 of yacc.c  */
#line 13213 "grammar.ec"
        break;
      case 350: /* init_declarator */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13220 "grammar.ec"
        break;
      case 351: /* init_declarator_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13227 "grammar.ec"
        break;
      case 352: /* init_declarator_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13234 "grammar.ec"
        break;
      case 353: /* init_declarator_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13241 "grammar.ec"
        break;
      case 354: /* type_name */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13248 "grammar.ec"
        break;
      case 355: /* guess_type_name */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13255 "grammar.ec"
        break;
      case 356: /* parameter_declaration */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13262 "grammar.ec"
        break;
      case 357: /* parameter_declaration_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13269 "grammar.ec"
        break;
      case 358: /* parameter_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13276 "grammar.ec"
        break;
      case 359: /* parameter_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13283 "grammar.ec"
        break;
      case 360: /* parameter_type_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13290 "grammar.ec"
        break;
      case 361: /* parameter_type_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13297 "grammar.ec"
        break;
      case 362: /* statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13304 "grammar.ec"
        break;
      case 363: /* statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13311 "grammar.ec"
        break;
      case 367: /* labeled_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13318 "grammar.ec"
        break;
      case 368: /* labeled_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13325 "grammar.ec"
        break;
      case 369: /* declaration_mode */
/* Line 1393 of yacc.c  */
#line 276 "grammar.y"
        { };
/* Line 1393 of yacc.c  */
#line 13332 "grammar.ec"
        break;
      case 371: /* declaration */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1393 of yacc.c  */
#line 13339 "grammar.ec"
        break;
      case 375: /* declaration_list */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13346 "grammar.ec"
        break;
      case 376: /* declaration_list_error */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13353 "grammar.ec"
        break;
      case 377: /* statement_list */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13360 "grammar.ec"
        break;
      case 378: /* statement_list_error */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13367 "grammar.ec"
        break;
      case 379: /* compound_inside */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13374 "grammar.ec"
        break;
      case 380: /* compound_inside_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13381 "grammar.ec"
        break;
      case 381: /* compound_start */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1393 of yacc.c  */
#line 13388 "grammar.ec"
        break;
      case 382: /* compound_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13395 "grammar.ec"
        break;
      case 383: /* compound_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13402 "grammar.ec"
        break;
      case 384: /* expression_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13409 "grammar.ec"
        break;
      case 385: /* selection_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13416 "grammar.ec"
        break;
      case 386: /* selection_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13423 "grammar.ec"
        break;
      case 387: /* iteration_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13430 "grammar.ec"
        break;
      case 388: /* iteration_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13437 "grammar.ec"
        break;
      case 389: /* jump_statement */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13444 "grammar.ec"
        break;
      case 390: /* jump_statement_error */
/* Line 1393 of yacc.c  */
#line 233 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13451 "grammar.ec"
        break;
      case 391: /* function_definition */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13458 "grammar.ec"
        break;
      case 392: /* function_definition_error */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13465 "grammar.ec"
        break;
      case 393: /* string_literal */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13472 "grammar.ec"
        break;
      case 394: /* external_declaration */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13479 "grammar.ec"
        break;
      case 395: /* external_declaration_error */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13486 "grammar.ec"
        break;
      case 396: /* translation_unit_error */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13493 "grammar.ec"
        break;
      case 397: /* translation_unit */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13500 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1787 of yacc.c  */
#line 289 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1787 of yacc.c  */
#line 308 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1787 of yacc.c  */
#line 346 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1787 of yacc.c  */
#line 348 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1787 of yacc.c  */
#line 427 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1787 of yacc.c  */
#line 431 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1787 of yacc.c  */
#line 435 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1787 of yacc.c  */
#line 437 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1787 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1787 of yacc.c  */
#line 478 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1787 of yacc.c  */
#line 483 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1787 of yacc.c  */
#line 488 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1787 of yacc.c  */
#line 493 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1787 of yacc.c  */
#line 495 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1787 of yacc.c  */
#line 500 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1787 of yacc.c  */
#line 502 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1787 of yacc.c  */
#line 507 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1787 of yacc.c  */
#line 509 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1787 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1787 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1787 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1787 of yacc.c  */
#line 520 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1787 of yacc.c  */
#line 522 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1787 of yacc.c  */
#line 526 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1787 of yacc.c  */
#line 530 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1787 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1787 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1787 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1787 of yacc.c  */
#line 549 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1787 of yacc.c  */
#line 551 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1787 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1787 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1787 of yacc.c  */
#line 564 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1787 of yacc.c  */
#line 569 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1787 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1787 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1787 of yacc.c  */
#line 578 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1787 of yacc.c  */
#line 582 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1787 of yacc.c  */
#line 583 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1787 of yacc.c  */
#line 587 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1787 of yacc.c  */
#line 589 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1787 of yacc.c  */
#line 599 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1787 of yacc.c  */
#line 603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1787 of yacc.c  */
#line 605 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1787 of yacc.c  */
#line 607 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1787 of yacc.c  */
#line 611 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1787 of yacc.c  */
#line 613 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1787 of yacc.c  */
#line 615 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1787 of yacc.c  */
#line 618 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1787 of yacc.c  */
#line 630 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1787 of yacc.c  */
#line 641 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1787 of yacc.c  */
#line 660 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1787 of yacc.c  */
#line 662 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1787 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1787 of yacc.c  */
#line 667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1787 of yacc.c  */
#line 668 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1787 of yacc.c  */
#line 669 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1787 of yacc.c  */
#line 670 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1787 of yacc.c  */
#line 671 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1787 of yacc.c  */
#line 674 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1787 of yacc.c  */
#line 686 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1787 of yacc.c  */
#line 691 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1787 of yacc.c  */
#line 692 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1787 of yacc.c  */
#line 693 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1787 of yacc.c  */
#line 697 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1787 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1787 of yacc.c  */
#line 699 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 700 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1787 of yacc.c  */
#line 701 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1787 of yacc.c  */
#line 702 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1787 of yacc.c  */
#line 703 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1787 of yacc.c  */
#line 708 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 710 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1787 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1787 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1787 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1787 of yacc.c  */
#line 721 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1787 of yacc.c  */
#line 723 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1787 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1787 of yacc.c  */
#line 755 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1787 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1787 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1787 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1787 of yacc.c  */
#line 766 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1787 of yacc.c  */
#line 768 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1787 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1787 of yacc.c  */
#line 799 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1787 of yacc.c  */
#line 801 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1787 of yacc.c  */
#line 806 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1787 of yacc.c  */
#line 808 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1787 of yacc.c  */
#line 813 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1787 of yacc.c  */
#line 815 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1787 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1787 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1787 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1787 of yacc.c  */
#line 825 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1787 of yacc.c  */
#line 830 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1787 of yacc.c  */
#line 833 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 836 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 839 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 904 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 906 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1787 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1787 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1787 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1787 of yacc.c  */
#line 917 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1787 of yacc.c  */
#line 919 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1787 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1787 of yacc.c  */
#line 953 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1787 of yacc.c  */
#line 954 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1787 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1787 of yacc.c  */
#line 959 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1787 of yacc.c  */
#line 960 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1787 of yacc.c  */
#line 961 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1787 of yacc.c  */
#line 965 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1787 of yacc.c  */
#line 966 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1787 of yacc.c  */
#line 967 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1787 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1787 of yacc.c  */
#line 976 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1787 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1787 of yacc.c  */
#line 982 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1787 of yacc.c  */
#line 985 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1787 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1787 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1787 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1787 of yacc.c  */
#line 997 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1787 of yacc.c  */
#line 999 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1787 of yacc.c  */
#line 1003 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1787 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1787 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1787 of yacc.c  */
#line 1014 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1787 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1787 of yacc.c  */
#line 1020 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1787 of yacc.c  */
#line 1026 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1787 of yacc.c  */
#line 1028 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1787 of yacc.c  */
#line 1032 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 1037 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 1039 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 1044 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1787 of yacc.c  */
#line 1051 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1787 of yacc.c  */
#line 1053 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1787 of yacc.c  */
#line 1058 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1787 of yacc.c  */
#line 1063 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1787 of yacc.c  */
#line 1065 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1787 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1787 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1787 of yacc.c  */
#line 1074 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1787 of yacc.c  */
#line 1076 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1787 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1787 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1787 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1787 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1787 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1787 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1787 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1787 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1787 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1787 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1787 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1787 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1787 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1787 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1787 of yacc.c  */
#line 1101 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1787 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1787 of yacc.c  */
#line 1104 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1787 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1787 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1787 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1787 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1787 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1787 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1787 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1787 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1787 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1787 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1787 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1787 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1787 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1787 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1787 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1787 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1787 of yacc.c  */
#line 1128 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1787 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1787 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1787 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1787 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1787 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1787 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1787 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1787 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1787 of yacc.c  */
#line 1149 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1787 of yacc.c  */
#line 1152 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1787 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1787 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1787 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1787 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1787 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1787 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1787 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1787 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1787 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1787 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1787 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1787 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1787 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1787 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1787 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1787 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1787 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1787 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1787 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1787 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1787 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1787 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1787 of yacc.c  */
#line 1223 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1787 of yacc.c  */
#line 1224 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1787 of yacc.c  */
#line 1264 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1787 of yacc.c  */
#line 1265 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1787 of yacc.c  */
#line 1270 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1787 of yacc.c  */
#line 1277 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1787 of yacc.c  */
#line 1279 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1787 of yacc.c  */
#line 1286 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1787 of yacc.c  */
#line 1287 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1787 of yacc.c  */
#line 1289 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1787 of yacc.c  */
#line 1291 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1787 of yacc.c  */
#line 1299 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1787 of yacc.c  */
#line 1300 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1787 of yacc.c  */
#line 1305 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1787 of yacc.c  */
#line 1312 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1787 of yacc.c  */
#line 1319 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1787 of yacc.c  */
#line 1325 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1787 of yacc.c  */
#line 1332 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1787 of yacc.c  */
#line 1338 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1787 of yacc.c  */
#line 1347 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1787 of yacc.c  */
#line 1354 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1787 of yacc.c  */
#line 1360 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1787 of yacc.c  */
#line 1366 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1787 of yacc.c  */
#line 1372 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1787 of yacc.c  */
#line 1378 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1787 of yacc.c  */
#line 1384 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1787 of yacc.c  */
#line 1395 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 1401 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1787 of yacc.c  */
#line 1405 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1787 of yacc.c  */
#line 1406 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1787 of yacc.c  */
#line 1407 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1787 of yacc.c  */
#line 1411 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1787 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1787 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1787 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1787 of yacc.c  */
#line 1418 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1787 of yacc.c  */
#line 1419 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1787 of yacc.c  */
#line 1420 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1787 of yacc.c  */
#line 1422 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1787 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1787 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1787 of yacc.c  */
#line 1437 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1787 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1787 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1787 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1787 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1787 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1787 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1787 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1787 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1787 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1787 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1787 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1787 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1787 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1787 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1787 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1787 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1787 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1787 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1787 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1787 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1787 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1787 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1787 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1787 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1787 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1787 of yacc.c  */
#line 1477 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1787 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1787 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1787 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1787 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1787 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1787 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1787 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1787 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1787 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1787 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1787 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1787 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1787 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1787 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1787 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1787 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1787 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1787 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1787 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1787 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1787 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1787 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1787 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1787 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1787 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1787 of yacc.c  */
#line 1539 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1787 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1787 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1787 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1787 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1787 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1787 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1787 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1787 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1787 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1787 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1787 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1787 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1787 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1787 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1787 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1787 of yacc.c  */
#line 1578 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1787 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 356:
/* Line 1787 of yacc.c  */
#line 1584 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1787 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1787 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1787 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1787 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1787 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 363:
/* Line 1787 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1787 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1787 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1787 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 368:
/* Line 1787 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1787 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1787 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1787 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1787 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 374:
/* Line 1787 of yacc.c  */
#line 1615 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 376:
/* Line 1787 of yacc.c  */
#line 1623 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1787 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1787 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1787 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1787 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1787 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1787 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 383:
/* Line 1787 of yacc.c  */
#line 1630 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1787 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1787 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1787 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1787 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1787 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1787 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1787 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 392:
/* Line 1787 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1787 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1787 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1787 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 397:
/* Line 1787 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1787 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1787 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1787 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 402:
/* Line 1787 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1787 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1787 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1787 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 407:
/* Line 1787 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1787 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 410:
/* Line 1787 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1787 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 413:
/* Line 1787 of yacc.c  */
#line 1682 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1787 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1787 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1787 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1787 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1787 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1787 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1787 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1787 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1787 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1787 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1787 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1787 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1787 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1787 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1787 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 430:
/* Line 1787 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1787 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1787 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1787 of yacc.c  */
#line 1712 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1787 of yacc.c  */
#line 1713 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1787 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1787 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1787 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1787 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 440:
/* Line 1787 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 441:
/* Line 1787 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 442:
/* Line 1787 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 443:
/* Line 1787 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 444:
/* Line 1787 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 445:
/* Line 1787 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 446:
/* Line 1787 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 447:
/* Line 1787 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 448:
/* Line 1787 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 449:
/* Line 1787 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 450:
/* Line 1787 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 451:
/* Line 1787 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 452:
/* Line 1787 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 453:
/* Line 1787 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 455:
/* Line 1787 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 456:
/* Line 1787 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 457:
/* Line 1787 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 459:
/* Line 1787 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 461:
/* Line 1787 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1787 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1787 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 464:
/* Line 1787 of yacc.c  */
#line 1757 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1787 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 466:
/* Line 1787 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 467:
/* Line 1787 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 468:
/* Line 1787 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1787 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1787 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1787 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1787 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1787 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1787 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1787 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1787 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1787 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 478:
/* Line 1787 of yacc.c  */
#line 1809 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 482:
/* Line 1787 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1787 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1787 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1787 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1787 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1787 of yacc.c  */
#line 1833 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 489:
/* Line 1787 of yacc.c  */
#line 1834 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1787 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1787 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1787 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 494:
/* Line 1787 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1787 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1787 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1787 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 499:
/* Line 1787 of yacc.c  */
#line 1862 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 501:
/* Line 1787 of yacc.c  */
#line 1868 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 502:
/* Line 1787 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1787 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1787 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1787 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1787 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1787 of yacc.c  */
#line 1915 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 508:
/* Line 1787 of yacc.c  */
#line 1916 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1787 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1787 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1787 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1787 of yacc.c  */
#line 1924 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1787 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1787 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1787 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 517:
/* Line 1787 of yacc.c  */
#line 1934 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1787 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1787 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1787 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 522:
/* Line 1787 of yacc.c  */
#line 1943 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1787 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1787 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1787 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 527:
/* Line 1787 of yacc.c  */
#line 1952 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1787 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1787 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1787 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 532:
/* Line 1787 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1787 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 535:
/* Line 1787 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1787 of yacc.c  */
#line 1972 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 538:
/* Line 1787 of yacc.c  */
#line 1973 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1787 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1787 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1787 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1787 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 544:
/* Line 1787 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1787 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1787 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1787 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 548:
/* Line 1787 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1787 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1787 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1787 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 552:
/* Line 1787 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1787 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1787 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1787 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 556:
/* Line 1787 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1787 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1787 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1787 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1787 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1787 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1787 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1787 of yacc.c  */
#line 2004 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 564:
/* Line 1787 of yacc.c  */
#line 2007 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1787 of yacc.c  */
#line 2015 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 566:
/* Line 1787 of yacc.c  */
#line 2019 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 567:
/* Line 1787 of yacc.c  */
#line 2024 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 569:
/* Line 1787 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1787 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1787 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1787 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 573:
/* Line 1787 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 574:
/* Line 1787 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 575:
/* Line 1787 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1787 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 577:
/* Line 1787 of yacc.c  */
#line 2054 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1787 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1787 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 580:
/* Line 1787 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 581:
/* Line 1787 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 582:
/* Line 1787 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 583:
/* Line 1787 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 586:
/* Line 1787 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 587:
/* Line 1787 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 588:
/* Line 1787 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 589:
/* Line 1787 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 590:
/* Line 1787 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 591:
/* Line 1787 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 592:
/* Line 1787 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 593:
/* Line 1787 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 594:
/* Line 1787 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 595:
/* Line 1787 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 596:
/* Line 1787 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 597:
/* Line 1787 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 598:
/* Line 1787 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 599:
/* Line 1787 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 600:
/* Line 1787 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 601:
/* Line 1787 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1787 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 603:
/* Line 1787 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 604:
/* Line 1787 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1787 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 606:
/* Line 1787 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 607:
/* Line 1787 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 609:
/* Line 1787 of yacc.c  */
#line 2108 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 610:
/* Line 1787 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1787 of yacc.c  */
#line 2113 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 612:
/* Line 1787 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 613:
/* Line 1787 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1787 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1787 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1787 of yacc.c  */
#line 2124 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1787 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1787 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1787 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1787 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1787 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1787 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1787 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1787 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1787 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1787 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1787 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1787 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 629:
/* Line 1787 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 630:
/* Line 1787 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 631:
/* Line 1787 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 632:
/* Line 1787 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1787 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1787 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1787 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1787 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1787 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1787 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1787 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1787 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1787 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1787 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1787 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1787 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1787 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1787 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1787 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1787 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1787 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1787 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1787 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1787 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 653:
/* Line 1787 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 658:
/* Line 1787 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 659:
/* Line 1787 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 660:
/* Line 1787 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 661:
/* Line 1787 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 662:
/* Line 1787 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 663:
/* Line 1787 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 664:
/* Line 1787 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 665:
/* Line 1787 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 666:
/* Line 1787 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 667:
/* Line 1787 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 668:
/* Line 1787 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 669:
/* Line 1787 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 670:
/* Line 1787 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 671:
/* Line 1787 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 672:
/* Line 1787 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 673:
/* Line 1787 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 674:
/* Line 1787 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 675:
/* Line 1787 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 676:
/* Line 1787 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 677:
/* Line 1787 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 678:
/* Line 1787 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 679:
/* Line 1787 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 683:
/* Line 1787 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 684:
/* Line 1787 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 685:
/* Line 1787 of yacc.c  */
#line 2227 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 686:
/* Line 1787 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 687:
/* Line 1787 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 688:
/* Line 1787 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 689:
/* Line 1787 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 690:
/* Line 1787 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 691:
/* Line 1787 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 692:
/* Line 1787 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 693:
/* Line 1787 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 694:
/* Line 1787 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 695:
/* Line 1787 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 696:
/* Line 1787 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 697:
/* Line 1787 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 698:
/* Line 1787 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 699:
/* Line 1787 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 700:
/* Line 1787 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 701:
/* Line 1787 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 702:
/* Line 1787 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 703:
/* Line 1787 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 704:
/* Line 1787 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 705:
/* Line 1787 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 706:
/* Line 1787 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 707:
/* Line 1787 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 708:
/* Line 1787 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 712:
/* Line 1787 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 713:
/* Line 1787 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 714:
/* Line 1787 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 715:
/* Line 1787 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 716:
/* Line 1787 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 717:
/* Line 1787 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 718:
/* Line 1787 of yacc.c  */
#line 2263 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 719:
/* Line 1787 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 720:
/* Line 1787 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 721:
/* Line 1787 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 722:
/* Line 1787 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1787 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1787 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1787 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1787 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1787 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 728:
/* Line 1787 of yacc.c  */
#line 2287 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 729:
/* Line 1787 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 730:
/* Line 1787 of yacc.c  */
#line 2293 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 731:
/* Line 1787 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 732:
/* Line 1787 of yacc.c  */
#line 2299 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 733:
/* Line 1787 of yacc.c  */
#line 2305 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 734:
/* Line 1787 of yacc.c  */
#line 2311 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 735:
/* Line 1787 of yacc.c  */
#line 2318 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 736:
/* Line 1787 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 737:
/* Line 1787 of yacc.c  */
#line 2328 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 738:
/* Line 1787 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 739:
/* Line 1787 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 740:
/* Line 1787 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 741:
/* Line 1787 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 742:
/* Line 1787 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 743:
/* Line 1787 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 744:
/* Line 1787 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 745:
/* Line 1787 of yacc.c  */
#line 2340 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1787 of yacc.c  */
#line 2342 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 747:
/* Line 1787 of yacc.c  */
#line 2343 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 748:
/* Line 1787 of yacc.c  */
#line 2344 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 749:
/* Line 1787 of yacc.c  */
#line 2348 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 750:
/* Line 1787 of yacc.c  */
#line 2353 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 751:
/* Line 1787 of yacc.c  */
#line 2361 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 752:
/* Line 1787 of yacc.c  */
#line 2370 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 753:
/* Line 1787 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 754:
/* Line 1787 of yacc.c  */
#line 2380 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 755:
/* Line 1787 of yacc.c  */
#line 2381 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 756:
/* Line 1787 of yacc.c  */
#line 2382 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 757:
/* Line 1787 of yacc.c  */
#line 2387 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 758:
/* Line 1787 of yacc.c  */
#line 2394 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 759:
/* Line 1787 of yacc.c  */
#line 2401 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 760:
/* Line 1787 of yacc.c  */
#line 2404 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           (yyval.specifier).ctx = (yyvsp[(1) - (3)].specifier).ctx;
           (yyvsp[(1) - (3)].specifier).ctx = null;

           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 761:
/* Line 1787 of yacc.c  */
#line 2420 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 762:
/* Line 1787 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 763:
/* Line 1787 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 764:
/* Line 1787 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 765:
/* Line 1787 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 766:
/* Line 1787 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 767:
/* Line 1787 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 768:
/* Line 1787 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 769:
/* Line 1787 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 770:
/* Line 1787 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 771:
/* Line 1787 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 772:
/* Line 1787 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 773:
/* Line 1787 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 774:
/* Line 1787 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 775:
/* Line 1787 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 776:
/* Line 1787 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 777:
/* Line 1787 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 778:
/* Line 1787 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 779:
/* Line 1787 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 780:
/* Line 1787 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 781:
/* Line 1787 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 782:
/* Line 1787 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 783:
/* Line 1787 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 784:
/* Line 1787 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 785:
/* Line 1787 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 786:
/* Line 1787 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 787:
/* Line 1787 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 788:
/* Line 1787 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 789:
/* Line 1787 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 790:
/* Line 1787 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 791:
/* Line 1787 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 792:
/* Line 1787 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 793:
/* Line 1787 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 794:
/* Line 1787 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 795:
/* Line 1787 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 796:
/* Line 1787 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 797:
/* Line 1787 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 798:
/* Line 1787 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 799:
/* Line 1787 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 800:
/* Line 1787 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 801:
/* Line 1787 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 802:
/* Line 1787 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 803:
/* Line 1787 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 804:
/* Line 1787 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 805:
/* Line 1787 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 806:
/* Line 1787 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 807:
/* Line 1787 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 808:
/* Line 1787 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 809:
/* Line 1787 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 810:
/* Line 1787 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 811:
/* Line 1787 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 812:
/* Line 1787 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 813:
/* Line 1787 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 814:
/* Line 1787 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 815:
/* Line 1787 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 816:
/* Line 1787 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 817:
/* Line 1787 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 818:
/* Line 1787 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 819:
/* Line 1787 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 820:
/* Line 1787 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 821:
/* Line 1787 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 822:
/* Line 1787 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 823:
/* Line 1787 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 824:
/* Line 1787 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 825:
/* Line 1787 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 826:
/* Line 1787 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 827:
/* Line 1787 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 828:
/* Line 1787 of yacc.c  */
#line 2529 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 829:
/* Line 1787 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 830:
/* Line 1787 of yacc.c  */
#line 2533 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 831:
/* Line 1787 of yacc.c  */
#line 2541 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 833:
/* Line 1787 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 834:
/* Line 1787 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 835:
/* Line 1787 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 836:
/* Line 1787 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 837:
/* Line 1787 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 838:
/* Line 1787 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 839:
/* Line 1787 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 840:
/* Line 1787 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 841:
/* Line 1787 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 842:
/* Line 1787 of yacc.c  */
#line 2564 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 843:
/* Line 1787 of yacc.c  */
#line 2572 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 844:
/* Line 1787 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 845:
/* Line 1787 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 846:
/* Line 1787 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 847:
/* Line 1787 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 848:
/* Line 1787 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 849:
/* Line 1787 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 850:
/* Line 1787 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 851:
/* Line 1787 of yacc.c  */
#line 2587 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 852:
/* Line 1787 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 853:
/* Line 1787 of yacc.c  */
#line 2589 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 854:
/* Line 1787 of yacc.c  */
#line 2590 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 855:
/* Line 1787 of yacc.c  */
#line 2591 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 856:
/* Line 1787 of yacc.c  */
#line 2593 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 857:
/* Line 1787 of yacc.c  */
#line 2601 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 858:
/* Line 1787 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 859:
/* Line 1787 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 860:
/* Line 1787 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 861:
/* Line 1787 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 862:
/* Line 1787 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 863:
/* Line 1787 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 864:
/* Line 1787 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 865:
/* Line 1787 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 866:
/* Line 1787 of yacc.c  */
#line 2617 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 867:
/* Line 1787 of yacc.c  */
#line 2618 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 868:
/* Line 1787 of yacc.c  */
#line 2619 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 869:
/* Line 1787 of yacc.c  */
#line 2620 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 870:
/* Line 1787 of yacc.c  */
#line 2622 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 871:
/* Line 1787 of yacc.c  */
#line 2630 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 872:
/* Line 1787 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 873:
/* Line 1787 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 874:
/* Line 1787 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 875:
/* Line 1787 of yacc.c  */
#line 2644 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 876:
/* Line 1787 of yacc.c  */
#line 2645 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 877:
/* Line 1787 of yacc.c  */
#line 2646 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 878:
/* Line 1787 of yacc.c  */
#line 2647 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 880:
/* Line 1787 of yacc.c  */
#line 2653 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 881:
/* Line 1787 of yacc.c  */
#line 2659 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 882:
/* Line 1787 of yacc.c  */
#line 2662 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 883:
/* Line 1787 of yacc.c  */
#line 2671 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 884:
/* Line 1787 of yacc.c  */
#line 2680 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 885:
/* Line 1787 of yacc.c  */
#line 2689 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 886:
/* Line 1787 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 887:
/* Line 1787 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 888:
/* Line 1787 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 889:
/* Line 1787 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 890:
/* Line 1787 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 891:
/* Line 1787 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 892:
/* Line 1787 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 893:
/* Line 1787 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 894:
/* Line 1787 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 895:
/* Line 1787 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 896:
/* Line 1787 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 897:
/* Line 1787 of yacc.c  */
#line 2711 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 898:
/* Line 1787 of yacc.c  */
#line 2712 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 900:
/* Line 1787 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 901:
/* Line 1787 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 902:
/* Line 1787 of yacc.c  */
#line 2722 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 903:
/* Line 1787 of yacc.c  */
#line 2723 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 904:
/* Line 1787 of yacc.c  */
#line 2724 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 905:
/* Line 1787 of yacc.c  */
#line 2730 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 906:
/* Line 1787 of yacc.c  */
#line 2739 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 907:
/* Line 1787 of yacc.c  */
#line 2748 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 908:
/* Line 1787 of yacc.c  */
#line 2757 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 912:
/* Line 1787 of yacc.c  */
#line 2780 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 913:
/* Line 1787 of yacc.c  */
#line 2781 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 914:
/* Line 1787 of yacc.c  */
#line 2782 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 915:
/* Line 1787 of yacc.c  */
#line 2783 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 916:
/* Line 1787 of yacc.c  */
#line 2784 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 917:
/* Line 1787 of yacc.c  */
#line 2790 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 918:
/* Line 1787 of yacc.c  */
#line 2799 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 919:
/* Line 1787 of yacc.c  */
#line 2808 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 920:
/* Line 1787 of yacc.c  */
#line 2817 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 923:
/* Line 1787 of yacc.c  */
#line 2880 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 924:
/* Line 1787 of yacc.c  */
#line 2881 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 925:
/* Line 1787 of yacc.c  */
#line 2884 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 926:
/* Line 1787 of yacc.c  */
#line 2895 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 927:
/* Line 1787 of yacc.c  */
#line 2905 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 928:
/* Line 1787 of yacc.c  */
#line 2906 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 929:
/* Line 1787 of yacc.c  */
#line 2908 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 930:
/* Line 1787 of yacc.c  */
#line 2917 "grammar.y"
    {
         TempFile f { };
         f.Puts("_Alignas(");
         OutputExpression((yyvsp[(3) - (4)].exp), f);
         f.Puts(")");
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExpression((yyvsp[(3) - (4)].exp));
         delete f;
      }
    break;

  case 931:
/* Line 1787 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 932:
/* Line 1787 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 933:
/* Line 1787 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 934:
/* Line 1787 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 935:
/* Line 1787 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 936:
/* Line 1787 of yacc.c  */
#line 2939 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 937:
/* Line 1787 of yacc.c  */
#line 2940 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 938:
/* Line 1787 of yacc.c  */
#line 2941 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 939:
/* Line 1787 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 940:
/* Line 1787 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 941:
/* Line 1787 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 942:
/* Line 1787 of yacc.c  */
#line 2951 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 943:
/* Line 1787 of yacc.c  */
#line 2952 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 944:
/* Line 1787 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 945:
/* Line 1787 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 946:
/* Line 1787 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 947:
/* Line 1787 of yacc.c  */
#line 2962 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 948:
/* Line 1787 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 949:
/* Line 1787 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 950:
/* Line 1787 of yacc.c  */
#line 2968 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 951:
/* Line 1787 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 952:
/* Line 1787 of yacc.c  */
#line 2970 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 953:
/* Line 1787 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 954:
/* Line 1787 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 955:
/* Line 1787 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 956:
/* Line 1787 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 957:
/* Line 1787 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 958:
/* Line 1787 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 959:
/* Line 1787 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 960:
/* Line 1787 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 961:
/* Line 1787 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 962:
/* Line 1787 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 963:
/* Line 1787 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 964:
/* Line 1787 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 965:
/* Line 1787 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 966:
/* Line 1787 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 967:
/* Line 1787 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 968:
/* Line 1787 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 969:
/* Line 1787 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 970:
/* Line 1787 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 971:
/* Line 1787 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 972:
/* Line 1787 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 973:
/* Line 1787 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 974:
/* Line 1787 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 975:
/* Line 1787 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 976:
/* Line 1787 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 978:
/* Line 1787 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 979:
/* Line 1787 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 980:
/* Line 1787 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 981:
/* Line 1787 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 983:
/* Line 1787 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 984:
/* Line 1787 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 985:
/* Line 1787 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 987:
/* Line 1787 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 988:
/* Line 1787 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 989:
/* Line 1787 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 990:
/* Line 1787 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 992:
/* Line 1787 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 993:
/* Line 1787 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 994:
/* Line 1787 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 996:
/* Line 1787 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 997:
/* Line 1787 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 998:
/* Line 1787 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1000:
/* Line 1787 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1001:
/* Line 1787 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1002:
/* Line 1787 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1004:
/* Line 1787 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1005:
/* Line 1787 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1006:
/* Line 1787 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1008:
/* Line 1787 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1009:
/* Line 1787 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1010:
/* Line 1787 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1012:
/* Line 1787 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1013:
/* Line 1787 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1014:
/* Line 1787 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1015:
/* Line 1787 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1016:
/* Line 1787 of yacc.c  */
#line 3077 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1017:
/* Line 1787 of yacc.c  */
#line 3079 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1018:
/* Line 1787 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1019:
/* Line 1787 of yacc.c  */
#line 3097 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1020:
/* Line 1787 of yacc.c  */
#line 3113 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1021:
/* Line 1787 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1022:
/* Line 1787 of yacc.c  */
#line 3115 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1023:
/* Line 1787 of yacc.c  */
#line 3117 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1024:
/* Line 1787 of yacc.c  */
#line 3130 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1025:
/* Line 1787 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1026:
/* Line 1787 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1027:
/* Line 1787 of yacc.c  */
#line 3152 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1028:
/* Line 1787 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1029:
/* Line 1787 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1030:
/* Line 1787 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1031:
/* Line 1787 of yacc.c  */
#line 3159 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1032:
/* Line 1787 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1033:
/* Line 1787 of yacc.c  */
#line 3163 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1034:
/* Line 1787 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1035:
/* Line 1787 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1036:
/* Line 1787 of yacc.c  */
#line 3169 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1037:
/* Line 1787 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1038:
/* Line 1787 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1039:
/* Line 1787 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1040:
/* Line 1787 of yacc.c  */
#line 3182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1041:
/* Line 1787 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1042:
/* Line 1787 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1043:
/* Line 1787 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1044:
/* Line 1787 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1045:
/* Line 1787 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1046:
/* Line 1787 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("_Float16")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1047:
/* Line 1787 of yacc.c  */
#line 3190 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1048:
/* Line 1787 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1049:
/* Line 1787 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1050:
/* Line 1787 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1051:
/* Line 1787 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1052:
/* Line 1787 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1053:
/* Line 1787 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1054:
/* Line 1787 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1055:
/* Line 1787 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1056:
/* Line 1787 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1057:
/* Line 1787 of yacc.c  */
#line 3225 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1058:
/* Line 1787 of yacc.c  */
#line 3226 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1059:
/* Line 1787 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1060:
/* Line 1787 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1061:
/* Line 1787 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1062:
/* Line 1787 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1063:
/* Line 1787 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1064:
/* Line 1787 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1065:
/* Line 1787 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1066:
/* Line 1787 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1067:
/* Line 1787 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1068:
/* Line 1787 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1069:
/* Line 1787 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1070:
/* Line 1787 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1071:
/* Line 1787 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1072:
/* Line 1787 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1073:
/* Line 1787 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1074:
/* Line 1787 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1075:
/* Line 1787 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1076:
/* Line 1787 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1077:
/* Line 1787 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1078:
/* Line 1787 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1079:
/* Line 1787 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1080:
/* Line 1787 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1081:
/* Line 1787 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1082:
/* Line 1787 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1084:
/* Line 1787 of yacc.c  */
#line 3281 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1085:
/* Line 1787 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1086:
/* Line 1787 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1087:
/* Line 1787 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1088:
/* Line 1787 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1090:
/* Line 1787 of yacc.c  */
#line 3290 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1093:
/* Line 1787 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1095:
/* Line 1787 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1096:
/* Line 1787 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1097:
/* Line 1787 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1105:
/* Line 1787 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1106:
/* Line 1787 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1107:
/* Line 1787 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1108:
/* Line 1787 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1109:
/* Line 1787 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1110:
/* Line 1787 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1111:
/* Line 1787 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1112:
/* Line 1787 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1113:
/* Line 1787 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1114:
/* Line 1787 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1115:
/* Line 1787 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1116:
/* Line 1787 of yacc.c  */
#line 3329 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1117:
/* Line 1787 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1118:
/* Line 1787 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1119:
/* Line 1787 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1120:
/* Line 1787 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1787 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1787 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1787 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1787 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1125:
/* Line 1787 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1126:
/* Line 1787 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1127:
/* Line 1787 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1128:
/* Line 1787 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1129:
/* Line 1787 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1130:
/* Line 1787 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1131:
/* Line 1787 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1132:
/* Line 1787 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1133:
/* Line 1787 of yacc.c  */
#line 3355 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1134:
/* Line 1787 of yacc.c  */
#line 3356 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1135:
/* Line 1787 of yacc.c  */
#line 3357 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1136:
/* Line 1787 of yacc.c  */
#line 3358 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1137:
/* Line 1787 of yacc.c  */
#line 3360 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1138:
/* Line 1787 of yacc.c  */
#line 3361 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1139:
/* Line 1787 of yacc.c  */
#line 3362 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1140:
/* Line 1787 of yacc.c  */
#line 3363 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1141:
/* Line 1787 of yacc.c  */
#line 3364 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1142:
/* Line 1787 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1143:
/* Line 1787 of yacc.c  */
#line 3369 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1144:
/* Line 1787 of yacc.c  */
#line 3370 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1145:
/* Line 1787 of yacc.c  */
#line 3371 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1146:
/* Line 1787 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1147:
/* Line 1787 of yacc.c  */
#line 3373 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1148:
/* Line 1787 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1149:
/* Line 1787 of yacc.c  */
#line 3376 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1150:
/* Line 1787 of yacc.c  */
#line 3377 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1151:
/* Line 1787 of yacc.c  */
#line 3378 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1152:
/* Line 1787 of yacc.c  */
#line 3379 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1153:
/* Line 1787 of yacc.c  */
#line 3380 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1154:
/* Line 1787 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1155:
/* Line 1787 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1156:
/* Line 1787 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1157:
/* Line 1787 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1158:
/* Line 1787 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1159:
/* Line 1787 of yacc.c  */
#line 3395 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1160:
/* Line 1787 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1161:
/* Line 1787 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1162:
/* Line 1787 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1163:
/* Line 1787 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1164:
/* Line 1787 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1165:
/* Line 1787 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.declaration) = MkDeclarationPragma(yytext); (yyval.declaration).loc = (yyloc); }
    break;

  case 1166:
/* Line 1787 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1167:
/* Line 1787 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1168:
/* Line 1787 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1169:
/* Line 1787 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1170:
/* Line 1787 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1171:
/* Line 1787 of yacc.c  */
#line 3411 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1172:
/* Line 1787 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1173:
/* Line 1787 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1174:
/* Line 1787 of yacc.c  */
#line 3420 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1175:
/* Line 1787 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1176:
/* Line 1787 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1177:
/* Line 1787 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1178:
/* Line 1787 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1179:
/* Line 1787 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1180:
/* Line 1787 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1181:
/* Line 1787 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1182:
/* Line 1787 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1183:
/* Line 1787 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1184:
/* Line 1787 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1185:
/* Line 1787 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1186:
/* Line 1787 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1187:
/* Line 1787 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1188:
/* Line 1787 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1189:
/* Line 1787 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1190:
/* Line 1787 of yacc.c  */
#line 3449 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1191:
/* Line 1787 of yacc.c  */
#line 3450 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1192:
/* Line 1787 of yacc.c  */
#line 3451 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1193:
/* Line 1787 of yacc.c  */
#line 3452 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1194:
/* Line 1787 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1195:
/* Line 1787 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1196:
/* Line 1787 of yacc.c  */
#line 3458 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1197:
/* Line 1787 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1198:
/* Line 1787 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1199:
/* Line 1787 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1200:
/* Line 1787 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1201:
/* Line 1787 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1202:
/* Line 1787 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1203:
/* Line 1787 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1204:
/* Line 1787 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1205:
/* Line 1787 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1206:
/* Line 1787 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1207:
/* Line 1787 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1208:
/* Line 1787 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1209:
/* Line 1787 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1210:
/* Line 1787 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1787 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1787 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1787 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1787 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1215:
/* Line 1787 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1787 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1787 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1219:
/* Line 1787 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1787 of yacc.c  */
#line 3511 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1787 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1222:
/* Line 1787 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1787 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1787 of yacc.c  */
#line 3517 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1225:
/* Line 1787 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1787 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1227:
/* Line 1787 of yacc.c  */
#line 3520 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1787 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1787 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1787 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1787 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1232:
/* Line 1787 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1787 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1234:
/* Line 1787 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1787 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1236:
/* Line 1787 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1787 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1787 of yacc.c  */
#line 3539 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1787 of yacc.c  */
#line 3540 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1787 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1787 of yacc.c  */
#line 3542 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1242:
/* Line 1787 of yacc.c  */
#line 3543 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1787 of yacc.c  */
#line 3544 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1787 of yacc.c  */
#line 3545 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1245:
/* Line 1787 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1787 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1247:
/* Line 1787 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1787 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1249:
/* Line 1787 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1787 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1251:
/* Line 1787 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1252:
/* Line 1787 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1253:
/* Line 1787 of yacc.c  */
#line 3565 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1254:
/* Line 1787 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1255:
/* Line 1787 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1256:
/* Line 1787 of yacc.c  */
#line 3568 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1257:
/* Line 1787 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1258:
/* Line 1787 of yacc.c  */
#line 3573 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1259:
/* Line 1787 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1260:
/* Line 1787 of yacc.c  */
#line 3575 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1261:
/* Line 1787 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1262:
/* Line 1787 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1263:
/* Line 1787 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1264:
/* Line 1787 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1265:
/* Line 1787 of yacc.c  */
#line 3587 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1266:
/* Line 1787 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1267:
/* Line 1787 of yacc.c  */
#line 3590 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1268:
/* Line 1787 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1269:
/* Line 1787 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1270:
/* Line 1787 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1271:
/* Line 1787 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1272:
/* Line 1787 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1273:
/* Line 1787 of yacc.c  */
#line 3598 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1274:
/* Line 1787 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1275:
/* Line 1787 of yacc.c  */
#line 3604 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1276:
/* Line 1787 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1277:
/* Line 1787 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1278:
/* Line 1787 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1279:
/* Line 1787 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1280:
/* Line 1787 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1281:
/* Line 1787 of yacc.c  */
#line 3625 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1282:
/* Line 1787 of yacc.c  */
#line 3627 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1283:
/* Line 1787 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1284:
/* Line 1787 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1285:
/* Line 1787 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1286:
/* Line 1787 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1287:
/* Line 1787 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1288:
/* Line 1787 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1289:
/* Line 1787 of yacc.c  */
#line 3645 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1290:
/* Line 1787 of yacc.c  */
#line 3654 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1291:
/* Line 1787 of yacc.c  */
#line 3655 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1292:
/* Line 1787 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1293:
/* Line 1787 of yacc.c  */
#line 3657 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1294:
/* Line 1787 of yacc.c  */
#line 3658 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1295:
/* Line 1787 of yacc.c  */
#line 3659 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1296:
/* Line 1787 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.external) = MkExternalPragma(yytext); (yyval.external).loc = (yyloc); }
    break;

  case 1297:
/* Line 1787 of yacc.c  */
#line 3661 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1298:
/* Line 1787 of yacc.c  */
#line 3662 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1299:
/* Line 1787 of yacc.c  */
#line 3666 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1300:
/* Line 1787 of yacc.c  */
#line 3668 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1301:
/* Line 1787 of yacc.c  */
#line 3676 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1302:
/* Line 1787 of yacc.c  */
#line 3678 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1303:
/* Line 1787 of yacc.c  */
#line 3679 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1304:
/* Line 1787 of yacc.c  */
#line 3682 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1305:
/* Line 1787 of yacc.c  */
#line 3683 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1306:
/* Line 1787 of yacc.c  */
#line 3687 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1307:
/* Line 1787 of yacc.c  */
#line 3688 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1308:
/* Line 1787 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1311:
/* Line 1787 of yacc.c  */
#line 3695 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1312:
/* Line 1787 of yacc.c  */
#line 3696 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1313:
/* Line 1787 of yacc.c  */
#line 3698 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1314:
/* Line 1787 of yacc.c  */
#line 3700 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1317:
/* Line 1787 of yacc.c  */
#line 3706 "grammar.y"
    { ast = MkList(); }
    break;

  case 1318:
/* Line 1787 of yacc.c  */
#line 3710 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1319:
/* Line 1787 of yacc.c  */
#line 3711 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1320:
/* Line 1787 of yacc.c  */
#line 3712 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1321:
/* Line 1787 of yacc.c  */
#line 3716 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1322:
/* Line 1787 of yacc.c  */
#line 3720 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1323:
/* Line 1787 of yacc.c  */
#line 3721 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1324:
/* Line 1787 of yacc.c  */
#line 3722 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1325:
/* Line 1787 of yacc.c  */
#line 3726 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1326:
/* Line 1787 of yacc.c  */
#line 3727 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1327:
/* Line 1787 of yacc.c  */
#line 3731 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1328:
/* Line 1787 of yacc.c  */
#line 3732 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1329:
/* Line 1787 of yacc.c  */
#line 3736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1330:
/* Line 1787 of yacc.c  */
#line 3737 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1331:
/* Line 1787 of yacc.c  */
#line 3738 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1332:
/* Line 1787 of yacc.c  */
#line 3739 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1333:
/* Line 1787 of yacc.c  */
#line 3743 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1334:
/* Line 1787 of yacc.c  */
#line 3747 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1335:
/* Line 1787 of yacc.c  */
#line 3751 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1336:
/* Line 1787 of yacc.c  */
#line 3755 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1787 of yacc.c  */
#line 21815 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2050 of yacc.c  */
#line 3758 "grammar.y"

