/* originally generated by rust-bindgen 0.71.1 */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const ECRT_MODULE_NAME: &[u8; 5] = b"ecrt\0";
pub const __runtimePlatform: u32 = 2;
pub const MAXBYTE: u32 = 255;
pub const MAXDWORD: u32 = 4294967295;
pub const MAXQWORD: i32 = -1;
pub const MAXWORD: u32 = 65535;
pub const MAX_DIRECTORY: u32 = 534;
pub const MAX_EXTENSION: u32 = 17;
pub const MAX_FILENAME: u32 = 274;
pub const MAX_F_STRING: u32 = 1025;
pub const MAX_LOCATION: u32 = 797;
pub const ESCAPECSTRINGOPTIONS_escapeSingleQuote_SHIFT: u32 = 0;
pub const ESCAPECSTRINGOPTIONS_escapeSingleQuote_MASK: u32 = 1;
pub const ESCAPECSTRINGOPTIONS_escapeDoubleQuotes_SHIFT: u32 = 1;
pub const ESCAPECSTRINGOPTIONS_escapeDoubleQuotes_MASK: u32 = 2;
pub const ESCAPECSTRINGOPTIONS_writeQuotes_SHIFT: u32 = 2;
pub const ESCAPECSTRINGOPTIONS_writeQuotes_MASK: u32 = 4;
pub const ESCAPECSTRINGOPTIONS_multiLine_SHIFT: u32 = 3;
pub const ESCAPECSTRINGOPTIONS_multiLine_MASK: u32 = 8;
pub const ESCAPECSTRINGOPTIONS_indent_SHIFT: u32 = 4;
pub const ESCAPECSTRINGOPTIONS_indent_MASK: u32 = 1048560;
pub const jsonIndentWidth: u32 = 3;
pub const FIELDTYPEEX_type_SHIFT: u32 = 0;
pub const FIELDTYPEEX_type_MASK: u32 = 7;
pub const FIELDTYPEEX_mustFree_SHIFT: u32 = 3;
pub const FIELDTYPEEX_mustFree_MASK: u32 = 8;
pub const FIELDTYPEEX_format_SHIFT: u32 = 4;
pub const FIELDTYPEEX_format_MASK: u32 = 240;
pub const FIELDTYPEEX_isUnsigned_SHIFT: u32 = 8;
pub const FIELDTYPEEX_isUnsigned_MASK: u32 = 256;
pub const FIELDTYPEEX_isDateTime_SHIFT: u32 = 9;
pub const FIELDTYPEEX_isDateTime_MASK: u32 = 512;
pub const ARCHIVEOPENFLAGS_writeAccess_SHIFT: u32 = 0;
pub const ARCHIVEOPENFLAGS_writeAccess_MASK: u32 = 1;
pub const ARCHIVEOPENFLAGS_buffered_SHIFT: u32 = 1;
pub const ARCHIVEOPENFLAGS_buffered_MASK: u32 = 2;
pub const ARCHIVEOPENFLAGS_exclusive_SHIFT: u32 = 2;
pub const ARCHIVEOPENFLAGS_exclusive_MASK: u32 = 4;
pub const ARCHIVEOPENFLAGS_waitLock_SHIFT: u32 = 3;
pub const ARCHIVEOPENFLAGS_waitLock_MASK: u32 = 8;
pub const ERRORCODE_level_SHIFT: u32 = 12;
pub const ERRORCODE_level_MASK: u32 = 12288;
pub const ERRORCODE_code_SHIFT: u32 = 0;
pub const ERRORCODE_code_MASK: u32 = 4095;
pub const FILEATTRIBS_isFile_SHIFT: u32 = 0;
pub const FILEATTRIBS_isFile_MASK: u32 = 1;
pub const FILEATTRIBS_isArchive_SHIFT: u32 = 1;
pub const FILEATTRIBS_isArchive_MASK: u32 = 2;
pub const FILEATTRIBS_isHidden_SHIFT: u32 = 2;
pub const FILEATTRIBS_isHidden_MASK: u32 = 4;
pub const FILEATTRIBS_isReadOnly_SHIFT: u32 = 3;
pub const FILEATTRIBS_isReadOnly_MASK: u32 = 8;
pub const FILEATTRIBS_isSystem_SHIFT: u32 = 4;
pub const FILEATTRIBS_isSystem_MASK: u32 = 16;
pub const FILEATTRIBS_isTemporary_SHIFT: u32 = 5;
pub const FILEATTRIBS_isTemporary_MASK: u32 = 32;
pub const FILEATTRIBS_isDirectory_SHIFT: u32 = 6;
pub const FILEATTRIBS_isDirectory_MASK: u32 = 64;
pub const FILEATTRIBS_isDrive_SHIFT: u32 = 7;
pub const FILEATTRIBS_isDrive_MASK: u32 = 128;
pub const FILEATTRIBS_isCDROM_SHIFT: u32 = 8;
pub const FILEATTRIBS_isCDROM_MASK: u32 = 256;
pub const FILEATTRIBS_isRemote_SHIFT: u32 = 9;
pub const FILEATTRIBS_isRemote_MASK: u32 = 512;
pub const FILEATTRIBS_isRemovable_SHIFT: u32 = 10;
pub const FILEATTRIBS_isRemovable_MASK: u32 = 1024;
pub const FILEATTRIBS_isServer_SHIFT: u32 = 11;
pub const FILEATTRIBS_isServer_MASK: u32 = 2048;
pub const FILEATTRIBS_isShare_SHIFT: u32 = 12;
pub const FILEATTRIBS_isShare_MASK: u32 = 4096;
pub const FILECHANGE_created_SHIFT: u32 = 0;
pub const FILECHANGE_created_MASK: u32 = 1;
pub const FILECHANGE_renamed_SHIFT: u32 = 1;
pub const FILECHANGE_renamed_MASK: u32 = 2;
pub const FILECHANGE_modified_SHIFT: u32 = 2;
pub const FILECHANGE_modified_MASK: u32 = 4;
pub const FILECHANGE_deleted_SHIFT: u32 = 3;
pub const FILECHANGE_deleted_MASK: u32 = 8;
pub const FILECHANGE_attribs_SHIFT: u32 = 4;
pub const FILECHANGE_attribs_MASK: u32 = 16;
pub const MOVEFILEOPTIONS_overwrite_SHIFT: u32 = 0;
pub const MOVEFILEOPTIONS_overwrite_MASK: u32 = 1;
pub const MOVEFILEOPTIONS_sync_SHIFT: u32 = 1;
pub const MOVEFILEOPTIONS_sync_MASK: u32 = 2;
pub const PIPEOPENMODE_output_SHIFT: u32 = 0;
pub const PIPEOPENMODE_output_MASK: u32 = 1;
pub const PIPEOPENMODE_error_SHIFT: u32 = 1;
pub const PIPEOPENMODE_error_MASK: u32 = 2;
pub const PIPEOPENMODE_input_SHIFT: u32 = 2;
pub const PIPEOPENMODE_input_MASK: u32 = 4;
pub const PIPEOPENMODE_showWindow_SHIFT: u32 = 3;
pub const PIPEOPENMODE_showWindow_MASK: u32 = 8;
pub const unicodeCompatibilityMappings: u32 = 4294967295;
pub const CHARCATEGORIES_none_SHIFT: u32 = 0;
pub const CHARCATEGORIES_none_MASK: u32 = 1;
pub const CHARCATEGORIES_markNonSpacing_SHIFT: u32 = 1;
pub const CHARCATEGORIES_markNonSpacing_MASK: u32 = 2;
pub const CHARCATEGORIES_markSpacing_SHIFT: u32 = 2;
pub const CHARCATEGORIES_markSpacing_MASK: u32 = 4;
pub const CHARCATEGORIES_markEnclosing_SHIFT: u32 = 3;
pub const CHARCATEGORIES_markEnclosing_MASK: u32 = 8;
pub const CHARCATEGORIES_numberDecimalDigit_SHIFT: u32 = 4;
pub const CHARCATEGORIES_numberDecimalDigit_MASK: u32 = 16;
pub const CHARCATEGORIES_numberLetter_SHIFT: u32 = 5;
pub const CHARCATEGORIES_numberLetter_MASK: u32 = 32;
pub const CHARCATEGORIES_numberOther_SHIFT: u32 = 6;
pub const CHARCATEGORIES_numberOther_MASK: u32 = 64;
pub const CHARCATEGORIES_separatorSpace_SHIFT: u32 = 7;
pub const CHARCATEGORIES_separatorSpace_MASK: u32 = 128;
pub const CHARCATEGORIES_separatorLine_SHIFT: u32 = 8;
pub const CHARCATEGORIES_separatorLine_MASK: u32 = 256;
pub const CHARCATEGORIES_separatorParagraph_SHIFT: u32 = 9;
pub const CHARCATEGORIES_separatorParagraph_MASK: u32 = 512;
pub const CHARCATEGORIES_otherControl_SHIFT: u32 = 10;
pub const CHARCATEGORIES_otherControl_MASK: u32 = 1024;
pub const CHARCATEGORIES_otherFormat_SHIFT: u32 = 11;
pub const CHARCATEGORIES_otherFormat_MASK: u32 = 2048;
pub const CHARCATEGORIES_otherSurrogate_SHIFT: u32 = 12;
pub const CHARCATEGORIES_otherSurrogate_MASK: u32 = 4096;
pub const CHARCATEGORIES_otherPrivateUse_SHIFT: u32 = 13;
pub const CHARCATEGORIES_otherPrivateUse_MASK: u32 = 8192;
pub const CHARCATEGORIES_otherNotAssigned_SHIFT: u32 = 14;
pub const CHARCATEGORIES_otherNotAssigned_MASK: u32 = 16384;
pub const CHARCATEGORIES_letterUpperCase_SHIFT: u32 = 15;
pub const CHARCATEGORIES_letterUpperCase_MASK: u32 = 32768;
pub const CHARCATEGORIES_letterLowerCase_SHIFT: u32 = 16;
pub const CHARCATEGORIES_letterLowerCase_MASK: u32 = 65536;
pub const CHARCATEGORIES_letterTitleCase_SHIFT: u32 = 17;
pub const CHARCATEGORIES_letterTitleCase_MASK: u32 = 131072;
pub const CHARCATEGORIES_letterModifier_SHIFT: u32 = 18;
pub const CHARCATEGORIES_letterModifier_MASK: u32 = 262144;
pub const CHARCATEGORIES_letterOther_SHIFT: u32 = 19;
pub const CHARCATEGORIES_letterOther_MASK: u32 = 524288;
pub const CHARCATEGORIES_punctuationConnector_SHIFT: u32 = 20;
pub const CHARCATEGORIES_punctuationConnector_MASK: u32 = 1048576;
pub const CHARCATEGORIES_punctuationDash_SHIFT: u32 = 21;
pub const CHARCATEGORIES_punctuationDash_MASK: u32 = 2097152;
pub const CHARCATEGORIES_punctuationOpen_SHIFT: u32 = 22;
pub const CHARCATEGORIES_punctuationOpen_MASK: u32 = 4194304;
pub const CHARCATEGORIES_punctuationClose_SHIFT: u32 = 23;
pub const CHARCATEGORIES_punctuationClose_MASK: u32 = 8388608;
pub const CHARCATEGORIES_punctuationInitial_SHIFT: u32 = 24;
pub const CHARCATEGORIES_punctuationInitial_MASK: u32 = 16777216;
pub const CHARCATEGORIES_punctuationFinal_SHIFT: u32 = 25;
pub const CHARCATEGORIES_punctuationFinal_MASK: u32 = 33554432;
pub const CHARCATEGORIES_punctuationOther_SHIFT: u32 = 26;
pub const CHARCATEGORIES_punctuationOther_MASK: u32 = 67108864;
pub const CHARCATEGORIES_symbolMath_SHIFT: u32 = 27;
pub const CHARCATEGORIES_symbolMath_MASK: u32 = 134217728;
pub const CHARCATEGORIES_symbolCurrency_SHIFT: u32 = 28;
pub const CHARCATEGORIES_symbolCurrency_MASK: u32 = 268435456;
pub const CHARCATEGORIES_symbolModifier_SHIFT: u32 = 29;
pub const CHARCATEGORIES_symbolModifier_MASK: u32 = 536870912;
pub const CHARCATEGORIES_symbolOther_SHIFT: u32 = 30;
pub const CHARCATEGORIES_symbolOther_MASK: u32 = 1073741824;
pub const UNICODEDECOMPOSITION_canonical_SHIFT: u32 = 0;
pub const UNICODEDECOMPOSITION_canonical_MASK: u32 = 1;
pub const UNICODEDECOMPOSITION_compat_SHIFT: u32 = 1;
pub const UNICODEDECOMPOSITION_compat_MASK: u32 = 2;
pub const UNICODEDECOMPOSITION_fraction_SHIFT: u32 = 2;
pub const UNICODEDECOMPOSITION_fraction_MASK: u32 = 4;
pub const UNICODEDECOMPOSITION_font_SHIFT: u32 = 3;
pub const UNICODEDECOMPOSITION_font_MASK: u32 = 8;
pub const UNICODEDECOMPOSITION_noBreak_SHIFT: u32 = 4;
pub const UNICODEDECOMPOSITION_noBreak_MASK: u32 = 16;
pub const UNICODEDECOMPOSITION_initial_SHIFT: u32 = 5;
pub const UNICODEDECOMPOSITION_initial_MASK: u32 = 32;
pub const UNICODEDECOMPOSITION_final_SHIFT: u32 = 6;
pub const UNICODEDECOMPOSITION_final_MASK: u32 = 64;
pub const UNICODEDECOMPOSITION_medial_SHIFT: u32 = 7;
pub const UNICODEDECOMPOSITION_medial_MASK: u32 = 128;
pub const UNICODEDECOMPOSITION_isolated_SHIFT: u32 = 8;
pub const UNICODEDECOMPOSITION_isolated_MASK: u32 = 256;
pub const UNICODEDECOMPOSITION_circle_SHIFT: u32 = 9;
pub const UNICODEDECOMPOSITION_circle_MASK: u32 = 512;
pub const UNICODEDECOMPOSITION_square_SHIFT: u32 = 10;
pub const UNICODEDECOMPOSITION_square_MASK: u32 = 1024;
pub const UNICODEDECOMPOSITION_sub_SHIFT: u32 = 11;
pub const UNICODEDECOMPOSITION_sub_MASK: u32 = 2048;
pub const UNICODEDECOMPOSITION_super_SHIFT: u32 = 12;
pub const UNICODEDECOMPOSITION_super_MASK: u32 = 4096;
pub const UNICODEDECOMPOSITION_small_SHIFT: u32 = 13;
pub const UNICODEDECOMPOSITION_small_MASK: u32 = 8192;
pub const UNICODEDECOMPOSITION_vertical_SHIFT: u32 = 14;
pub const UNICODEDECOMPOSITION_vertical_MASK: u32 = 16384;
pub const UNICODEDECOMPOSITION_wide_SHIFT: u32 = 15;
pub const UNICODEDECOMPOSITION_wide_MASK: u32 = 32768;
pub const UNICODEDECOMPOSITION_narrow_SHIFT: u32 = 16;
pub const UNICODEDECOMPOSITION_narrow_MASK: u32 = 65536;
pub const JSONTYPEOPTIONS_numbersUseOGDFS_SHIFT: u32 = 0;
pub const JSONTYPEOPTIONS_numbersUseOGDFS_MASK: u32 = 1;
pub const JSONTYPEOPTIONS_boolUseOGDFS_SHIFT: u32 = 1;
pub const JSONTYPEOPTIONS_boolUseOGDFS_MASK: u32 = 2;
pub const JSONTYPEOPTIONS_nullUseOGDFS_SHIFT: u32 = 2;
pub const JSONTYPEOPTIONS_nullUseOGDFS_MASK: u32 = 4;
pub const JSONTYPEOPTIONS_stringUseOGDFS_SHIFT: u32 = 3;
pub const JSONTYPEOPTIONS_stringUseOGDFS_MASK: u32 = 8;
pub const JSONTYPEOPTIONS_arrayUseOGDFS_SHIFT: u32 = 4;
pub const JSONTYPEOPTIONS_arrayUseOGDFS_MASK: u32 = 16;
pub const JSONTYPEOPTIONS_objectUseOGDFS_SHIFT: u32 = 5;
pub const JSONTYPEOPTIONS_objectUseOGDFS_MASK: u32 = 32;
pub const JSONTYPEOPTIONS_stripQuotesForOGDFS_SHIFT: u32 = 6;
pub const JSONTYPEOPTIONS_stripQuotesForOGDFS_MASK: u32 = 64;
pub const JSONTYPEOPTIONS_strictOGDFS_SHIFT: u32 = 7;
pub const JSONTYPEOPTIONS_strictOGDFS_MASK: u32 = 128;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
/*
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
*/
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
/*
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
*/
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
/*
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
*/
pub type cookie_read_function_t = ::std::option::Option<
    /*unsafe*/ extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    /*unsafe*/ extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    /*unsafe*/ extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    /*unsafe*/ extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
/*unsafe*/ extern "C" {
    pub static mut stdin: *mut FILE;
}
/*unsafe*/ extern "C" {
    pub static mut stdout: *mut FILE;
}
/*unsafe*/ extern "C" {
    pub static mut stderr: *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
/*unsafe*/ extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
/*unsafe*/ extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
/*unsafe*/ extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
/*unsafe*/ extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
/*unsafe*/ extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
/*unsafe*/ extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
/*unsafe*/ extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
/*unsafe*/ extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
/*unsafe*/ extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
/*unsafe*/ extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
/*unsafe*/ extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
/*unsafe*/ extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
/*unsafe*/ extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
/*unsafe*/ extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
/*unsafe*/ extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
/*unsafe*/ extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
/*unsafe*/ extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
/*unsafe*/ extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
/*unsafe*/ extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
/*unsafe*/ extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[doc = " HARDCODED //////// ////////////////\n ////////////////\n ////////////////"]
pub type any_object = *const ::std::os::raw::c_void;
pub type constString = *const ::std::os::raw::c_char;
pub type Alignment = ::std::os::raw::c_int;
pub const Alignment_Alignment_left: Alignment = 0;
pub const Alignment_Alignment_right: Alignment = 1;
pub const Alignment_Alignment_center: Alignment = 2;
pub type DataDisplayFlags = u32;
pub type Type = ::std::os::raw::c_void;
pub type Instantiation = ::std::os::raw::c_void;
pub type ClassDefinition = ::std::os::raw::c_void;
pub type Instance = *mut class_members_Instance;
pub type Surface = Instance;
pub type Window = Instance;
pub type CommonControl = Window;
pub type DataBox = CommonControl;
pub type EditBox = CommonControl;
pub type MinMaxValue = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Size {
    pub w: MinMaxValue,
    pub h: MinMaxValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Size"][::std::mem::size_of::<Size>() - 8usize];
    ["Alignment of Size"][::std::mem::align_of::<Size>() - 4usize];
    ["Offset of field: Size::w"][::std::mem::offset_of!(Size, w) - 0usize];
    ["Offset of field: Size::h"][::std::mem::offset_of!(Size, h) - 4usize];
};
pub type uintptr = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BTNode {
    pub key: uintptr,
    pub parent: *mut BTNode,
    pub left: *mut BTNode,
    pub right: *mut BTNode,
    pub depth: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BTNode"][::std::mem::size_of::<BTNode>() - 40usize];
    ["Alignment of BTNode"][::std::mem::align_of::<BTNode>() - 8usize];
    ["Offset of field: BTNode::key"][::std::mem::offset_of!(BTNode, key) - 0usize];
    ["Offset of field: BTNode::parent"][::std::mem::offset_of!(BTNode, parent) - 8usize];
    ["Offset of field: BTNode::left"][::std::mem::offset_of!(BTNode, left) - 16usize];
    ["Offset of field: BTNode::right"][::std::mem::offset_of!(BTNode, right) - 24usize];
    ["Offset of field: BTNode::depth"][::std::mem::offset_of!(BTNode, depth) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryTree {
    pub root: *mut BTNode,
    pub count: ::std::os::raw::c_int,
    pub CompareKey: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            tree: *mut BinaryTree,
            a: uintptr,
            b: uintptr,
        ) -> ::std::os::raw::c_int,
    >,
    pub FreeKey: ::std::option::Option</*unsafe*/ extern "C" fn(key: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BinaryTree"][::std::mem::size_of::<BinaryTree>() - 32usize];
    ["Alignment of BinaryTree"][::std::mem::align_of::<BinaryTree>() - 8usize];
    ["Offset of field: BinaryTree::root"][::std::mem::offset_of!(BinaryTree, root) - 0usize];
    ["Offset of field: BinaryTree::count"][::std::mem::offset_of!(BinaryTree, count) - 8usize];
    ["Offset of field: BinaryTree::CompareKey"]
        [::std::mem::offset_of!(BinaryTree, CompareKey) - 16usize];
    ["Offset of field: BinaryTree::FreeKey"][::std::mem::offset_of!(BinaryTree, FreeKey) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NameSpace {
    pub name: *const ::std::os::raw::c_char,
    pub btParent: *mut NameSpace,
    pub left: *mut NameSpace,
    pub right: *mut NameSpace,
    pub depth: ::std::os::raw::c_int,
    pub parent: *mut NameSpace,
    pub nameSpaces: BinaryTree,
    pub classes: BinaryTree,
    pub defines: BinaryTree,
    pub functions: BinaryTree,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NameSpace"][::std::mem::size_of::<NameSpace>() - 176usize];
    ["Alignment of NameSpace"][::std::mem::align_of::<NameSpace>() - 8usize];
    ["Offset of field: NameSpace::name"][::std::mem::offset_of!(NameSpace, name) - 0usize];
    ["Offset of field: NameSpace::btParent"][::std::mem::offset_of!(NameSpace, btParent) - 8usize];
    ["Offset of field: NameSpace::left"][::std::mem::offset_of!(NameSpace, left) - 16usize];
    ["Offset of field: NameSpace::right"][::std::mem::offset_of!(NameSpace, right) - 24usize];
    ["Offset of field: NameSpace::depth"][::std::mem::offset_of!(NameSpace, depth) - 32usize];
    ["Offset of field: NameSpace::parent"][::std::mem::offset_of!(NameSpace, parent) - 40usize];
    ["Offset of field: NameSpace::nameSpaces"]
        [::std::mem::offset_of!(NameSpace, nameSpaces) - 48usize];
    ["Offset of field: NameSpace::classes"][::std::mem::offset_of!(NameSpace, classes) - 80usize];
    ["Offset of field: NameSpace::defines"][::std::mem::offset_of!(NameSpace, defines) - 112usize];
    ["Offset of field: NameSpace::functions"]
        [::std::mem::offset_of!(NameSpace, functions) - 144usize];
};
pub type uint = u32;
pub type bool_ = uint;
pub const boolean_true_: boolean = 1;
pub const boolean_false_: boolean = 0;
pub type boolean = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OldList {
    pub first: *mut ::std::os::raw::c_void,
    pub last: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub offset: uint,
    pub circ: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OldList"][::std::mem::size_of::<OldList>() - 32usize];
    ["Alignment of OldList"][::std::mem::align_of::<OldList>() - 8usize];
    ["Offset of field: OldList::first"][::std::mem::offset_of!(OldList, first) - 0usize];
    ["Offset of field: OldList::last"][::std::mem::offset_of!(OldList, last) - 8usize];
    ["Offset of field: OldList::count"][::std::mem::offset_of!(OldList, count) - 16usize];
    ["Offset of field: OldList::offset"][::std::mem::offset_of!(OldList, offset) - 20usize];
    ["Offset of field: OldList::circ"][::std::mem::offset_of!(OldList, circ) - 24usize];
};
pub type Module = Instance;
pub type Application = Module;
pub type ImportType = ::std::os::raw::c_int;
pub const ImportType_ImportType_normalImport: ImportType = 0;
pub const ImportType_ImportType_staticImport: ImportType = 1;
pub const ImportType_ImportType_remoteImport: ImportType = 2;
pub const ImportType_ImportType_preDeclImport: ImportType = 3;
pub const ImportType_ImportType_comCheckImport: ImportType = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_Module {
    pub application: Application,
    pub classes: OldList,
    pub defines: OldList,
    pub functions: OldList,
    pub modules: OldList,
    pub prev: Module,
    pub next: Module,
    pub name: *const ::std::os::raw::c_char,
    pub library: *mut ::std::os::raw::c_void,
    pub Unload: *mut ::std::os::raw::c_void,
    pub importType: ImportType,
    pub origImportType: ImportType,
    pub privateNameSpace: NameSpace,
    pub publicNameSpace: NameSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_Module"][::std::mem::size_of::<class_members_Module>() - 536usize];
    ["Alignment of class_members_Module"][::std::mem::align_of::<class_members_Module>() - 8usize];
    ["Offset of field: class_members_Module::application"]
        [::std::mem::offset_of!(class_members_Module, application) - 0usize];
    ["Offset of field: class_members_Module::classes"]
        [::std::mem::offset_of!(class_members_Module, classes) - 8usize];
    ["Offset of field: class_members_Module::defines"]
        [::std::mem::offset_of!(class_members_Module, defines) - 40usize];
    ["Offset of field: class_members_Module::functions"]
        [::std::mem::offset_of!(class_members_Module, functions) - 72usize];
    ["Offset of field: class_members_Module::modules"]
        [::std::mem::offset_of!(class_members_Module, modules) - 104usize];
    ["Offset of field: class_members_Module::prev"]
        [::std::mem::offset_of!(class_members_Module, prev) - 136usize];
    ["Offset of field: class_members_Module::next"]
        [::std::mem::offset_of!(class_members_Module, next) - 144usize];
    ["Offset of field: class_members_Module::name"]
        [::std::mem::offset_of!(class_members_Module, name) - 152usize];
    ["Offset of field: class_members_Module::library"]
        [::std::mem::offset_of!(class_members_Module, library) - 160usize];
    ["Offset of field: class_members_Module::Unload"]
        [::std::mem::offset_of!(class_members_Module, Unload) - 168usize];
    ["Offset of field: class_members_Module::importType"]
        [::std::mem::offset_of!(class_members_Module, importType) - 176usize];
    ["Offset of field: class_members_Module::origImportType"]
        [::std::mem::offset_of!(class_members_Module, origImportType) - 180usize];
    ["Offset of field: class_members_Module::privateNameSpace"]
        [::std::mem::offset_of!(class_members_Module, privateNameSpace) - 184usize];
    ["Offset of field: class_members_Module::publicNameSpace"]
        [::std::mem::offset_of!(class_members_Module, publicNameSpace) - 360usize];
};
pub type AccessMode = ::std::os::raw::c_int;
pub const AccessMode_AccessMode_defaultAccess: AccessMode = 0;
pub const AccessMode_AccessMode_publicAccess: AccessMode = 1;
pub const AccessMode_AccessMode_privateAccess: AccessMode = 2;
pub const AccessMode_AccessMode_staticAccess: AccessMode = 3;
pub const AccessMode_AccessMode_baseSystemAccess: AccessMode = 4;
pub type typed_object_class_ptr = *mut Class;
pub type ClassType = ::std::os::raw::c_int;
pub const ClassType_ClassType_normalClass: ClassType = 0;
pub const ClassType_ClassType_structClass: ClassType = 1;
pub const ClassType_ClassType_bitClass: ClassType = 2;
pub const ClassType_ClassType_unitClass: ClassType = 3;
pub const ClassType_ClassType_enumClass: ClassType = 4;
pub const ClassType_ClassType_noHeadClass: ClassType = 5;
pub const ClassType_ClassType_unionClass: ClassType = 6;
pub const ClassType_ClassType_systemClass: ClassType = 1000;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Class {
    pub prev: *mut Class,
    pub next: *mut Class,
    pub name: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub structSize: ::std::os::raw::c_int,
    pub _vTbl: *mut *mut ::std::os::raw::c_void,
    pub vTblSize: ::std::os::raw::c_int,
    pub Constructor:
        ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> bool_>,
    pub Destructor: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub offsetClass: ::std::os::raw::c_int,
    pub sizeClass: ::std::os::raw::c_int,
    pub base: *mut Class,
    pub methods: BinaryTree,
    pub members: BinaryTree,
    pub prop: BinaryTree,
    pub membersAndProperties: OldList,
    pub classProperties: BinaryTree,
    pub derivatives: OldList,
    pub memberID: ::std::os::raw::c_int,
    pub startMemberID: ::std::os::raw::c_int,
    pub type_: ClassType,
    pub module: Module,
    pub nameSpace: *mut NameSpace,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataType: *mut Type,
    pub typeSize: ::std::os::raw::c_int,
    pub defaultAlignment: ::std::os::raw::c_int,
    pub Initialize: ::std::option::Option</*unsafe*/ extern "C" fn()>,
    pub memberOffset: ::std::os::raw::c_int,
    pub selfWatchers: OldList,
    pub designerClass: *const ::std::os::raw::c_char,
    pub noExpansion: bool_,
    pub defaultProperty: *const ::std::os::raw::c_char,
    pub comRedefinition: bool_,
    pub count: ::std::os::raw::c_int,
    pub isRemote: ::std::os::raw::c_int,
    pub internalDecl: bool_,
    pub data: *mut ::std::os::raw::c_void,
    pub computeSize: bool_,
    pub structAlignment: ::std::os::raw::c_short,
    pub pointerAlignment: ::std::os::raw::c_short,
    pub destructionWatchOffset: ::std::os::raw::c_int,
    pub fixed: bool_,
    pub delayedCPValues: OldList,
    pub inheritanceAccess: AccessMode,
    pub fullName: *const ::std::os::raw::c_char,
    pub symbol: *mut ::std::os::raw::c_void,
    pub conversions: OldList,
    pub templateParams: OldList,
    pub templateArgs: *mut ClassTemplateArgument,
    pub templateClass: *mut Class,
    pub templatized: OldList,
    pub numParams: ::std::os::raw::c_int,
    pub isInstanceClass: bool_,
    pub byValueSystemClass: bool_,
    pub bindingsClass: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Class"][::std::mem::size_of::<Class>() - 632usize];
    ["Alignment of Class"][::std::mem::align_of::<Class>() - 8usize];
    ["Offset of field: Class::prev"][::std::mem::offset_of!(Class, prev) - 0usize];
    ["Offset of field: Class::next"][::std::mem::offset_of!(Class, next) - 8usize];
    ["Offset of field: Class::name"][::std::mem::offset_of!(Class, name) - 16usize];
    ["Offset of field: Class::offset"][::std::mem::offset_of!(Class, offset) - 24usize];
    ["Offset of field: Class::structSize"][::std::mem::offset_of!(Class, structSize) - 28usize];
    ["Offset of field: Class::_vTbl"][::std::mem::offset_of!(Class, _vTbl) - 32usize];
    ["Offset of field: Class::vTblSize"][::std::mem::offset_of!(Class, vTblSize) - 40usize];
    ["Offset of field: Class::Constructor"][::std::mem::offset_of!(Class, Constructor) - 48usize];
    ["Offset of field: Class::Destructor"][::std::mem::offset_of!(Class, Destructor) - 56usize];
    ["Offset of field: Class::offsetClass"][::std::mem::offset_of!(Class, offsetClass) - 64usize];
    ["Offset of field: Class::sizeClass"][::std::mem::offset_of!(Class, sizeClass) - 68usize];
    ["Offset of field: Class::base"][::std::mem::offset_of!(Class, base) - 72usize];
    ["Offset of field: Class::methods"][::std::mem::offset_of!(Class, methods) - 80usize];
    ["Offset of field: Class::members"][::std::mem::offset_of!(Class, members) - 112usize];
    ["Offset of field: Class::prop"][::std::mem::offset_of!(Class, prop) - 144usize];
    ["Offset of field: Class::membersAndProperties"]
        [::std::mem::offset_of!(Class, membersAndProperties) - 176usize];
    ["Offset of field: Class::classProperties"]
        [::std::mem::offset_of!(Class, classProperties) - 208usize];
    ["Offset of field: Class::derivatives"][::std::mem::offset_of!(Class, derivatives) - 240usize];
    ["Offset of field: Class::memberID"][::std::mem::offset_of!(Class, memberID) - 272usize];
    ["Offset of field: Class::startMemberID"]
        [::std::mem::offset_of!(Class, startMemberID) - 276usize];
    ["Offset of field: Class::type_"][::std::mem::offset_of!(Class, type_) - 280usize];
    ["Offset of field: Class::module"][::std::mem::offset_of!(Class, module) - 288usize];
    ["Offset of field: Class::nameSpace"][::std::mem::offset_of!(Class, nameSpace) - 296usize];
    ["Offset of field: Class::dataTypeString"]
        [::std::mem::offset_of!(Class, dataTypeString) - 304usize];
    ["Offset of field: Class::dataType"][::std::mem::offset_of!(Class, dataType) - 312usize];
    ["Offset of field: Class::typeSize"][::std::mem::offset_of!(Class, typeSize) - 320usize];
    ["Offset of field: Class::defaultAlignment"]
        [::std::mem::offset_of!(Class, defaultAlignment) - 324usize];
    ["Offset of field: Class::Initialize"][::std::mem::offset_of!(Class, Initialize) - 328usize];
    ["Offset of field: Class::memberOffset"]
        [::std::mem::offset_of!(Class, memberOffset) - 336usize];
    ["Offset of field: Class::selfWatchers"]
        [::std::mem::offset_of!(Class, selfWatchers) - 344usize];
    ["Offset of field: Class::designerClass"]
        [::std::mem::offset_of!(Class, designerClass) - 376usize];
    ["Offset of field: Class::noExpansion"][::std::mem::offset_of!(Class, noExpansion) - 384usize];
    ["Offset of field: Class::defaultProperty"]
        [::std::mem::offset_of!(Class, defaultProperty) - 392usize];
    ["Offset of field: Class::comRedefinition"]
        [::std::mem::offset_of!(Class, comRedefinition) - 400usize];
    ["Offset of field: Class::count"][::std::mem::offset_of!(Class, count) - 404usize];
    ["Offset of field: Class::isRemote"][::std::mem::offset_of!(Class, isRemote) - 408usize];
    ["Offset of field: Class::internalDecl"]
        [::std::mem::offset_of!(Class, internalDecl) - 412usize];
    ["Offset of field: Class::data"][::std::mem::offset_of!(Class, data) - 416usize];
    ["Offset of field: Class::computeSize"][::std::mem::offset_of!(Class, computeSize) - 424usize];
    ["Offset of field: Class::structAlignment"]
        [::std::mem::offset_of!(Class, structAlignment) - 428usize];
    ["Offset of field: Class::pointerAlignment"]
        [::std::mem::offset_of!(Class, pointerAlignment) - 430usize];
    ["Offset of field: Class::destructionWatchOffset"]
        [::std::mem::offset_of!(Class, destructionWatchOffset) - 432usize];
    ["Offset of field: Class::fixed"][::std::mem::offset_of!(Class, fixed) - 436usize];
    ["Offset of field: Class::delayedCPValues"]
        [::std::mem::offset_of!(Class, delayedCPValues) - 440usize];
    ["Offset of field: Class::inheritanceAccess"]
        [::std::mem::offset_of!(Class, inheritanceAccess) - 472usize];
    ["Offset of field: Class::fullName"][::std::mem::offset_of!(Class, fullName) - 480usize];
    ["Offset of field: Class::symbol"][::std::mem::offset_of!(Class, symbol) - 488usize];
    ["Offset of field: Class::conversions"][::std::mem::offset_of!(Class, conversions) - 496usize];
    ["Offset of field: Class::templateParams"]
        [::std::mem::offset_of!(Class, templateParams) - 528usize];
    ["Offset of field: Class::templateArgs"]
        [::std::mem::offset_of!(Class, templateArgs) - 560usize];
    ["Offset of field: Class::templateClass"]
        [::std::mem::offset_of!(Class, templateClass) - 568usize];
    ["Offset of field: Class::templatized"][::std::mem::offset_of!(Class, templatized) - 576usize];
    ["Offset of field: Class::numParams"][::std::mem::offset_of!(Class, numParams) - 608usize];
    ["Offset of field: Class::isInstanceClass"]
        [::std::mem::offset_of!(Class, isInstanceClass) - 612usize];
    ["Offset of field: Class::byValueSystemClass"]
        [::std::mem::offset_of!(Class, byValueSystemClass) - 616usize];
    ["Offset of field: Class::bindingsClass"]
        [::std::mem::offset_of!(Class, bindingsClass) - 624usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_Application {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *const ::std::os::raw::c_char,
    pub exitCode: ::std::os::raw::c_int,
    pub isGUIApp: bool_,
    pub allModules: OldList,
    pub parsedCommand: *mut ::std::os::raw::c_char,
    pub systemNameSpace: NameSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_Application"]
        [::std::mem::size_of::<class_members_Application>() - 240usize];
    ["Alignment of class_members_Application"]
        [::std::mem::align_of::<class_members_Application>() - 8usize];
    ["Offset of field: class_members_Application::argc"]
        [::std::mem::offset_of!(class_members_Application, argc) - 0usize];
    ["Offset of field: class_members_Application::argv"]
        [::std::mem::offset_of!(class_members_Application, argv) - 8usize];
    ["Offset of field: class_members_Application::exitCode"]
        [::std::mem::offset_of!(class_members_Application, exitCode) - 16usize];
    ["Offset of field: class_members_Application::isGUIApp"]
        [::std::mem::offset_of!(class_members_Application, isGUIApp) - 20usize];
    ["Offset of field: class_members_Application::allModules"]
        [::std::mem::offset_of!(class_members_Application, allModules) - 24usize];
    ["Offset of field: class_members_Application::parsedCommand"]
        [::std::mem::offset_of!(class_members_Application, parsedCommand) - 56usize];
    ["Offset of field: class_members_Application::systemNameSpace"]
        [::std::mem::offset_of!(class_members_Application, systemNameSpace) - 64usize];
};
/*unsafe*/ extern "C" {
    pub static mut Application_main_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Application_main: *mut Method;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_Instance {
    pub _vTbl: *mut *mut ::std::os::raw::c_void,
    pub _class: *mut Class,
    pub _refCount: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_Instance"][::std::mem::size_of::<class_members_Instance>() - 24usize];
    ["Alignment of class_members_Instance"]
        [::std::mem::align_of::<class_members_Instance>() - 8usize];
    ["Offset of field: class_members_Instance::_vTbl"]
        [::std::mem::offset_of!(class_members_Instance, _vTbl) - 0usize];
    ["Offset of field: class_members_Instance::_class"]
        [::std::mem::offset_of!(class_members_Instance, _class) - 8usize];
    ["Offset of field: class_members_Instance::_refCount"]
        [::std::mem::offset_of!(class_members_Instance, _refCount) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut Module_onLoad_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Module_onLoad: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Module_onUnload_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Module_onUnload: *mut Method;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BTNamedLink {
    pub name: *const ::std::os::raw::c_char,
    pub parent: *mut BTNamedLink,
    pub left: *mut BTNamedLink,
    pub right: *mut BTNamedLink,
    pub depth: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BTNamedLink"][::std::mem::size_of::<BTNamedLink>() - 48usize];
    ["Alignment of BTNamedLink"][::std::mem::align_of::<BTNamedLink>() - 8usize];
    ["Offset of field: BTNamedLink::name"][::std::mem::offset_of!(BTNamedLink, name) - 0usize];
    ["Offset of field: BTNamedLink::parent"][::std::mem::offset_of!(BTNamedLink, parent) - 8usize];
    ["Offset of field: BTNamedLink::left"][::std::mem::offset_of!(BTNamedLink, left) - 16usize];
    ["Offset of field: BTNamedLink::right"][::std::mem::offset_of!(BTNamedLink, right) - 24usize];
    ["Offset of field: BTNamedLink::depth"][::std::mem::offset_of!(BTNamedLink, depth) - 32usize];
    ["Offset of field: BTNamedLink::data"][::std::mem::offset_of!(BTNamedLink, data) - 40usize];
};
pub type DataMemberType = ::std::os::raw::c_int;
pub const DataMemberType_DataMemberType_normalMember: DataMemberType = 0;
pub const DataMemberType_DataMemberType_unionMember: DataMemberType = 1;
pub const DataMemberType_DataMemberType_structMember: DataMemberType = 2;
pub type uint64 = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitMember {
    pub prev: *mut BitMember,
    pub next: *mut BitMember,
    pub name: *const ::std::os::raw::c_char,
    pub isProperty: bool_,
    pub memberAccess: AccessMode,
    pub id: ::std::os::raw::c_int,
    pub _class: *mut Class,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataTypeClass: *mut Class,
    pub dataType: *mut Type,
    pub type_: DataMemberType,
    pub size: ::std::os::raw::c_int,
    pub pos: ::std::os::raw::c_int,
    pub mask: uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BitMember"][::std::mem::size_of::<BitMember>() - 96usize];
    ["Alignment of BitMember"][::std::mem::align_of::<BitMember>() - 8usize];
    ["Offset of field: BitMember::prev"][::std::mem::offset_of!(BitMember, prev) - 0usize];
    ["Offset of field: BitMember::next"][::std::mem::offset_of!(BitMember, next) - 8usize];
    ["Offset of field: BitMember::name"][::std::mem::offset_of!(BitMember, name) - 16usize];
    ["Offset of field: BitMember::isProperty"]
        [::std::mem::offset_of!(BitMember, isProperty) - 24usize];
    ["Offset of field: BitMember::memberAccess"]
        [::std::mem::offset_of!(BitMember, memberAccess) - 28usize];
    ["Offset of field: BitMember::id"][::std::mem::offset_of!(BitMember, id) - 32usize];
    ["Offset of field: BitMember::_class"][::std::mem::offset_of!(BitMember, _class) - 40usize];
    ["Offset of field: BitMember::dataTypeString"]
        [::std::mem::offset_of!(BitMember, dataTypeString) - 48usize];
    ["Offset of field: BitMember::dataTypeClass"]
        [::std::mem::offset_of!(BitMember, dataTypeClass) - 56usize];
    ["Offset of field: BitMember::dataType"][::std::mem::offset_of!(BitMember, dataType) - 64usize];
    ["Offset of field: BitMember::type_"][::std::mem::offset_of!(BitMember, type_) - 72usize];
    ["Offset of field: BitMember::size"][::std::mem::offset_of!(BitMember, size) - 76usize];
    ["Offset of field: BitMember::pos"][::std::mem::offset_of!(BitMember, pos) - 80usize];
    ["Offset of field: BitMember::mask"][::std::mem::offset_of!(BitMember, mask) - 88usize];
};
pub type int64 = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClassProperty {
    pub name: *const ::std::os::raw::c_char,
    pub parent: *mut ClassProperty,
    pub left: *mut ClassProperty,
    pub right: *mut ClassProperty,
    pub depth: ::std::os::raw::c_int,
    pub Set: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut Class, arg2: int64)>,
    pub Get: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut Class) -> int64>,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataType: *mut Type,
    pub constant: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassProperty"][::std::mem::size_of::<ClassProperty>() - 80usize];
    ["Alignment of ClassProperty"][::std::mem::align_of::<ClassProperty>() - 8usize];
    ["Offset of field: ClassProperty::name"][::std::mem::offset_of!(ClassProperty, name) - 0usize];
    ["Offset of field: ClassProperty::parent"]
        [::std::mem::offset_of!(ClassProperty, parent) - 8usize];
    ["Offset of field: ClassProperty::left"][::std::mem::offset_of!(ClassProperty, left) - 16usize];
    ["Offset of field: ClassProperty::right"]
        [::std::mem::offset_of!(ClassProperty, right) - 24usize];
    ["Offset of field: ClassProperty::depth"]
        [::std::mem::offset_of!(ClassProperty, depth) - 32usize];
    ["Offset of field: ClassProperty::Set"][::std::mem::offset_of!(ClassProperty, Set) - 40usize];
    ["Offset of field: ClassProperty::Get"][::std::mem::offset_of!(ClassProperty, Get) - 48usize];
    ["Offset of field: ClassProperty::dataTypeString"]
        [::std::mem::offset_of!(ClassProperty, dataTypeString) - 56usize];
    ["Offset of field: ClassProperty::dataType"]
        [::std::mem::offset_of!(ClassProperty, dataType) - 64usize];
    ["Offset of field: ClassProperty::constant"]
        [::std::mem::offset_of!(ClassProperty, constant) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DataMember {
    pub prev: *mut DataMember,
    pub next: *mut DataMember,
    pub name: *const ::std::os::raw::c_char,
    pub isProperty: bool_,
    pub memberAccess: AccessMode,
    pub id: ::std::os::raw::c_int,
    pub _class: *mut Class,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataTypeClass: *mut Class,
    pub dataType: *mut Type,
    pub type_: DataMemberType,
    pub offset: ::std::os::raw::c_int,
    pub memberID: ::std::os::raw::c_int,
    pub members: OldList,
    pub membersAlpha: BinaryTree,
    pub memberOffset: ::std::os::raw::c_int,
    pub structAlignment: ::std::os::raw::c_short,
    pub pointerAlignment: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataMember"][::std::mem::size_of::<DataMember>() - 160usize];
    ["Alignment of DataMember"][::std::mem::align_of::<DataMember>() - 8usize];
    ["Offset of field: DataMember::prev"][::std::mem::offset_of!(DataMember, prev) - 0usize];
    ["Offset of field: DataMember::next"][::std::mem::offset_of!(DataMember, next) - 8usize];
    ["Offset of field: DataMember::name"][::std::mem::offset_of!(DataMember, name) - 16usize];
    ["Offset of field: DataMember::isProperty"]
        [::std::mem::offset_of!(DataMember, isProperty) - 24usize];
    ["Offset of field: DataMember::memberAccess"]
        [::std::mem::offset_of!(DataMember, memberAccess) - 28usize];
    ["Offset of field: DataMember::id"][::std::mem::offset_of!(DataMember, id) - 32usize];
    ["Offset of field: DataMember::_class"][::std::mem::offset_of!(DataMember, _class) - 40usize];
    ["Offset of field: DataMember::dataTypeString"]
        [::std::mem::offset_of!(DataMember, dataTypeString) - 48usize];
    ["Offset of field: DataMember::dataTypeClass"]
        [::std::mem::offset_of!(DataMember, dataTypeClass) - 56usize];
    ["Offset of field: DataMember::dataType"]
        [::std::mem::offset_of!(DataMember, dataType) - 64usize];
    ["Offset of field: DataMember::type_"][::std::mem::offset_of!(DataMember, type_) - 72usize];
    ["Offset of field: DataMember::offset"][::std::mem::offset_of!(DataMember, offset) - 76usize];
    ["Offset of field: DataMember::memberID"]
        [::std::mem::offset_of!(DataMember, memberID) - 80usize];
    ["Offset of field: DataMember::members"][::std::mem::offset_of!(DataMember, members) - 88usize];
    ["Offset of field: DataMember::membersAlpha"]
        [::std::mem::offset_of!(DataMember, membersAlpha) - 120usize];
    ["Offset of field: DataMember::memberOffset"]
        [::std::mem::offset_of!(DataMember, memberOffset) - 152usize];
    ["Offset of field: DataMember::structAlignment"]
        [::std::mem::offset_of!(DataMember, structAlignment) - 156usize];
    ["Offset of field: DataMember::pointerAlignment"]
        [::std::mem::offset_of!(DataMember, pointerAlignment) - 158usize];
};
pub type byte = u8;
pub type uint16 = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DataValue {
    pub __bindgen_anon_1: DataValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DataValue__bindgen_ty_1 {
    pub c: ::std::os::raw::c_char,
    pub uc: byte,
    pub s: ::std::os::raw::c_short,
    pub us: uint16,
    pub i: ::std::os::raw::c_int,
    pub ui: uint,
    pub p: *mut ::std::os::raw::c_void,
    pub f: f32,
    pub d: f64,
    pub i64_: int64,
    pub ui64: uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataValue__bindgen_ty_1"][::std::mem::size_of::<DataValue__bindgen_ty_1>() - 8usize];
    ["Alignment of DataValue__bindgen_ty_1"]
        [::std::mem::align_of::<DataValue__bindgen_ty_1>() - 8usize];
    ["Offset of field: DataValue__bindgen_ty_1::c"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, c) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::uc"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, uc) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::s"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, s) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::us"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, us) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::i"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, i) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::ui"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, ui) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::p"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, p) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::f"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, f) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::d"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, d) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::i64_"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, i64_) - 0usize];
    ["Offset of field: DataValue__bindgen_ty_1::ui64"]
        [::std::mem::offset_of!(DataValue__bindgen_ty_1, ui64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataValue"][::std::mem::size_of::<DataValue>() - 8usize];
    ["Alignment of DataValue"][::std::mem::align_of::<DataValue>() - 8usize];
};
pub type MethodType = ::std::os::raw::c_int;
pub const MethodType_MethodType_normalMethod: MethodType = 0;
pub const MethodType_MethodType_virtualMethod: MethodType = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Method {
    pub name: *const ::std::os::raw::c_char,
    pub parent: *mut Method,
    pub left: *mut Method,
    pub right: *mut Method,
    pub depth: ::std::os::raw::c_int,
    pub function: ::std::option::Option</*unsafe*/ extern "C" fn() -> ::std::os::raw::c_int>,
    pub vid: ::std::os::raw::c_int,
    pub type_: MethodType,
    pub _class: *mut Class,
    pub symbol: *mut ::std::os::raw::c_void,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataType: *mut Type,
    pub memberAccess: AccessMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Method"][::std::mem::size_of::<Method>() - 96usize];
    ["Alignment of Method"][::std::mem::align_of::<Method>() - 8usize];
    ["Offset of field: Method::name"][::std::mem::offset_of!(Method, name) - 0usize];
    ["Offset of field: Method::parent"][::std::mem::offset_of!(Method, parent) - 8usize];
    ["Offset of field: Method::left"][::std::mem::offset_of!(Method, left) - 16usize];
    ["Offset of field: Method::right"][::std::mem::offset_of!(Method, right) - 24usize];
    ["Offset of field: Method::depth"][::std::mem::offset_of!(Method, depth) - 32usize];
    ["Offset of field: Method::function"][::std::mem::offset_of!(Method, function) - 40usize];
    ["Offset of field: Method::vid"][::std::mem::offset_of!(Method, vid) - 48usize];
    ["Offset of field: Method::type_"][::std::mem::offset_of!(Method, type_) - 52usize];
    ["Offset of field: Method::_class"][::std::mem::offset_of!(Method, _class) - 56usize];
    ["Offset of field: Method::symbol"][::std::mem::offset_of!(Method, symbol) - 64usize];
    ["Offset of field: Method::dataTypeString"]
        [::std::mem::offset_of!(Method, dataTypeString) - 72usize];
    ["Offset of field: Method::dataType"][::std::mem::offset_of!(Method, dataType) - 80usize];
    ["Offset of field: Method::memberAccess"]
        [::std::mem::offset_of!(Method, memberAccess) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Property {
    pub prev: *mut Property,
    pub next: *mut Property,
    pub name: *const ::std::os::raw::c_char,
    pub isProperty: bool_,
    pub memberAccess: AccessMode,
    pub id: ::std::os::raw::c_int,
    pub _class: *mut Class,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataTypeClass: *mut Class,
    pub dataType: *mut Type,
    pub Set: ::std::option::Option<
        /*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int),
    >,
    pub Get: ::std::option::Option<
        /*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub IsSet:
        ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> bool_>,
    pub data: *mut ::std::os::raw::c_void,
    pub symbol: *mut ::std::os::raw::c_void,
    pub vid: ::std::os::raw::c_int,
    pub conversion: bool_,
    pub watcherOffset: uint,
    pub category: *const ::std::os::raw::c_char,
    pub compiled: bool_,
    pub selfWatchable: bool_,
    pub isWatchable: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Property"][::std::mem::size_of::<Property>() - 152usize];
    ["Alignment of Property"][::std::mem::align_of::<Property>() - 8usize];
    ["Offset of field: Property::prev"][::std::mem::offset_of!(Property, prev) - 0usize];
    ["Offset of field: Property::next"][::std::mem::offset_of!(Property, next) - 8usize];
    ["Offset of field: Property::name"][::std::mem::offset_of!(Property, name) - 16usize];
    ["Offset of field: Property::isProperty"]
        [::std::mem::offset_of!(Property, isProperty) - 24usize];
    ["Offset of field: Property::memberAccess"]
        [::std::mem::offset_of!(Property, memberAccess) - 28usize];
    ["Offset of field: Property::id"][::std::mem::offset_of!(Property, id) - 32usize];
    ["Offset of field: Property::_class"][::std::mem::offset_of!(Property, _class) - 40usize];
    ["Offset of field: Property::dataTypeString"]
        [::std::mem::offset_of!(Property, dataTypeString) - 48usize];
    ["Offset of field: Property::dataTypeClass"]
        [::std::mem::offset_of!(Property, dataTypeClass) - 56usize];
    ["Offset of field: Property::dataType"][::std::mem::offset_of!(Property, dataType) - 64usize];
    ["Offset of field: Property::Set"][::std::mem::offset_of!(Property, Set) - 72usize];
    ["Offset of field: Property::Get"][::std::mem::offset_of!(Property, Get) - 80usize];
    ["Offset of field: Property::IsSet"][::std::mem::offset_of!(Property, IsSet) - 88usize];
    ["Offset of field: Property::data"][::std::mem::offset_of!(Property, data) - 96usize];
    ["Offset of field: Property::symbol"][::std::mem::offset_of!(Property, symbol) - 104usize];
    ["Offset of field: Property::vid"][::std::mem::offset_of!(Property, vid) - 112usize];
    ["Offset of field: Property::conversion"]
        [::std::mem::offset_of!(Property, conversion) - 116usize];
    ["Offset of field: Property::watcherOffset"]
        [::std::mem::offset_of!(Property, watcherOffset) - 120usize];
    ["Offset of field: Property::category"][::std::mem::offset_of!(Property, category) - 128usize];
    ["Offset of field: Property::compiled"][::std::mem::offset_of!(Property, compiled) - 136usize];
    ["Offset of field: Property::selfWatchable"]
        [::std::mem::offset_of!(Property, selfWatchable) - 140usize];
    ["Offset of field: Property::isWatchable"]
        [::std::mem::offset_of!(Property, isWatchable) - 144usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ClassTemplateArgument {
    pub __bindgen_anon_1: ClassTemplateArgument__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ClassTemplateArgument__bindgen_ty_1 {
    pub __bindgen_anon_1: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1,
    pub expression: DataValue,
    pub __bindgen_anon_2: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1 {
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataTypeClass: *mut Class,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1::dataTypeString"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1,
        dataTypeString
    )
        - 0usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1::dataTypeClass"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_1,
        dataTypeClass
    )
        - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2 {
    pub memberString: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub member: *mut DataMember,
    pub prop: *mut Property,
    pub method: *mut Method,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::member"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        member
    )
        - 0usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::prop"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        prop
    )
        - 0usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::method"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        method
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2::memberString"][::std::mem::offset_of!(
        ClassTemplateArgument__bindgen_ty_1__bindgen_ty_2,
        memberString
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateArgument__bindgen_ty_1"]
        [::std::mem::size_of::<ClassTemplateArgument__bindgen_ty_1>() - 16usize];
    ["Alignment of ClassTemplateArgument__bindgen_ty_1"]
        [::std::mem::align_of::<ClassTemplateArgument__bindgen_ty_1>() - 8usize];
    ["Offset of field: ClassTemplateArgument__bindgen_ty_1::expression"]
        [::std::mem::offset_of!(ClassTemplateArgument__bindgen_ty_1, expression) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateArgument"][::std::mem::size_of::<ClassTemplateArgument>() - 16usize];
    ["Alignment of ClassTemplateArgument"]
        [::std::mem::align_of::<ClassTemplateArgument>() - 8usize];
};
pub type TemplateMemberType = ::std::os::raw::c_int;
pub const TemplateMemberType_TemplateMemberType_dataMember: TemplateMemberType = 0;
pub const TemplateMemberType_TemplateMemberType_method: TemplateMemberType = 1;
pub const TemplateMemberType_TemplateMemberType_prop: TemplateMemberType = 2;
pub type TemplateParameterType = ::std::os::raw::c_int;
pub const TemplateParameterType_TemplateParameterType_type: TemplateParameterType = 0;
pub const TemplateParameterType_TemplateParameterType_identifier: TemplateParameterType = 1;
pub const TemplateParameterType_TemplateParameterType_expression: TemplateParameterType = 2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ClassTemplateParameter {
    pub prev: *mut ClassTemplateParameter,
    pub next: *mut ClassTemplateParameter,
    pub name: *const ::std::os::raw::c_char,
    pub type_: TemplateParameterType,
    pub __bindgen_anon_1: ClassTemplateParameter__bindgen_ty_1,
    pub defaultArg: ClassTemplateArgument,
    pub param: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ClassTemplateParameter__bindgen_ty_1 {
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub memberType: TemplateMemberType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateParameter__bindgen_ty_1"]
        [::std::mem::size_of::<ClassTemplateParameter__bindgen_ty_1>() - 8usize];
    ["Alignment of ClassTemplateParameter__bindgen_ty_1"]
        [::std::mem::align_of::<ClassTemplateParameter__bindgen_ty_1>() - 8usize];
    ["Offset of field: ClassTemplateParameter__bindgen_ty_1::dataTypeString"]
        [::std::mem::offset_of!(ClassTemplateParameter__bindgen_ty_1, dataTypeString) - 0usize];
    ["Offset of field: ClassTemplateParameter__bindgen_ty_1::memberType"]
        [::std::mem::offset_of!(ClassTemplateParameter__bindgen_ty_1, memberType) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassTemplateParameter"][::std::mem::size_of::<ClassTemplateParameter>() - 64usize];
    ["Alignment of ClassTemplateParameter"]
        [::std::mem::align_of::<ClassTemplateParameter>() - 8usize];
    ["Offset of field: ClassTemplateParameter::prev"]
        [::std::mem::offset_of!(ClassTemplateParameter, prev) - 0usize];
    ["Offset of field: ClassTemplateParameter::next"]
        [::std::mem::offset_of!(ClassTemplateParameter, next) - 8usize];
    ["Offset of field: ClassTemplateParameter::name"]
        [::std::mem::offset_of!(ClassTemplateParameter, name) - 16usize];
    ["Offset of field: ClassTemplateParameter::type_"]
        [::std::mem::offset_of!(ClassTemplateParameter, type_) - 24usize];
    ["Offset of field: ClassTemplateParameter::defaultArg"]
        [::std::mem::offset_of!(ClassTemplateParameter, defaultArg) - 40usize];
    ["Offset of field: ClassTemplateParameter::param"]
        [::std::mem::offset_of!(ClassTemplateParameter, param) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DefinedExpression {
    pub prev: *mut DefinedExpression,
    pub next: *mut DefinedExpression,
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
    pub nameSpace: *mut NameSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DefinedExpression"][::std::mem::size_of::<DefinedExpression>() - 40usize];
    ["Alignment of DefinedExpression"][::std::mem::align_of::<DefinedExpression>() - 8usize];
    ["Offset of field: DefinedExpression::prev"]
        [::std::mem::offset_of!(DefinedExpression, prev) - 0usize];
    ["Offset of field: DefinedExpression::next"]
        [::std::mem::offset_of!(DefinedExpression, next) - 8usize];
    ["Offset of field: DefinedExpression::name"]
        [::std::mem::offset_of!(DefinedExpression, name) - 16usize];
    ["Offset of field: DefinedExpression::value"]
        [::std::mem::offset_of!(DefinedExpression, value) - 24usize];
    ["Offset of field: DefinedExpression::nameSpace"]
        [::std::mem::offset_of!(DefinedExpression, nameSpace) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GlobalFunction {
    pub prev: *mut GlobalFunction,
    pub next: *mut GlobalFunction,
    pub name: *const ::std::os::raw::c_char,
    pub function: ::std::option::Option</*unsafe*/ extern "C" fn() -> ::std::os::raw::c_int>,
    pub module: Module,
    pub nameSpace: *mut NameSpace,
    pub dataTypeString: *const ::std::os::raw::c_char,
    pub dataType: *mut Type,
    pub symbol: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlobalFunction"][::std::mem::size_of::<GlobalFunction>() - 72usize];
    ["Alignment of GlobalFunction"][::std::mem::align_of::<GlobalFunction>() - 8usize];
    ["Offset of field: GlobalFunction::prev"]
        [::std::mem::offset_of!(GlobalFunction, prev) - 0usize];
    ["Offset of field: GlobalFunction::next"]
        [::std::mem::offset_of!(GlobalFunction, next) - 8usize];
    ["Offset of field: GlobalFunction::name"]
        [::std::mem::offset_of!(GlobalFunction, name) - 16usize];
    ["Offset of field: GlobalFunction::function"]
        [::std::mem::offset_of!(GlobalFunction, function) - 24usize];
    ["Offset of field: GlobalFunction::module"]
        [::std::mem::offset_of!(GlobalFunction, module) - 32usize];
    ["Offset of field: GlobalFunction::nameSpace"]
        [::std::mem::offset_of!(GlobalFunction, nameSpace) - 40usize];
    ["Offset of field: GlobalFunction::dataTypeString"]
        [::std::mem::offset_of!(GlobalFunction, dataTypeString) - 48usize];
    ["Offset of field: GlobalFunction::dataType"]
        [::std::mem::offset_of!(GlobalFunction, dataType) - 56usize];
    ["Offset of field: GlobalFunction::symbol"]
        [::std::mem::offset_of!(GlobalFunction, symbol) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectInfo {
    pub prev: *mut ObjectInfo,
    pub next: *mut ObjectInfo,
    pub instance: Instance,
    pub name: *mut ::std::os::raw::c_char,
    pub instCode: *mut Instantiation,
    pub deleted: bool_,
    pub oClass: *mut ObjectInfo,
    pub instances: OldList,
    pub classDefinition: *mut ClassDefinition,
    pub modified: bool_,
    pub i18nStrings: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ObjectInfo"][::std::mem::size_of::<ObjectInfo>() - 112usize];
    ["Alignment of ObjectInfo"][::std::mem::align_of::<ObjectInfo>() - 8usize];
    ["Offset of field: ObjectInfo::prev"][::std::mem::offset_of!(ObjectInfo, prev) - 0usize];
    ["Offset of field: ObjectInfo::next"][::std::mem::offset_of!(ObjectInfo, next) - 8usize];
    ["Offset of field: ObjectInfo::instance"]
        [::std::mem::offset_of!(ObjectInfo, instance) - 16usize];
    ["Offset of field: ObjectInfo::name"][::std::mem::offset_of!(ObjectInfo, name) - 24usize];
    ["Offset of field: ObjectInfo::instCode"]
        [::std::mem::offset_of!(ObjectInfo, instCode) - 32usize];
    ["Offset of field: ObjectInfo::deleted"][::std::mem::offset_of!(ObjectInfo, deleted) - 40usize];
    ["Offset of field: ObjectInfo::oClass"][::std::mem::offset_of!(ObjectInfo, oClass) - 48usize];
    ["Offset of field: ObjectInfo::instances"]
        [::std::mem::offset_of!(ObjectInfo, instances) - 56usize];
    ["Offset of field: ObjectInfo::classDefinition"]
        [::std::mem::offset_of!(ObjectInfo, classDefinition) - 88usize];
    ["Offset of field: ObjectInfo::modified"]
        [::std::mem::offset_of!(ObjectInfo, modified) - 96usize];
    ["Offset of field: ObjectInfo::i18nStrings"]
        [::std::mem::offset_of!(ObjectInfo, i18nStrings) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubModule {
    pub prev: *mut SubModule,
    pub next: *mut SubModule,
    pub module: Module,
    pub importMode: AccessMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SubModule"][::std::mem::size_of::<SubModule>() - 32usize];
    ["Alignment of SubModule"][::std::mem::align_of::<SubModule>() - 8usize];
    ["Offset of field: SubModule::prev"][::std::mem::offset_of!(SubModule, prev) - 0usize];
    ["Offset of field: SubModule::next"][::std::mem::offset_of!(SubModule, next) - 8usize];
    ["Offset of field: SubModule::module"][::std::mem::offset_of!(SubModule, module) - 16usize];
    ["Offset of field: SubModule::importMode"]
        [::std::mem::offset_of!(SubModule, importMode) - 24usize];
};
pub type BackSlashEscaping = bool_;
pub const BackSlashEscaping_BackSlashEscaping_forArgsPassing: BackSlashEscaping = 2;
pub type ClassDesignerBase = Instance;
pub type DesignerBase = Instance;
pub type uint32 = u32;
pub type EscapeCStringOptions = uint32;
pub type IOChannel = Instance;
pub type Platform = ::std::os::raw::c_int;
pub const Platform_Platform_unknown: Platform = 0;
pub const Platform_Platform_win32: Platform = 1;
pub const Platform_Platform_tux: Platform = 2;
pub const Platform_Platform_apple: Platform = 3;
pub type SerialBuffer = IOChannel;
pub type String = *mut ::std::os::raw::c_char;
pub type StringAllocType = ::std::os::raw::c_int;
pub const StringAllocType_StringAllocType_pointer: StringAllocType = 0;
pub const StringAllocType_StringAllocType_stack: StringAllocType = 1;
pub const StringAllocType_StringAllocType_heap: StringAllocType = 2;
pub type ZString = Instance;
pub type uintsize = usize;
pub type Angle = f64;
pub type CIString = *mut ::std::os::raw::c_char;
pub type Distance = f64;
pub type ObjectNotationType = bool_;
pub const ObjectNotationType_ObjectNotationType_none: ObjectNotationType = 0;
pub const ObjectNotationType_ObjectNotationType_econ: ObjectNotationType = 1;
pub const ObjectNotationType_ObjectNotationType_json: ObjectNotationType = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Box {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Box"][::std::mem::size_of::<Box>() - 16usize];
    ["Alignment of Box"][::std::mem::align_of::<Box>() - 4usize];
    ["Offset of field: Box::left"][::std::mem::offset_of!(Box, left) - 0usize];
    ["Offset of field: Box::top"][::std::mem::offset_of!(Box, top) - 4usize];
    ["Offset of field: Box::right"][::std::mem::offset_of!(Box, right) - 8usize];
    ["Offset of field: Box::bottom"][::std::mem::offset_of!(Box, bottom) - 12usize];
};
/*unsafe*/ extern "C" {
    pub static mut Box_clip:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Box, against: *mut Box)>;
}
/*unsafe*/ extern "C" {
    pub static mut Box_clipOffset: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Box,
            against: *mut Box,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Box_isPointInside:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Box, point: *mut Point) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut Box_overlap:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Box, box_: *mut Box) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Box_width: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Box_set_width:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const Box, value: ::std::os::raw::c_int)>;
}
/*unsafe*/ extern "C" {
    pub static mut Box_get_width:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const Box) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Box_height: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Box_set_height:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const Box, value: ::std::os::raw::c_int)>;
}
/*unsafe*/ extern "C" {
    pub static mut Box_get_height:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const Box) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Centimeters_Meters: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Centimeters_from_Meters:
        ::std::option::Option</*unsafe*/ extern "C" fn(meters: Distance) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut Centimeters_to_Meters:
        ::std::option::Option</*unsafe*/ extern "C" fn(centimeters: f64) -> Distance>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Class_char_ptr: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Class_from_char_ptr: ::std::option::Option<
        /*unsafe*/ extern "C" fn(c: *const Class, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Class_to_char_ptr: ::std::option::Option<
        /*unsafe*/ extern "C" fn(c: *const Class) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_addObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_addObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_createNew_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_createNew: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_createObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_createObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_destroyObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_destroyObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_droppedObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_droppedObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_fixProperty_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_fixProperty: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_listToolBoxClasses_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_listToolBoxClasses: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_postCreateObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_postCreateObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_prepareTestObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_prepareTestObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_reset_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_reset: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ClassDesignerBase_selectObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ClassDesignerBase_selectObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_Degrees_Radians: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Degrees_from_Radians:
        ::std::option::Option</*unsafe*/ extern "C" fn(radians: Angle) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut Degrees_to_Radians:
        ::std::option::Option</*unsafe*/ extern "C" fn(degrees: f64) -> Angle>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_DesignerBase {
    pub classDesigner: ClassDesignerBase,
    pub objectClass: *const ::std::os::raw::c_char,
    pub isDragging: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_DesignerBase"]
        [::std::mem::size_of::<class_members_DesignerBase>() - 24usize];
    ["Alignment of class_members_DesignerBase"]
        [::std::mem::align_of::<class_members_DesignerBase>() - 8usize];
    ["Offset of field: class_members_DesignerBase::classDesigner"]
        [::std::mem::offset_of!(class_members_DesignerBase, classDesigner) - 0usize];
    ["Offset of field: class_members_DesignerBase::objectClass"]
        [::std::mem::offset_of!(class_members_DesignerBase, objectClass) - 8usize];
    ["Offset of field: class_members_DesignerBase::isDragging"]
        [::std::mem::offset_of!(class_members_DesignerBase, isDragging) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_addDefaultMethod_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_addDefaultMethod: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_addToolBoxClass_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_addToolBoxClass: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_codeAddObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_codeAddObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_deleteObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_deleteObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_findObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_findObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_modifyCode_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_modifyCode: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_objectContainsCode_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_objectContainsCode: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_renameObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_renameObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_selectObjectFromDesigner_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_selectObjectFromDesigner: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_sheetAddObject_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_sheetAddObject: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_updateProperties_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_DesignerBase_updateProperties: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_DesignerBase_classDesigner: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_set_classDesigner:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: DesignerBase, value: ClassDesignerBase)>;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_get_classDesigner:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: DesignerBase) -> ClassDesignerBase>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DesignerBase_objectClass: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_set_objectClass: ::std::option::Option<
        /*unsafe*/ extern "C" fn(d: DesignerBase, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_get_objectClass: ::std::option::Option<
        /*unsafe*/ extern "C" fn(d: DesignerBase) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_DesignerBase_isDragging: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_set_isDragging:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: DesignerBase, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut DesignerBase_get_isDragging:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: DesignerBase) -> bool_>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EnumClassData {
    pub values: OldList,
    pub largest: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EnumClassData"][::std::mem::size_of::<EnumClassData>() - 40usize];
    ["Alignment of EnumClassData"][::std::mem::align_of::<EnumClassData>() - 8usize];
    ["Offset of field: EnumClassData::values"]
        [::std::mem::offset_of!(EnumClassData, values) - 0usize];
    ["Offset of field: EnumClassData::largest"]
        [::std::mem::offset_of!(EnumClassData, largest) - 32usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_Feet_Meters: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Feet_from_Meters:
        ::std::option::Option</*unsafe*/ extern "C" fn(meters: Distance) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut Feet_to_Meters:
        ::std::option::Option</*unsafe*/ extern "C" fn(feet: f64) -> Distance>;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_get: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: IOChannel,
            class_data: typed_object_class_ptr,
            data: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_put: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: IOChannel,
            class_data: typed_object_class_ptr,
            data: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_readData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_IOChannel_readData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_serialize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: IOChannel,
            class_data: typed_object_class_ptr,
            data: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_unserialize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: IOChannel,
            class_data: typed_object_class_ptr,
            data: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut IOChannel_writeData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_IOChannel_writeData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_Platform_char_ptr: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Platform_from_char_ptr:
        ::std::option::Option</*unsafe*/ extern "C" fn(c: *const ::std::os::raw::c_char) -> Platform>;
}
/*unsafe*/ extern "C" {
    pub static mut Platform_to_char_ptr: ::std::option::Option<
        /*unsafe*/ extern "C" fn(platform: Platform) -> *const ::std::os::raw::c_char,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Point"][::std::mem::size_of::<Point>() - 8usize];
    ["Alignment of Point"][::std::mem::align_of::<Point>() - 4usize];
    ["Offset of field: Point::x"][::std::mem::offset_of!(Point, x) - 0usize];
    ["Offset of field: Point::y"][::std::mem::offset_of!(Point, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pointd {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pointd"][::std::mem::size_of::<Pointd>() - 16usize];
    ["Alignment of Pointd"][::std::mem::align_of::<Pointd>() - 8usize];
    ["Offset of field: Pointd::x"][::std::mem::offset_of!(Pointd, x) - 0usize];
    ["Offset of field: Pointd::y"][::std::mem::offset_of!(Pointd, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pointf {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pointf"][::std::mem::size_of::<Pointf>() - 8usize];
    ["Alignment of Pointf"][::std::mem::align_of::<Pointf>() - 4usize];
    ["Offset of field: Pointf::x"][::std::mem::offset_of!(Pointf, x) - 0usize];
    ["Offset of field: Pointf::y"][::std::mem::offset_of!(Pointf, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_SerialBuffer {
    pub _buffer: *mut byte,
    pub count: uintsize,
    pub _size: uintsize,
    pub pos: uintsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_SerialBuffer"]
        [::std::mem::size_of::<class_members_SerialBuffer>() - 32usize];
    ["Alignment of class_members_SerialBuffer"]
        [::std::mem::align_of::<class_members_SerialBuffer>() - 8usize];
    ["Offset of field: class_members_SerialBuffer::_buffer"]
        [::std::mem::offset_of!(class_members_SerialBuffer, _buffer) - 0usize];
    ["Offset of field: class_members_SerialBuffer::count"]
        [::std::mem::offset_of!(class_members_SerialBuffer, count) - 8usize];
    ["Offset of field: class_members_SerialBuffer::_size"]
        [::std::mem::offset_of!(class_members_SerialBuffer, _size) - 16usize];
    ["Offset of field: class_members_SerialBuffer::pos"]
        [::std::mem::offset_of!(class_members_SerialBuffer, pos) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut SerialBuffer_free:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: SerialBuffer)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_SerialBuffer_buffer: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut SerialBuffer_set_buffer:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: SerialBuffer, value: *mut byte)>;
}
/*unsafe*/ extern "C" {
    pub static mut SerialBuffer_get_buffer:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: SerialBuffer) -> *mut byte>;
}
/*unsafe*/ extern "C" {
    pub static mut property_SerialBuffer_size: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut SerialBuffer_set_size:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: SerialBuffer, value: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut SerialBuffer_get_size:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: SerialBuffer) -> uint>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StaticString {
    pub string: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StaticString"][::std::mem::size_of::<StaticString>() - 1usize];
    ["Alignment of StaticString"][::std::mem::align_of::<StaticString>() - 1usize];
    ["Offset of field: StaticString::string"]
        [::std::mem::offset_of!(StaticString, string) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_ZString {
    pub _string: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub allocType: StringAllocType,
    pub size: ::std::os::raw::c_int,
    pub minSize: ::std::os::raw::c_int,
    pub maxSize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_ZString"][::std::mem::size_of::<class_members_ZString>() - 32usize];
    ["Alignment of class_members_ZString"]
        [::std::mem::align_of::<class_members_ZString>() - 8usize];
    ["Offset of field: class_members_ZString::_string"]
        [::std::mem::offset_of!(class_members_ZString, _string) - 0usize];
    ["Offset of field: class_members_ZString::len"]
        [::std::mem::offset_of!(class_members_ZString, len) - 8usize];
    ["Offset of field: class_members_ZString::allocType"]
        [::std::mem::offset_of!(class_members_ZString, allocType) - 12usize];
    ["Offset of field: class_members_ZString::size"]
        [::std::mem::offset_of!(class_members_ZString, size) - 16usize];
    ["Offset of field: class_members_ZString::minSize"]
        [::std::mem::offset_of!(class_members_ZString, minSize) - 20usize];
    ["Offset of field: class_members_ZString::maxSize"]
        [::std::mem::offset_of!(class_members_ZString, maxSize) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut ZString_concat:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: ZString, s: ZString)>;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_concatf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: ZString, format: *const ::std::os::raw::c_char, ...),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_concatn: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: ZString, s: ZString, l: ::std::os::raw::c_int),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_concatx: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: ZString,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_copy:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: ZString, s: ZString)>;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_copyString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: ZString,
            value: *const ::std::os::raw::c_char,
            newLen: ::std::os::raw::c_int,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_ZString_string: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_set_string: ::std::option::Option<
        /*unsafe*/ extern "C" fn(z: ZString, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_get_string:
        ::std::option::Option</*unsafe*/ extern "C" fn(z: ZString) -> *const ::std::os::raw::c_char>;
}
/*unsafe*/ extern "C" {
    pub static mut property_ZString_char_ptr: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_from_char_ptr:
        ::std::option::Option</*unsafe*/ extern "C" fn(c: *const ::std::os::raw::c_char) -> ZString>;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_to_char_ptr:
        ::std::option::Option</*unsafe*/ extern "C" fn(z: ZString) -> *const ::std::os::raw::c_char>;
}
/*unsafe*/ extern "C" {
    pub static mut property_ZString_String: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_from_String:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: String) -> ZString>;
}
/*unsafe*/ extern "C" {
    pub static mut ZString_to_String:
        ::std::option::Option</*unsafe*/ extern "C" fn(z: ZString) -> constString>;
}
/*unsafe*/ extern "C" {
    pub static mut changeCh: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            ch1: ::std::os::raw::c_char,
            ch2: ::std::os::raw::c_char,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut changeChars: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            chars: *const ::std::os::raw::c_char,
            alt: ::std::os::raw::c_char,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut changeExtension: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            ext: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut checkConsistency: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
/*unsafe*/ extern "C" {
    pub static mut checkMemory: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
/*unsafe*/ extern "C" {
    pub static mut copyBytes: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_void,
            count: uint64,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut copyBytesBy2: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_void,
            count: uint,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut copyBytesBy4: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_void,
            count: uint,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut copyString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(string: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut escapeCString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            outString: String,
            bufferLen: ::std::os::raw::c_int,
            s: constString,
            options: EscapeCStringOptions,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fillBytes: ::std::option::Option<
        /*unsafe*/ extern "C" fn(area: *mut ::std::os::raw::c_void, value: byte, count: uint),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fillBytesBy2: ::std::option::Option<
        /*unsafe*/ extern "C" fn(area: *mut ::std::os::raw::c_void, value: uint16, count: uint),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fillBytesBy4: ::std::option::Option<
        /*unsafe*/ extern "C" fn(area: *mut ::std::os::raw::c_void, value: uint, count: uint),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut floatFromString:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: *const ::std::os::raw::c_char) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut getActiveDesigner: ::std::option::Option</*unsafe*/ extern "C" fn() -> DesignerBase>;
}
/*unsafe*/ extern "C" {
    pub static mut getExtension: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getHexValue: ::std::option::Option<
        /*unsafe*/ extern "C" fn(buffer: *mut *const ::std::os::raw::c_char) -> uint,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getLastDirectory: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getRuntimePlatform: ::std::option::Option</*unsafe*/ extern "C" fn() -> Platform>;
}
/*unsafe*/ extern "C" {
    pub static mut getString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *mut *const ::std::os::raw::c_char,
            string: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getValue: ::std::option::Option<
        /*unsafe*/ extern "C" fn(buffer: *mut *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut isPathInsideOf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            path: *const ::std::os::raw::c_char,
            of: *const ::std::os::raw::c_char,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut locateModule: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fileName: *const ::std::os::raw::c_char,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut makePathRelative: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            path: *const ::std::os::raw::c_char,
            to: *const ::std::os::raw::c_char,
            destination: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut moveBytes: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            source: *const ::std::os::raw::c_void,
            count: uint,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut pathCat: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            addedPath: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut pathCatSlash: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            addedPath: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printx: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printBigSize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            size: f64,
            prec: ::std::os::raw::c_int,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printBuf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            maxLen: ::std::os::raw::c_int,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printLn: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printLnBuf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            maxLen: ::std::os::raw::c_int,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printLnString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printSize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            size: uint64,
            prec: ::std::os::raw::c_int,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printStdArgsToBuffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            maxLen: ::std::os::raw::c_int,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            args: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut rSearchString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *const ::std::os::raw::c_char,
            subStr: *const ::std::os::raw::c_char,
            maxLen: ::std::os::raw::c_int,
            matchCase: bool_,
            matchWord: bool_,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut repeatCh: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            ch: ::std::os::raw::c_char,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut searchString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buffer: *const ::std::os::raw::c_char,
            start: ::std::os::raw::c_int,
            subStr: *const ::std::os::raw::c_char,
            matchCase: bool_,
            matchWord: bool_,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut setActiveDesigner:
        ::std::option::Option</*unsafe*/ extern "C" fn(designer: DesignerBase)>;
}
/*unsafe*/ extern "C" {
    pub static mut splitArchivePath: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            archiveName: *mut ::std::os::raw::c_char,
            archiveFile: *mut *const ::std::os::raw::c_char,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut splitDirectory: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            part: *mut ::std::os::raw::c_char,
            rest: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stringLikePattern: ::std::option::Option<
        /*unsafe*/ extern "C" fn(string: constString, pattern: constString) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stripChars: ::std::option::Option<
        /*unsafe*/ extern "C" fn(string: String, chars: constString) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stripExtension:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: *mut ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut stripLastDirectory: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stripQuotes: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut tokenize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            maxTokens: ::std::os::raw::c_int,
            tokens: *mut *mut ::std::os::raw::c_char,
            esc: BackSlashEscaping,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut tokenizeWith: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            maxTokens: ::std::os::raw::c_int,
            tokens: *mut *mut ::std::os::raw::c_char,
            tokenizers: *const ::std::os::raw::c_char,
            escapeBackSlashes: bool_,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut trimLSpaces: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut trimRSpaces: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            output: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut unescapeCString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            d: *mut ::std::os::raw::c_char,
            s: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut unescapeCStringLoose: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            d: *mut ::std::os::raw::c_char,
            s: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut eSystem_LockMem: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
/*unsafe*/ extern "C" {
    pub static mut eSystem_UnlockMem: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
/*unsafe*/ extern "C" {
    pub static mut ishexdigit:
        ::std::option::Option</*unsafe*/ extern "C" fn(x: ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut log2i: ::std::option::Option</*unsafe*/ extern "C" fn(number: uint) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut memswap:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *mut byte, b: *mut byte, size: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut pow2i: ::std::option::Option</*unsafe*/ extern "C" fn(number: uint) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut queryMemInfo:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: *mut ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut strchrmax: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            s: *const ::std::os::raw::c_char,
            c: ::std::os::raw::c_int,
            max: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
pub type Container = Instance;
pub type Array = Container;
pub type CustomAVLTree = Container;
pub type Map = CustomAVLTree;
pub type intptr = isize;
pub type intsize = isize;
pub type template_Map_String_FieldValue = Map;
pub type template_Array_FieldValue = Array;
pub type template_Map_String_JSONTypeOptions = Map;
/*unsafe*/ extern "C" {
    pub static mut class_onCompare_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onCompare: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onCopy_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onCopy: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onDisplay_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onDisplay: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onEdit_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onEdit: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onFree_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onFree: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onGetDataFromString_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onGetDataFromString: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onGetString_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onGetString: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onSaveEdit_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onSaveEdit: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onSerialize_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onSerialize: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut class_onUnserialize_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_class_onUnserialize: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut double_inf: ::std::option::Option</*unsafe*/ extern "C" fn() -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut double_nan: ::std::option::Option</*unsafe*/ extern "C" fn() -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut property_double_isNan: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut double_get_isNan: ::std::option::Option</*unsafe*/ extern "C" fn(d: f64) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_double_isInf: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut double_get_isInf: ::std::option::Option</*unsafe*/ extern "C" fn(d: f64) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_double_signBit: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut double_get_signBit:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: f64) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut float_inf: ::std::option::Option</*unsafe*/ extern "C" fn() -> f32>;
}
/*unsafe*/ extern "C" {
    pub static mut float_nan: ::std::option::Option</*unsafe*/ extern "C" fn() -> f32>;
}
/*unsafe*/ extern "C" {
    pub static mut property_float_isNan: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut float_get_isNan: ::std::option::Option</*unsafe*/ extern "C" fn(f: f32) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_float_isInf: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut float_get_isInf: ::std::option::Option</*unsafe*/ extern "C" fn(f: f32) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_float_signBit: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut float_get_signBit:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: f32) -> ::std::os::raw::c_int>;
}
pub type unichar = u32;
pub type tparam_Container_T = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_Array {
    pub array: *mut tparam_Container_T,
    pub count: uint,
    pub minAllocSize: uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_Array"][::std::mem::size_of::<class_members_Array>() - 16usize];
    ["Alignment of class_members_Array"][::std::mem::align_of::<class_members_Array>() - 8usize];
    ["Offset of field: class_members_Array::array"]
        [::std::mem::offset_of!(class_members_Array, array) - 0usize];
    ["Offset of field: class_members_Array::count"]
        [::std::mem::offset_of!(class_members_Array, count) - 8usize];
    ["Offset of field: class_members_Array::minAllocSize"]
        [::std::mem::offset_of!(class_members_Array, minAllocSize) - 12usize];
};
pub type FieldTypeEx = ::std::os::raw::c_int;
pub type FieldType = ::std::os::raw::c_int;
pub const FieldType_FieldType_integer: FieldType = 1;
pub const FieldType_FieldType_real: FieldType = 2;
pub const FieldType_FieldType_text: FieldType = 3;
pub const FieldType_FieldType_blob: FieldType = 4;
pub const FieldType_FieldType_nil: FieldType = 5;
pub const FieldType_FieldType_array: FieldType = 6;
pub const FieldType_FieldType_map: FieldType = 7;
pub type FieldValueFormat = ::std::os::raw::c_int;
pub const FieldValueFormat_FieldValueFormat_decimal: FieldValueFormat = 0;
pub const FieldValueFormat_FieldValueFormat_unset: FieldValueFormat = 0;
pub const FieldValueFormat_FieldValueFormat_hex: FieldValueFormat = 1;
pub const FieldValueFormat_FieldValueFormat_octal: FieldValueFormat = 2;
pub const FieldValueFormat_FieldValueFormat_binary: FieldValueFormat = 3;
pub const FieldValueFormat_FieldValueFormat_exponential: FieldValueFormat = 4;
pub const FieldValueFormat_FieldValueFormat_boolean: FieldValueFormat = 5;
pub const FieldValueFormat_FieldValueFormat_textObj: FieldValueFormat = 6;
pub const FieldValueFormat_FieldValueFormat_color: FieldValueFormat = 7;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FieldValue {
    pub type_: FieldTypeEx,
    pub __bindgen_anon_1: FieldValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FieldValue__bindgen_ty_1 {
    pub i: int64,
    pub r: f64,
    pub s: String,
    pub b: *mut ::std::os::raw::c_void,
    pub a: Array,
    pub m: Map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FieldValue__bindgen_ty_1"]
        [::std::mem::size_of::<FieldValue__bindgen_ty_1>() - 8usize];
    ["Alignment of FieldValue__bindgen_ty_1"]
        [::std::mem::align_of::<FieldValue__bindgen_ty_1>() - 8usize];
    ["Offset of field: FieldValue__bindgen_ty_1::i"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, i) - 0usize];
    ["Offset of field: FieldValue__bindgen_ty_1::r"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, r) - 0usize];
    ["Offset of field: FieldValue__bindgen_ty_1::s"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, s) - 0usize];
    ["Offset of field: FieldValue__bindgen_ty_1::b"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, b) - 0usize];
    ["Offset of field: FieldValue__bindgen_ty_1::a"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, a) - 0usize];
    ["Offset of field: FieldValue__bindgen_ty_1::m"]
        [::std::mem::offset_of!(FieldValue__bindgen_ty_1, m) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FieldValue"][::std::mem::size_of::<FieldValue>() - 16usize];
    ["Alignment of FieldValue"][::std::mem::align_of::<FieldValue>() - 8usize];
    ["Offset of field: FieldValue::type_"][::std::mem::offset_of!(FieldValue, type_) - 0usize];
};
/*unsafe*/ extern "C" {
    pub static mut FieldValue_compareInt: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            other: *mut FieldValue,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_compareReal: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            other: *mut FieldValue,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_compareText: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            other: *mut FieldValue,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_formatArray: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            tempString: *mut ::std::os::raw::c_char,
            fieldData: *mut ::std::os::raw::c_void,
            onType: *mut ObjectNotationType,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_formatFloat: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            stringOutput: *mut ::std::os::raw::c_char,
            fixDot: bool_,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_formatInteger: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            stringOutput: *mut ::std::os::raw::c_char,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_formatMap: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut FieldValue,
            tempString: *mut ::std::os::raw::c_char,
            fieldData: *mut ::std::os::raw::c_void,
            onType: *mut ObjectNotationType,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_getArrayOrMap: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            destClass: *mut Class,
            destination: *mut *mut ::std::os::raw::c_void,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FieldValue_stringify:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut FieldValue) -> String>;
}
pub type tparam_AVLNode_T = u64;
pub type tparam_CustomAVLTree_BT = u64;
pub type tparam_LinkElement_T = u64;
pub type tparam_LinkList_LT = u64;
pub type tparam_MapNode_V = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_HashMap {
    pub __eCPrivateData0: [byte; 8usize],
    pub noRemResize: bool_,
    pub __ecere_padding: [byte; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_HashMap"][::std::mem::size_of::<class_members_HashMap>() - 16usize];
    ["Alignment of class_members_HashMap"]
        [::std::mem::align_of::<class_members_HashMap>() - 4usize];
    ["Offset of field: class_members_HashMap::__eCPrivateData0"]
        [::std::mem::offset_of!(class_members_HashMap, __eCPrivateData0) - 0usize];
    ["Offset of field: class_members_HashMap::noRemResize"]
        [::std::mem::offset_of!(class_members_HashMap, noRemResize) - 8usize];
    ["Offset of field: class_members_HashMap::__ecere_padding"]
        [::std::mem::offset_of!(class_members_HashMap, __ecere_padding) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item {
    pub prev: *mut Item,
    pub next: *mut Item,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Item"][::std::mem::size_of::<Item>() - 16usize];
    ["Alignment of Item"][::std::mem::align_of::<Item>() - 8usize];
    ["Offset of field: Item::prev"][::std::mem::offset_of!(Item, prev) - 0usize];
    ["Offset of field: Item::next"][::std::mem::offset_of!(Item, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IteratorPointer {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IteratorPointer"][::std::mem::size_of::<IteratorPointer>() - 0usize];
    ["Alignment of IteratorPointer"][::std::mem::align_of::<IteratorPointer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Iterator {
    pub container: Container,
    pub pointer: *mut IteratorPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Iterator"][::std::mem::size_of::<Iterator>() - 16usize];
    ["Alignment of Iterator"][::std::mem::align_of::<Iterator>() - 8usize];
    ["Offset of field: Iterator::container"][::std::mem::offset_of!(Iterator, container) - 0usize];
    ["Offset of field: Iterator::pointer"][::std::mem::offset_of!(Iterator, pointer) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkElement {
    pub prev: tparam_LinkElement_T,
    pub next: tparam_LinkElement_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LinkElement"][::std::mem::size_of::<LinkElement>() - 16usize];
    ["Alignment of LinkElement"][::std::mem::align_of::<LinkElement>() - 8usize];
    ["Offset of field: LinkElement::prev"][::std::mem::offset_of!(LinkElement, prev) - 0usize];
    ["Offset of field: LinkElement::next"][::std::mem::offset_of!(LinkElement, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedItem {
    pub prev: *mut NamedItem,
    pub next: *mut NamedItem,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NamedItem"][::std::mem::size_of::<NamedItem>() - 24usize];
    ["Alignment of NamedItem"][::std::mem::align_of::<NamedItem>() - 8usize];
    ["Offset of field: NamedItem::prev"][::std::mem::offset_of!(NamedItem, prev) - 0usize];
    ["Offset of field: NamedItem::next"][::std::mem::offset_of!(NamedItem, next) - 8usize];
    ["Offset of field: NamedItem::name"][::std::mem::offset_of!(NamedItem, name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedLink {
    pub prev: *mut NamedLink,
    pub next: *mut NamedLink,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NamedLink"][::std::mem::size_of::<NamedLink>() - 32usize];
    ["Alignment of NamedLink"][::std::mem::align_of::<NamedLink>() - 8usize];
    ["Offset of field: NamedLink::prev"][::std::mem::offset_of!(NamedLink, prev) - 0usize];
    ["Offset of field: NamedLink::next"][::std::mem::offset_of!(NamedLink, next) - 8usize];
    ["Offset of field: NamedLink::name"][::std::mem::offset_of!(NamedLink, name) - 16usize];
    ["Offset of field: NamedLink::data"][::std::mem::offset_of!(NamedLink, data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedLink64 {
    pub prev: *mut NamedLink64,
    pub next: *mut NamedLink64,
    pub name: *mut ::std::os::raw::c_char,
    pub data: int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NamedLink64"][::std::mem::size_of::<NamedLink64>() - 32usize];
    ["Alignment of NamedLink64"][::std::mem::align_of::<NamedLink64>() - 8usize];
    ["Offset of field: NamedLink64::prev"][::std::mem::offset_of!(NamedLink64, prev) - 0usize];
    ["Offset of field: NamedLink64::next"][::std::mem::offset_of!(NamedLink64, next) - 8usize];
    ["Offset of field: NamedLink64::name"][::std::mem::offset_of!(NamedLink64, name) - 16usize];
    ["Offset of field: NamedLink64::data"][::std::mem::offset_of!(NamedLink64, data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OldLink {
    pub prev: *mut OldLink,
    pub next: *mut OldLink,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OldLink"][::std::mem::size_of::<OldLink>() - 24usize];
    ["Alignment of OldLink"][::std::mem::align_of::<OldLink>() - 8usize];
    ["Offset of field: OldLink::prev"][::std::mem::offset_of!(OldLink, prev) - 0usize];
    ["Offset of field: OldLink::next"][::std::mem::offset_of!(OldLink, next) - 8usize];
    ["Offset of field: OldLink::data"][::std::mem::offset_of!(OldLink, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringBTNode {
    pub key: String,
    pub parent: *mut StringBTNode,
    pub left: *mut StringBTNode,
    pub right: *mut StringBTNode,
    pub depth: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StringBTNode"][::std::mem::size_of::<StringBTNode>() - 40usize];
    ["Alignment of StringBTNode"][::std::mem::align_of::<StringBTNode>() - 8usize];
    ["Offset of field: StringBTNode::key"][::std::mem::offset_of!(StringBTNode, key) - 0usize];
    ["Offset of field: StringBTNode::parent"]
        [::std::mem::offset_of!(StringBTNode, parent) - 8usize];
    ["Offset of field: StringBTNode::left"][::std::mem::offset_of!(StringBTNode, left) - 16usize];
    ["Offset of field: StringBTNode::right"][::std::mem::offset_of!(StringBTNode, right) - 24usize];
    ["Offset of field: StringBTNode::depth"][::std::mem::offset_of!(StringBTNode, depth) - 32usize];
};
pub type HashMap = Container;
pub type LinkList = Container;
pub type TreePrintStyle = ::std::os::raw::c_int;
pub const TreePrintStyle_TreePrintStyle_inOrder: TreePrintStyle = 0;
pub const TreePrintStyle_TreePrintStyle_postOrder: TreePrintStyle = 1;
pub const TreePrintStyle_TreePrintStyle_preOrder: TreePrintStyle = 2;
pub const TreePrintStyle_TreePrintStyle_depthOrder: TreePrintStyle = 3;
pub type AVLTree = CustomAVLTree;
pub type HashTable = Container;
pub type List = LinkList;
pub type tparam_Container_D = u64;
pub type tparam_HashMapIterator_KT = u64;
pub type tparam_Iterator_T = u64;
pub type tparam_HashMapIterator_VT = u64;
pub type tparam_MapIterator_V = u64;
pub type tparam_Container_I = u64;
pub type tparam_MapIterator_KT = u64;
pub type tparam_MapNode_KT = u64;
pub type tparam_Iterator_IT = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVLNode {
    pub __eCPrivateData0: [byte; 32usize],
    pub key: tparam_AVLNode_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AVLNode"][::std::mem::size_of::<AVLNode>() - 40usize];
    ["Alignment of AVLNode"][::std::mem::align_of::<AVLNode>() - 8usize];
    ["Offset of field: AVLNode::__eCPrivateData0"]
        [::std::mem::offset_of!(AVLNode, __eCPrivateData0) - 0usize];
    ["Offset of field: AVLNode::key"][::std::mem::offset_of!(AVLNode, key) - 32usize];
};
/*unsafe*/ extern "C" {
    pub static mut AVLNode_find: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut AVLNode,
            Tclass: *mut Class,
            key: tparam_AVLNode_T,
        ) -> *mut AVLNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_prev: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_prev:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> *mut AVLNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_next: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_next:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> *mut AVLNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_minimum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_minimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> *mut AVLNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_maximum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_maximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> *mut AVLNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_count: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_count:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_AVLNode_depthProp: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut AVLNode_get_depthProp:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: *const AVLNode) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Array_size: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Array_set_size:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Array, value: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut Array_get_size: ::std::option::Option</*unsafe*/ extern "C" fn(a: Array) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Array_minAllocSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Array_set_minAllocSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Array, value: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut Array_get_minAllocSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Array) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_findPrefix: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BTNode,
            key: *const ::std::os::raw::c_char,
        ) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_findString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BTNode,
            key: *const ::std::os::raw::c_char,
        ) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_prev: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_prev:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> *mut BTNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_next: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_next:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> *mut BTNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_minimum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_minimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> *mut BTNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_maximum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_maximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> *mut BTNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_count: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_count:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BTNode_depthProp: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BTNode_get_depthProp:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BTNode) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_add: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut BinaryTree, node: *mut BTNode) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_check:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut BinaryTree) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_compareInt: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BinaryTree,
            a: uintptr,
            b: uintptr,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_compareString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BinaryTree,
            a: *const ::std::os::raw::c_char,
            b: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_delete:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut BinaryTree, node: *mut BTNode)>;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_find: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut BinaryTree, key: uintptr) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_findAll: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut BinaryTree, key: uintptr) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_findPrefix: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BinaryTree,
            key: *const ::std::os::raw::c_char,
        ) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_findString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BinaryTree,
            key: *const ::std::os::raw::c_char,
        ) -> *mut BTNode,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_free:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut BinaryTree)>;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_freeString:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: *mut ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_print: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut BinaryTree,
            output: *mut ::std::os::raw::c_char,
            tps: TreePrintStyle,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_remove:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut BinaryTree, node: *mut BTNode)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BinaryTree_first: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_get_first:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BinaryTree) -> *mut BTNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BinaryTree_last: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BinaryTree_get_last:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BinaryTree) -> *mut BTNode>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BuiltInContainer {
    pub _vTbl: *mut *mut ::std::os::raw::c_void,
    pub _class: *mut Class,
    pub _refCount: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub type_: *mut Class,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BuiltInContainer"][::std::mem::size_of::<BuiltInContainer>() - 48usize];
    ["Alignment of BuiltInContainer"][::std::mem::align_of::<BuiltInContainer>() - 8usize];
    ["Offset of field: BuiltInContainer::_vTbl"]
        [::std::mem::offset_of!(BuiltInContainer, _vTbl) - 0usize];
    ["Offset of field: BuiltInContainer::_class"]
        [::std::mem::offset_of!(BuiltInContainer, _class) - 8usize];
    ["Offset of field: BuiltInContainer::_refCount"]
        [::std::mem::offset_of!(BuiltInContainer, _refCount) - 16usize];
    ["Offset of field: BuiltInContainer::data"]
        [::std::mem::offset_of!(BuiltInContainer, data) - 24usize];
    ["Offset of field: BuiltInContainer::count"]
        [::std::mem::offset_of!(BuiltInContainer, count) - 32usize];
    ["Offset of field: BuiltInContainer::type_"]
        [::std::mem::offset_of!(BuiltInContainer, type_) - 40usize];
};
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_add_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_add: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_copy_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_copy: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_delete_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_delete: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_find_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_find: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_free_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_free: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_freeIterator_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_freeIterator: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getAtPosition_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getAtPosition: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getCount_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getCount: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getFirst_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getFirst: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getLast_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getLast: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getNext_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getNext: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_getPrev_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_getPrev: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_insert_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_insert: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_move_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_move: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_remove_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_remove: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_removeAll_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_removeAll: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_setData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_setData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_sort_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_BuiltInContainer_sort: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_BuiltInContainer_Container: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BuiltInContainer_to_Container:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: *const BuiltInContainer) -> Container>;
}
/*unsafe*/ extern "C" {
    pub static mut Container_add_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_add: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_copy_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_copy: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_delete_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_delete: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_find_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_find: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_free_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_free: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_freeIterator_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_freeIterator: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getAtPosition_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getAtPosition: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getCount_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getCount: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getFirst_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getFirst: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getLast_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getLast: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getNext_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getNext: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_getPrev_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_getPrev: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_insert_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_insert: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_move_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_move: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_remove_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_remove: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_removeAll_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_removeAll: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_setData_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_setData: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_sort_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Container_sort: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Container_takeOut: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: Container, d: tparam_Container_D) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_Container_copySrc: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Container_set_copySrc:
        ::std::option::Option</*unsafe*/ extern "C" fn(c: Container, value: Container)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Container_firstIterator: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Container_get_firstIterator:
        ::std::option::Option</*unsafe*/ extern "C" fn(c: Container, value: *mut Iterator)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Container_lastIterator: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Container_get_lastIterator:
        ::std::option::Option</*unsafe*/ extern "C" fn(c: Container, value: *mut Iterator)>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_CustomAVLTree {
    pub root: tparam_CustomAVLTree_BT,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_CustomAVLTree"]
        [::std::mem::size_of::<class_members_CustomAVLTree>() - 16usize];
    ["Alignment of class_members_CustomAVLTree"]
        [::std::mem::align_of::<class_members_CustomAVLTree>() - 8usize];
    ["Offset of field: class_members_CustomAVLTree::root"]
        [::std::mem::offset_of!(class_members_CustomAVLTree, root) - 0usize];
    ["Offset of field: class_members_CustomAVLTree::count"]
        [::std::mem::offset_of!(class_members_CustomAVLTree, count) - 8usize];
};
/*unsafe*/ extern "C" {
    pub static mut CustomAVLTree_check:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: CustomAVLTree) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut CustomAVLTree_freeKey:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: CustomAVLTree, item: *mut AVLNode)>;
}
/*unsafe*/ extern "C" {
    pub static mut HashMap_removeIterating:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: HashMap, it: *mut IteratorPointer)>;
}
/*unsafe*/ extern "C" {
    pub static mut HashMap_resize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: HashMap, movedEntry: *mut IteratorPointer),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_HashMap_count: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashMap_get_count:
        ::std::option::Option</*unsafe*/ extern "C" fn(h: HashMap) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_HashMap_initSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashMap_set_initSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(h: HashMap, value: ::std::os::raw::c_int)>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashMapIterator {
    pub container: Container,
    pub pointer: *mut IteratorPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HashMapIterator"][::std::mem::size_of::<HashMapIterator>() - 16usize];
    ["Alignment of HashMapIterator"][::std::mem::align_of::<HashMapIterator>() - 8usize];
    ["Offset of field: HashMapIterator::container"]
        [::std::mem::offset_of!(HashMapIterator, container) - 0usize];
    ["Offset of field: HashMapIterator::pointer"]
        [::std::mem::offset_of!(HashMapIterator, pointer) - 8usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_HashMapIterator_map: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashMapIterator_set_map:
        ::std::option::Option</*unsafe*/ extern "C" fn(h: *const HashMapIterator, value: HashMap)>;
}
/*unsafe*/ extern "C" {
    pub static mut HashMapIterator_get_map:
        ::std::option::Option</*unsafe*/ extern "C" fn(h: *const HashMapIterator) -> HashMap>;
}
/*unsafe*/ extern "C" {
    pub static mut property_HashMapIterator_key: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashMapIterator_get_key: ::std::option::Option<
        /*unsafe*/ extern "C" fn(h: *const HashMapIterator) -> tparam_HashMapIterator_KT,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_HashMapIterator_value: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashMapIterator_set_value: ::std::option::Option<
        /*unsafe*/ extern "C" fn(h: *const HashMapIterator, value: tparam_HashMapIterator_VT),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut HashMapIterator_get_value: ::std::option::Option<
        /*unsafe*/ extern "C" fn(h: *const HashMapIterator) -> tparam_HashMapIterator_VT,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_HashTable_initSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut HashTable_set_initSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(h: HashTable, value: ::std::os::raw::c_int)>;
}
/*unsafe*/ extern "C" {
    pub static mut Item_copy: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut Item, src: *mut Item, size: ::std::os::raw::c_int),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_find: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut Iterator, value: tparam_Iterator_T) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_free:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Iterator)>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_getData:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Iterator) -> tparam_Iterator_T>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_index: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Iterator,
            index: tparam_Iterator_IT,
            create: bool_,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_next:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Iterator) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_prev:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Iterator) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_remove:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Iterator)>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_setData: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut Iterator, value: tparam_Iterator_T) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_Iterator_data: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_set_data:
        ::std::option::Option</*unsafe*/ extern "C" fn(i: *const Iterator, value: tparam_Iterator_T)>;
}
/*unsafe*/ extern "C" {
    pub static mut Iterator_get_data:
        ::std::option::Option</*unsafe*/ extern "C" fn(i: *const Iterator) -> tparam_Iterator_T>;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Link {
    pub __bindgen_anon_1: Link__bindgen_ty_1,
    pub data: uint64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Link__bindgen_ty_1 {
    pub link: LinkElement,
    pub __bindgen_anon_1: Link__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Link__bindgen_ty_1__bindgen_ty_1 {
    pub prev: *mut ListItem,
    pub next: *mut ListItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Link__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<Link__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of Link__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<Link__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: Link__bindgen_ty_1__bindgen_ty_1::prev"]
        [::std::mem::offset_of!(Link__bindgen_ty_1__bindgen_ty_1, prev) - 0usize];
    ["Offset of field: Link__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(Link__bindgen_ty_1__bindgen_ty_1, next) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Link__bindgen_ty_1"][::std::mem::size_of::<Link__bindgen_ty_1>() - 16usize];
    ["Alignment of Link__bindgen_ty_1"][::std::mem::align_of::<Link__bindgen_ty_1>() - 8usize];
    ["Offset of field: Link__bindgen_ty_1::link"]
        [::std::mem::offset_of!(Link__bindgen_ty_1, link) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Link"][::std::mem::size_of::<Link>() - 24usize];
    ["Alignment of Link"][::std::mem::align_of::<Link>() - 8usize];
    ["Offset of field: Link::data"][::std::mem::offset_of!(Link, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_LinkList {
    pub first: tparam_LinkList_LT,
    pub last: tparam_LinkList_LT,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_LinkList"][::std::mem::size_of::<class_members_LinkList>() - 24usize];
    ["Alignment of class_members_LinkList"]
        [::std::mem::align_of::<class_members_LinkList>() - 8usize];
    ["Offset of field: class_members_LinkList::first"]
        [::std::mem::offset_of!(class_members_LinkList, first) - 0usize];
    ["Offset of field: class_members_LinkList::last"]
        [::std::mem::offset_of!(class_members_LinkList, last) - 8usize];
    ["Offset of field: class_members_LinkList::count"]
        [::std::mem::offset_of!(class_members_LinkList, count) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut LinkList__Sort: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: LinkList, ascending: bool_, lists: *mut LinkList),
    >;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ListItem {
    pub __bindgen_anon_1: ListItem__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ListItem__bindgen_ty_1 {
    pub link: LinkElement,
    pub __bindgen_anon_1: ListItem__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ListItem__bindgen_ty_1__bindgen_ty_1 {
    pub prev: *mut ListItem,
    pub next: *mut ListItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListItem__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ListItem__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ListItem__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ListItem__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ListItem__bindgen_ty_1__bindgen_ty_1::prev"]
        [::std::mem::offset_of!(ListItem__bindgen_ty_1__bindgen_ty_1, prev) - 0usize];
    ["Offset of field: ListItem__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(ListItem__bindgen_ty_1__bindgen_ty_1, next) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListItem__bindgen_ty_1"][::std::mem::size_of::<ListItem__bindgen_ty_1>() - 16usize];
    ["Alignment of ListItem__bindgen_ty_1"]
        [::std::mem::align_of::<ListItem__bindgen_ty_1>() - 8usize];
    ["Offset of field: ListItem__bindgen_ty_1::link"]
        [::std::mem::offset_of!(ListItem__bindgen_ty_1, link) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListItem"][::std::mem::size_of::<ListItem>() - 16usize];
    ["Alignment of ListItem"][::std::mem::align_of::<ListItem>() - 8usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_Map_mapSrc: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Map_set_mapSrc: ::std::option::Option</*unsafe*/ extern "C" fn(m: Map, value: Map)>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapIterator {
    pub container: Container,
    pub pointer: *mut IteratorPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapIterator"][::std::mem::size_of::<MapIterator>() - 16usize];
    ["Alignment of MapIterator"][::std::mem::align_of::<MapIterator>() - 8usize];
    ["Offset of field: MapIterator::container"]
        [::std::mem::offset_of!(MapIterator, container) - 0usize];
    ["Offset of field: MapIterator::pointer"]
        [::std::mem::offset_of!(MapIterator, pointer) - 8usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_MapIterator_map: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapIterator_set_map:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapIterator, value: Map)>;
}
/*unsafe*/ extern "C" {
    pub static mut MapIterator_get_map:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapIterator) -> Map>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapIterator_key: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapIterator_get_key:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapIterator) -> tparam_MapIterator_KT>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapIterator_value: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapIterator_set_value: ::std::option::Option<
        /*unsafe*/ extern "C" fn(m: *const MapIterator, value: tparam_MapIterator_V),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut MapIterator_get_value:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapIterator) -> tparam_MapIterator_V>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapNode {
    pub __eCPrivateData0: [byte; 32usize],
    pub key: tparam_AVLNode_T,
    pub value: tparam_MapNode_V,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MapNode"][::std::mem::size_of::<MapNode>() - 48usize];
    ["Alignment of MapNode"][::std::mem::align_of::<MapNode>() - 8usize];
    ["Offset of field: MapNode::__eCPrivateData0"]
        [::std::mem::offset_of!(MapNode, __eCPrivateData0) - 0usize];
    ["Offset of field: MapNode::key"][::std::mem::offset_of!(MapNode, key) - 32usize];
    ["Offset of field: MapNode::value"][::std::mem::offset_of!(MapNode, value) - 40usize];
};
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_key: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_set_key:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode, value: tparam_MapNode_KT)>;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_key:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> tparam_MapNode_KT>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_value: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_set_value:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode, value: tparam_MapNode_V)>;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_value:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> tparam_MapNode_V>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_prev: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_prev:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> *mut MapNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_next: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_next:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> *mut MapNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_minimum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_minimum:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> *mut MapNode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_MapNode_maximum: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut MapNode_get_maximum:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const MapNode) -> *mut MapNode>;
}
/*unsafe*/ extern "C" {
    pub static mut OldLink_free: ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut OldLink)>;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_add: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut OldList, item: *mut ::std::os::raw::c_void),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_addName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut OldList, item: *mut ::std::os::raw::c_void) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_clear: ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut OldList)>;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_copy: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            src: *mut OldList,
            size: ::std::os::raw::c_int,
            copy: ::std::option::Option<
                /*unsafe*/ extern "C" fn(
                    dest: *mut ::std::os::raw::c_void,
                    src: *mut ::std::os::raw::c_void,
                ),
            >,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_delete: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut OldList, item: *mut ::std::os::raw::c_void),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_findLink: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            data: *mut ::std::os::raw::c_void,
        ) -> *mut OldLink,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_findName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            name: *const ::std::os::raw::c_char,
            warn: bool_,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_findNamedLink: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            name: *const ::std::os::raw::c_char,
            warn: bool_,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_free: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            freeFn: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_insert: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            prevItem: *mut ::std::os::raw::c_void,
            item: *mut ::std::os::raw::c_void,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_move: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            item: *mut ::std::os::raw::c_void,
            prevItem: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_placeName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            name: *const ::std::os::raw::c_char,
            place: *mut *mut ::std::os::raw::c_void,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_remove: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: *mut OldList, item: *mut ::std::os::raw::c_void),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_removeAll: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            freeFn: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_sort: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            compare: ::std::option::Option<
                /*unsafe*/ extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut ::std::os::raw::c_void,
                    arg3: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            data: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut OldList_swap: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut OldList,
            item1: *mut ::std::os::raw::c_void,
            item2: *mut ::std::os::raw::c_void,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringBinaryTree {
    pub root: *mut BTNode,
    pub count: ::std::os::raw::c_int,
    pub CompareKey: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            tree: *mut BinaryTree,
            a: uintptr,
            b: uintptr,
        ) -> ::std::os::raw::c_int,
    >,
    pub FreeKey: ::std::option::Option</*unsafe*/ extern "C" fn(key: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StringBinaryTree"][::std::mem::size_of::<StringBinaryTree>() - 32usize];
    ["Alignment of StringBinaryTree"][::std::mem::align_of::<StringBinaryTree>() - 8usize];
    ["Offset of field: StringBinaryTree::root"]
        [::std::mem::offset_of!(StringBinaryTree, root) - 0usize];
    ["Offset of field: StringBinaryTree::count"]
        [::std::mem::offset_of!(StringBinaryTree, count) - 8usize];
    ["Offset of field: StringBinaryTree::CompareKey"]
        [::std::mem::offset_of!(StringBinaryTree, CompareKey) - 16usize];
    ["Offset of field: StringBinaryTree::FreeKey"]
        [::std::mem::offset_of!(StringBinaryTree, FreeKey) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut qsortr: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            base: *mut ::std::os::raw::c_void,
            nel: uintsize,
            width: uintsize,
            compare: ::std::option::Option<
                /*unsafe*/ extern "C" fn(
                    arg: *mut ::std::os::raw::c_void,
                    a: *const ::std::os::raw::c_void,
                    b: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            arg: *mut ::std::os::raw::c_void,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut qsortrx: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            base: *mut ::std::os::raw::c_void,
            nel: uintsize,
            width: uintsize,
            compare: ::std::option::Option<
                /*unsafe*/ extern "C" fn(
                    arg: *mut ::std::os::raw::c_void,
                    a: *const ::std::os::raw::c_void,
                    b: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            optCompareArgLast: ::std::option::Option<
                /*unsafe*/ extern "C" fn(
                    a: *const ::std::os::raw::c_void,
                    b: *const ::std::os::raw::c_void,
                    arg: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            arg: *mut ::std::os::raw::c_void,
            deref: bool_,
            ascending: bool_,
        ),
    >;
}
pub type DayOfTheWeek = ::std::os::raw::c_int;
pub const DayOfTheWeek_DayOfTheWeek_sunday: DayOfTheWeek = 0;
pub const DayOfTheWeek_DayOfTheWeek_monday: DayOfTheWeek = 1;
pub const DayOfTheWeek_DayOfTheWeek_tuesday: DayOfTheWeek = 2;
pub const DayOfTheWeek_DayOfTheWeek_wednesday: DayOfTheWeek = 3;
pub const DayOfTheWeek_DayOfTheWeek_thursday: DayOfTheWeek = 4;
pub const DayOfTheWeek_DayOfTheWeek_friday: DayOfTheWeek = 5;
pub const DayOfTheWeek_DayOfTheWeek_saturday: DayOfTheWeek = 6;
pub type Month = ::std::os::raw::c_int;
pub const Month_Month_january: Month = 0;
pub const Month_Month_february: Month = 1;
pub const Month_Month_march: Month = 2;
pub const Month_Month_april: Month = 3;
pub const Month_Month_may: Month = 4;
pub const Month_Month_june: Month = 5;
pub const Month_Month_july: Month = 6;
pub const Month_Month_august: Month = 7;
pub const Month_Month_september: Month = 8;
pub const Month_Month_october: Month = 9;
pub const Month_Month_november: Month = 10;
pub const Month_Month_december: Month = 11;
pub type Time = f64;
pub type SecSince1970 = int64;
pub type TimeStamp32 = uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Date {
    pub year: ::std::os::raw::c_int,
    pub month: Month,
    pub day: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Date"][::std::mem::size_of::<Date>() - 12usize];
    ["Alignment of Date"][::std::mem::align_of::<Date>() - 4usize];
    ["Offset of field: Date::year"][::std::mem::offset_of!(Date, year) - 0usize];
    ["Offset of field: Date::month"][::std::mem::offset_of!(Date, month) - 4usize];
    ["Offset of field: Date::day"][::std::mem::offset_of!(Date, day) - 8usize];
};
/*unsafe*/ extern "C" {
    pub static mut Date_onGetStringEn: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: *mut Date,
            stringOutput: *mut ::std::os::raw::c_char,
            fieldData: *mut ::std::os::raw::c_void,
            onType: *mut ObjectNotationType,
        ) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_Date_dayOfTheWeek: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Date_get_dayOfTheWeek:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const Date) -> DayOfTheWeek>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DateTime {
    pub year: ::std::os::raw::c_int,
    pub month: Month,
    pub day: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub dayOfTheWeek: DayOfTheWeek,
    pub dayInTheYear: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DateTime"][::std::mem::size_of::<DateTime>() - 32usize];
    ["Alignment of DateTime"][::std::mem::align_of::<DateTime>() - 4usize];
    ["Offset of field: DateTime::year"][::std::mem::offset_of!(DateTime, year) - 0usize];
    ["Offset of field: DateTime::month"][::std::mem::offset_of!(DateTime, month) - 4usize];
    ["Offset of field: DateTime::day"][::std::mem::offset_of!(DateTime, day) - 8usize];
    ["Offset of field: DateTime::hour"][::std::mem::offset_of!(DateTime, hour) - 12usize];
    ["Offset of field: DateTime::minute"][::std::mem::offset_of!(DateTime, minute) - 16usize];
    ["Offset of field: DateTime::second"][::std::mem::offset_of!(DateTime, second) - 20usize];
    ["Offset of field: DateTime::dayOfTheWeek"]
        [::std::mem::offset_of!(DateTime, dayOfTheWeek) - 24usize];
    ["Offset of field: DateTime::dayInTheYear"]
        [::std::mem::offset_of!(DateTime, dayInTheYear) - 28usize];
};
/*unsafe*/ extern "C" {
    pub static mut DateTime_fixDayOfYear:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut DateTime) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_getLocalTime:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut DateTime) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DateTime_global: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_set_global:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *const DateTime)>;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_get_global:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *mut DateTime)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DateTime_local: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_set_local:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *const DateTime)>;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_get_local:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *mut DateTime)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DateTime_daysSince1970: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_get_daysSince1970:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime) -> int64>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DateTime_SecSince1970: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_from_SecSince1970:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: SecSince1970)>;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_to_SecSince1970:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime) -> SecSince1970>;
}
/*unsafe*/ extern "C" {
    pub static mut property_DateTime_Date: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_from_Date:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *const Date)>;
}
/*unsafe*/ extern "C" {
    pub static mut DateTime_to_Date:
        ::std::option::Option</*unsafe*/ extern "C" fn(d: *const DateTime, value: *mut Date)>;
}
/*unsafe*/ extern "C" {
    pub static mut Month_getNumDays: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: Month, year: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_SecSince1970_global: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut SecSince1970_get_global:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: int64) -> SecSince1970>;
}
/*unsafe*/ extern "C" {
    pub static mut property_SecSince1970_local: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut SecSince1970_get_local:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: int64) -> SecSince1970>;
}
/*unsafe*/ extern "C" {
    pub static mut getRandom: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            lo: ::std::os::raw::c_int,
            hi: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getTime: ::std::option::Option</*unsafe*/ extern "C" fn() -> Time>;
}
/*unsafe*/ extern "C" {
    pub static mut randomSeed: ::std::option::Option</*unsafe*/ extern "C" fn(seed: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut __sleep: ::std::option::Option</*unsafe*/ extern "C" fn(seconds: Time)>;
}
pub type FileAttribs = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileStats {
    pub attribs: FileAttribs,
    pub size: uint64,
    pub accessed: SecSince1970,
    pub modified: SecSince1970,
    pub created: SecSince1970,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileStats"][::std::mem::size_of::<FileStats>() - 40usize];
    ["Alignment of FileStats"][::std::mem::align_of::<FileStats>() - 8usize];
    ["Offset of field: FileStats::attribs"][::std::mem::offset_of!(FileStats, attribs) - 0usize];
    ["Offset of field: FileStats::size"][::std::mem::offset_of!(FileStats, size) - 8usize];
    ["Offset of field: FileStats::accessed"][::std::mem::offset_of!(FileStats, accessed) - 16usize];
    ["Offset of field: FileStats::modified"][::std::mem::offset_of!(FileStats, modified) - 24usize];
    ["Offset of field: FileStats::created"][::std::mem::offset_of!(FileStats, created) - 32usize];
};
pub type Archive = Instance;
pub type ArchiveAddMode = ::std::os::raw::c_int;
pub const ArchiveAddMode_ArchiveAddMode_replace: ArchiveAddMode = 0;
pub const ArchiveAddMode_ArchiveAddMode_refresh: ArchiveAddMode = 1;
pub const ArchiveAddMode_ArchiveAddMode_update: ArchiveAddMode = 2;
pub const ArchiveAddMode_ArchiveAddMode_readOnlyDir: ArchiveAddMode = 3;
pub type ArchiveDir = Instance;
pub type ArchiveOpenFlags = uint32;
pub type File = IOChannel;
pub type BufferedFile = File;
pub type DualPipe = File;
pub type ErrorCode = uint32;
pub type ErrorLevel = ::std::os::raw::c_int;
pub const ErrorLevel_ErrorLevel_veryFatal: ErrorLevel = 0;
pub const ErrorLevel_ErrorLevel_fatal: ErrorLevel = 1;
pub const ErrorLevel_ErrorLevel_major: ErrorLevel = 2;
pub const ErrorLevel_ErrorLevel_minor: ErrorLevel = 3;
pub type FileChange = uint32;
pub type FileLock = ::std::os::raw::c_int;
pub const FileLock_FileLock_unlocked: FileLock = 0;
pub const FileLock_FileLock_shared: FileLock = 1;
pub const FileLock_FileLock_exclusive: FileLock = 2;
pub type FileMonitor = Instance;
pub type FileOpenMode = ::std::os::raw::c_int;
pub const FileOpenMode_FileOpenMode_read: FileOpenMode = 1;
pub const FileOpenMode_FileOpenMode_write: FileOpenMode = 2;
pub const FileOpenMode_FileOpenMode_append: FileOpenMode = 3;
pub const FileOpenMode_FileOpenMode_readWrite: FileOpenMode = 4;
pub const FileOpenMode_FileOpenMode_writeRead: FileOpenMode = 5;
pub const FileOpenMode_FileOpenMode_appendRead: FileOpenMode = 6;
pub type FileSeekMode = ::std::os::raw::c_int;
pub const FileSeekMode_FileSeekMode_start: FileSeekMode = 0;
pub const FileSeekMode_FileSeekMode_current: FileSeekMode = 1;
pub const FileSeekMode_FileSeekMode_end: FileSeekMode = 2;
pub type FileSize = uint;
pub type FileSize64 = uint64;
pub type LoggingMode = ::std::os::raw::c_int;
pub const LoggingMode_LoggingMode_noLogging: LoggingMode = 0;
pub const LoggingMode_LoggingMode_stdOut: LoggingMode = 1;
pub const LoggingMode_LoggingMode_stdErr: LoggingMode = 2;
pub const LoggingMode_LoggingMode_debug: LoggingMode = 3;
pub const LoggingMode_LoggingMode_logFile: LoggingMode = 4;
pub const LoggingMode_LoggingMode_msgBox: LoggingMode = 5;
pub const LoggingMode_LoggingMode_buffer: LoggingMode = 6;
pub type MoveFileOptions = uint32;
pub type PipeOpenMode = uint32;
pub type TempFile = File;
pub type ConsoleFile = File;
pub type GuiErrorCode = ErrorCode;
pub const GuiErrorCode_GuiErrorCode_driverNotSupported: GuiErrorCode = 257;
pub const GuiErrorCode_GuiErrorCode_windowCreationFailed: GuiErrorCode = 258;
pub const GuiErrorCode_GuiErrorCode_graphicsLoadingFailed: GuiErrorCode = 259;
pub const GuiErrorCode_GuiErrorCode_modeSwitchFailed: GuiErrorCode = 260;
pub type SysErrorCode = ErrorCode;
pub const SysErrorCode_SysErrorCode_allocationFailed: SysErrorCode = 4097;
pub const SysErrorCode_SysErrorCode_nameInexistant: SysErrorCode = 4098;
pub const SysErrorCode_SysErrorCode_nameExists: SysErrorCode = 4099;
pub const SysErrorCode_SysErrorCode_missingLibrary: SysErrorCode = 4100;
pub const SysErrorCode_SysErrorCode_fileNotFound: SysErrorCode = 12293;
pub const SysErrorCode_SysErrorCode_writeFailed: SysErrorCode = 8198;
/*unsafe*/ extern "C" {
    pub static mut Archive_clear_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_clear: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_fileExists_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_fileExists: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_fileOpen_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_fileOpen: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_fileOpenAtPosition_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_fileOpenAtPosition: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_fileOpenCompressed_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_fileOpenCompressed: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_openDirectory_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_openDirectory: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_setBufferRead_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_setBufferRead: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_setBufferSize_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Archive_setBufferSize: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_Archive_totalSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_set_totalSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Archive, value: FileSize)>;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_get_totalSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Archive) -> FileSize>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Archive_bufferSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_set_bufferSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Archive, value: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Archive_bufferRead: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Archive_set_bufferRead:
        ::std::option::Option</*unsafe*/ extern "C" fn(a: Archive, value: uint)>;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_add: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: ArchiveDir,
            name: *const ::std::os::raw::c_char,
            path: *const ::std::os::raw::c_char,
            addMode: ArchiveAddMode,
            compression: ::std::os::raw::c_int,
            ratio: *mut ::std::os::raw::c_int,
            newPosition: *mut uint,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_addFromFile_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_addFromFile: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_addFromFileAtPosition_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_addFromFileAtPosition: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_delete_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_delete: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_fileExists_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_fileExists: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_fileOpen_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_fileOpen: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_move_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_move: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_openDirectory_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_openDirectory: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut ArchiveDir_rename_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_ArchiveDir_rename: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_BufferedFile_handle: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_set_handle:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile, value: File)>;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_get_handle:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile) -> File>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BufferedFile_bufferSize: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_set_bufferSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile, value: uintsize)>;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_get_bufferSize:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile) -> uintsize>;
}
/*unsafe*/ extern "C" {
    pub static mut property_BufferedFile_bufferRead: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_set_bufferRead:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile, value: uintsize)>;
}
/*unsafe*/ extern "C" {
    pub static mut BufferedFile_get_bufferRead:
        ::std::option::Option</*unsafe*/ extern "C" fn(b: BufferedFile) -> uintsize>;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_getExitCode:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DualPipe) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_getLinePeek: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: DualPipe,
            s: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
            charsRead: *mut ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_getProcessID:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DualPipe) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_peek:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DualPipe) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_terminate:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: DualPipe)>;
}
/*unsafe*/ extern "C" {
    pub static mut DualPipe_wait: ::std::option::Option</*unsafe*/ extern "C" fn(__this: DualPipe)>;
}
/*unsafe*/ extern "C" {
    pub static mut File_close_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_close: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_closeInput_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_closeInput: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_closeOutput_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_closeOutput: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_copyTo: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: File, outputFileName: *const ::std::os::raw::c_char) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_copyToFile:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: File, f: File) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut File_eof_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_eof: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_flush: ::std::option::Option</*unsafe*/ extern "C" fn(__this: File) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut File_getDouble: ::std::option::Option</*unsafe*/ extern "C" fn(__this: File) -> f64>;
}
/*unsafe*/ extern "C" {
    pub static mut File_getFloat: ::std::option::Option</*unsafe*/ extern "C" fn(__this: File) -> f32>;
}
/*unsafe*/ extern "C" {
    pub static mut File_getHexValue:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: File) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut File_getLine: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            s: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_getLineEx: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            s: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
            hasNewLineChar: *mut bool_,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_getSize_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_getSize: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_getString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            string: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_getValue:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: File) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut File_getc_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_getc: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_lock_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_lock: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_print: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_printLn: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            class_object: typed_object_class_ptr,
            object: *const ::std::os::raw::c_void,
            ...
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_printf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: File,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut File_putc_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_putc: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_puts_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_puts: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_read_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_read: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_seek_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_seek: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_tell_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_tell: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_truncate_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_truncate: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_unlock_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_unlock: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut File_write_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_File_write: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_File_input: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut File_set_input:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: File, value: *mut ::std::os::raw::c_void)>;
}
/*unsafe*/ extern "C" {
    pub static mut File_get_input:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: File) -> *mut ::std::os::raw::c_void>;
}
/*unsafe*/ extern "C" {
    pub static mut property_File_output: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut File_set_output:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: File, value: *mut ::std::os::raw::c_void)>;
}
/*unsafe*/ extern "C" {
    pub static mut File_get_output:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: File) -> *mut ::std::os::raw::c_void>;
}
/*unsafe*/ extern "C" {
    pub static mut property_File_buffered: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut File_set_buffered:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: File, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_File_eof: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut File_get_eof: ::std::option::Option</*unsafe*/ extern "C" fn(f: File) -> bool_>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileListing {
    pub directory: *const ::std::os::raw::c_char,
    pub extensions: *const ::std::os::raw::c_char,
    pub __ecere_padding: [byte; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileListing"][::std::mem::size_of::<FileListing>() - 24usize];
    ["Alignment of FileListing"][::std::mem::align_of::<FileListing>() - 8usize];
    ["Offset of field: FileListing::directory"]
        [::std::mem::offset_of!(FileListing, directory) - 0usize];
    ["Offset of field: FileListing::extensions"]
        [::std::mem::offset_of!(FileListing, extensions) - 8usize];
    ["Offset of field: FileListing::__ecere_padding"]
        [::std::mem::offset_of!(FileListing, __ecere_padding) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut FileListing_find:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut FileListing) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut FileListing_stop:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut FileListing)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileListing_name: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileListing_get_name: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: *const FileListing) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileListing_path: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileListing_get_path: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: *const FileListing) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileListing_stats: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileListing_get_stats:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: *const FileListing, value: *mut FileStats)>;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_onDirNotify_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_FileMonitor_onDirNotify: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_onFileNotify_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_FileMonitor_onFileNotify: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_startMonitoring:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: FileMonitor)>;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_stopMonitoring:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: FileMonitor)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileMonitor_userData: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_set_userData: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: FileMonitor, value: *mut ::std::os::raw::c_void),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileMonitor_fileChange: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_set_fileChange:
        ::std::option::Option</*unsafe*/ extern "C" fn(f: FileMonitor, value: FileChange)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileMonitor_fileName: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_set_fileName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: FileMonitor, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_get_fileName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: FileMonitor) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_FileMonitor_directoryName: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_set_directoryName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: FileMonitor, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut FileMonitor_get_directoryName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(f: FileMonitor) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_stealBuffer:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: TempFile) -> *mut byte>;
}
/*unsafe*/ extern "C" {
    pub static mut property_TempFile_openMode: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_set_openMode:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile, value: FileOpenMode)>;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_get_openMode:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile) -> FileOpenMode>;
}
/*unsafe*/ extern "C" {
    pub static mut property_TempFile_buffer: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_set_buffer:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile, value: *mut byte)>;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_get_buffer:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile) -> *mut byte>;
}
/*unsafe*/ extern "C" {
    pub static mut property_TempFile_size: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_set_size:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile, value: uintsize)>;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_get_size:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile) -> uintsize>;
}
/*unsafe*/ extern "C" {
    pub static mut property_TempFile_allocated: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_set_allocated:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile, value: uintsize)>;
}
/*unsafe*/ extern "C" {
    pub static mut TempFile_get_allocated:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: TempFile) -> uintsize>;
}
/*unsafe*/ extern "C" {
    pub static mut archiveOpen: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            flags: ArchiveOpenFlags,
        ) -> Archive,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut archiveQuerySize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char, size: *mut FileSize) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut changeWorkingDir:
        ::std::option::Option</*unsafe*/ extern "C" fn(buf: *const ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut copySystemPath: ::std::option::Option<
        /*unsafe*/ extern "C" fn(p: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut copyUnixPath: ::std::option::Option<
        /*unsafe*/ extern "C" fn(p: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut createTemporaryDir: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            tempFileName: *mut ::std::os::raw::c_char,
            _template: *const ::std::os::raw::c_char,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut createTemporaryFile: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            tempFileName: *mut ::std::os::raw::c_char,
            _template: *const ::std::os::raw::c_char,
        ) -> File,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut deleteFile: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut dualPipeOpen: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            mode: PipeOpenMode,
            commandLine: *const ::std::os::raw::c_char,
        ) -> DualPipe,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut dualPipeOpenEnv: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            mode: PipeOpenMode,
            env: *const ::std::os::raw::c_char,
            commandLine: *const ::std::os::raw::c_char,
        ) -> DualPipe,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut dualPipeOpenEnvf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            mode: PipeOpenMode,
            env: *const ::std::os::raw::c_char,
            command: *const ::std::os::raw::c_char,
            ...
        ) -> DualPipe,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut dualPipeOpenf: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            mode: PipeOpenMode,
            command: *const ::std::os::raw::c_char,
            ...
        ) -> DualPipe,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut dumpErrors: ::std::option::Option</*unsafe*/ extern "C" fn(display: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut execute: ::std::option::Option<
        /*unsafe*/ extern "C" fn(command: *const ::std::os::raw::c_char, ...) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut executeEnv: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            env: *const ::std::os::raw::c_char,
            command: *const ::std::os::raw::c_char,
            ...
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut executeWait: ::std::option::Option<
        /*unsafe*/ extern "C" fn(command: *const ::std::os::raw::c_char, ...) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileExists: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char) -> FileAttribs,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileFixCase:
        ::std::option::Option</*unsafe*/ extern "C" fn(file: *mut ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut fileGetSize: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char, size: *mut FileSize) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileGetStats: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            stats: *mut FileStats,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileOpen: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char, mode: FileOpenMode) -> File,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileOpenBuffered: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            mode: FileOpenMode,
        ) -> BufferedFile,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileSetAttribs: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            attribs: FileAttribs,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileSetTime: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            fileName: *const ::std::os::raw::c_char,
            created: SecSince1970,
            accessed: SecSince1970,
            modified: SecSince1970,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut fileTruncate: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char, size: uint64) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getEnvironment: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            envName: *const ::std::os::raw::c_char,
            envValue: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getFreeSpace: ::std::option::Option<
        /*unsafe*/ extern "C" fn(path: *const ::std::os::raw::c_char, size: *mut FileSize64),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getLastErrorCode: ::std::option::Option</*unsafe*/ extern "C" fn() -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut getSlashPathBuffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            d: *mut ::std::os::raw::c_char,
            p: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getSystemPathBuffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            d: *mut ::std::os::raw::c_char,
            p: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getWorkingDir: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut __e_log:
        ::std::option::Option</*unsafe*/ extern "C" fn(text: *const ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut logErrorCode: ::std::option::Option<
        /*unsafe*/ extern "C" fn(errorCode: ErrorCode, details: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut __e_logf:
        ::std::option::Option</*unsafe*/ extern "C" fn(format: *const ::std::os::raw::c_char, ...)>;
}
/*unsafe*/ extern "C" {
    pub static mut makeDir:
        ::std::option::Option</*unsafe*/ extern "C" fn(path: *const ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut makeSlashPath:
        ::std::option::Option</*unsafe*/ extern "C" fn(p: *mut ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut makeSystemPath:
        ::std::option::Option</*unsafe*/ extern "C" fn(p: *mut ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut moveFile: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *const ::std::os::raw::c_char,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut moveFileEx: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *const ::std::os::raw::c_char,
            options: MoveFileOptions,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut removeDir:
        ::std::option::Option</*unsafe*/ extern "C" fn(path: *const ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut renameFile: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            oldName: *const ::std::os::raw::c_char,
            newName: *const ::std::os::raw::c_char,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut resetError: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
/*unsafe*/ extern "C" {
    pub static mut setEnvironment: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            envName: *const ::std::os::raw::c_char,
            envValue: *const ::std::os::raw::c_char,
        ),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut setErrorLevel: ::std::option::Option</*unsafe*/ extern "C" fn(level: ErrorLevel)>;
}
/*unsafe*/ extern "C" {
    pub static mut setLoggingMode: ::std::option::Option<
        /*unsafe*/ extern "C" fn(mode: LoggingMode, where_: *mut ::std::os::raw::c_void),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut shellOpen: ::std::option::Option<
        /*unsafe*/ extern "C" fn(fileName: *const ::std::os::raw::c_char, ...) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut unsetEnvironment:
        ::std::option::Option</*unsafe*/ extern "C" fn(envName: *const ::std::os::raw::c_char)>;
}
/*unsafe*/ extern "C" {
    pub static mut debugBreakpoint: ::std::option::Option</*unsafe*/ extern "C" fn()>;
}
pub type CharCategories = uint32;
pub type CharCategory = ::std::os::raw::c_int;
pub const CharCategory_CharCategory_none: CharCategory = 0;
pub const CharCategory_CharCategory_Mn: CharCategory = 1;
pub const CharCategory_CharCategory_markNonSpacing: CharCategory = 1;
pub const CharCategory_CharCategory_Mc: CharCategory = 2;
pub const CharCategory_CharCategory_markSpacing: CharCategory = 2;
pub const CharCategory_CharCategory_Me: CharCategory = 3;
pub const CharCategory_CharCategory_markEnclosing: CharCategory = 3;
pub const CharCategory_CharCategory_Nd: CharCategory = 4;
pub const CharCategory_CharCategory_numberDecimalDigit: CharCategory = 4;
pub const CharCategory_CharCategory_Nl: CharCategory = 5;
pub const CharCategory_CharCategory_numberLetter: CharCategory = 5;
pub const CharCategory_CharCategory_No: CharCategory = 6;
pub const CharCategory_CharCategory_numberOther: CharCategory = 6;
pub const CharCategory_CharCategory_Zs: CharCategory = 7;
pub const CharCategory_CharCategory_separatorSpace: CharCategory = 7;
pub const CharCategory_CharCategory_Zl: CharCategory = 8;
pub const CharCategory_CharCategory_separatorLine: CharCategory = 8;
pub const CharCategory_CharCategory_Zp: CharCategory = 9;
pub const CharCategory_CharCategory_separatorParagraph: CharCategory = 9;
pub const CharCategory_CharCategory_Cc: CharCategory = 10;
pub const CharCategory_CharCategory_otherControl: CharCategory = 10;
pub const CharCategory_CharCategory_Cf: CharCategory = 11;
pub const CharCategory_CharCategory_otherFormat: CharCategory = 11;
pub const CharCategory_CharCategory_Cs: CharCategory = 12;
pub const CharCategory_CharCategory_otherSurrogate: CharCategory = 12;
pub const CharCategory_CharCategory_Co: CharCategory = 13;
pub const CharCategory_CharCategory_otherPrivateUse: CharCategory = 13;
pub const CharCategory_CharCategory_Cn: CharCategory = 14;
pub const CharCategory_CharCategory_otherNotAssigned: CharCategory = 14;
pub const CharCategory_CharCategory_Lu: CharCategory = 15;
pub const CharCategory_CharCategory_letterUpperCase: CharCategory = 15;
pub const CharCategory_CharCategory_Ll: CharCategory = 16;
pub const CharCategory_CharCategory_letterLowerCase: CharCategory = 16;
pub const CharCategory_CharCategory_Lt: CharCategory = 17;
pub const CharCategory_CharCategory_letterTitleCase: CharCategory = 17;
pub const CharCategory_CharCategory_Lm: CharCategory = 18;
pub const CharCategory_CharCategory_letterModifier: CharCategory = 18;
pub const CharCategory_CharCategory_Lo: CharCategory = 19;
pub const CharCategory_CharCategory_letterOther: CharCategory = 19;
pub const CharCategory_CharCategory_Pc: CharCategory = 20;
pub const CharCategory_CharCategory_punctuationConnector: CharCategory = 20;
pub const CharCategory_CharCategory_Pd: CharCategory = 21;
pub const CharCategory_CharCategory_punctuationDash: CharCategory = 21;
pub const CharCategory_CharCategory_Ps: CharCategory = 22;
pub const CharCategory_CharCategory_punctuationOpen: CharCategory = 22;
pub const CharCategory_CharCategory_Pe: CharCategory = 23;
pub const CharCategory_CharCategory_punctuationClose: CharCategory = 23;
pub const CharCategory_CharCategory_Pi: CharCategory = 24;
pub const CharCategory_CharCategory_punctuationInitial: CharCategory = 24;
pub const CharCategory_CharCategory_Pf: CharCategory = 25;
pub const CharCategory_CharCategory_punctuationFinal: CharCategory = 25;
pub const CharCategory_CharCategory_Po: CharCategory = 26;
pub const CharCategory_CharCategory_punctuationOther: CharCategory = 26;
pub const CharCategory_CharCategory_Sm: CharCategory = 27;
pub const CharCategory_CharCategory_symbolMath: CharCategory = 27;
pub const CharCategory_CharCategory_Sc: CharCategory = 28;
pub const CharCategory_CharCategory_symbolCurrency: CharCategory = 28;
pub const CharCategory_CharCategory_Sk: CharCategory = 29;
pub const CharCategory_CharCategory_symbolModifier: CharCategory = 29;
pub const CharCategory_CharCategory_So: CharCategory = 30;
pub const CharCategory_CharCategory_symbolOther: CharCategory = 30;
pub type UnicodeDecomposition = uint32;
pub type PredefinedCharCategories = CharCategories;
pub const PredefinedCharCategories_PredefinedCharCategories_none: PredefinedCharCategories = 1;
pub const PredefinedCharCategories_PredefinedCharCategories_marks: PredefinedCharCategories = 14;
pub const PredefinedCharCategories_PredefinedCharCategories_numbers: PredefinedCharCategories = 112;
pub const PredefinedCharCategories_PredefinedCharCategories_separators: PredefinedCharCategories =
    896;
pub const PredefinedCharCategories_PredefinedCharCategories_others: PredefinedCharCategories =
    31744;
pub const PredefinedCharCategories_PredefinedCharCategories_letters: PredefinedCharCategories =
    1015808;
pub const PredefinedCharCategories_PredefinedCharCategories_punctuation: PredefinedCharCategories =
    133169152;
pub const PredefinedCharCategories_PredefinedCharCategories_symbols: PredefinedCharCategories =
    2013265920;
pub const PredefinedCharCategories_PredefinedCharCategories_connector: PredefinedCharCategories =
    1048576;
/*unsafe*/ extern "C" {
    pub static mut charMatchCategories: ::std::option::Option<
        /*unsafe*/ extern "C" fn(ch: unichar, categories: CharCategories) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getAlNum: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            input: *mut *const ::std::os::raw::c_char,
            string: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut getCharCategory:
        ::std::option::Option</*unsafe*/ extern "C" fn(ch: unichar) -> CharCategory>;
}
/*unsafe*/ extern "C" {
    pub static mut getCombiningClass:
        ::std::option::Option</*unsafe*/ extern "C" fn(ch: unichar) -> uint>;
}
/*unsafe*/ extern "C" {
    pub static mut iSO8859_1toUTF8: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF16BEtoUTF8Buffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const uint16,
            dest: *mut byte,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF16toUTF8: ::std::option::Option<
        /*unsafe*/ extern "C" fn(source: *const uint16) -> *mut ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF16toUTF8Buffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const uint16,
            dest: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF32toUTF8Len: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const unichar,
            count: ::std::os::raw::c_int,
            dest: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8GetChar: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: *const ::std::os::raw::c_char,
            numBytes: *mut ::std::os::raw::c_int,
        ) -> unichar,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8Validate:
        ::std::option::Option</*unsafe*/ extern "C" fn(source: *const ::std::os::raw::c_char) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8toISO8859_1: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *mut ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8toUTF16: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            wordCount: *mut ::std::os::raw::c_int,
        ) -> *mut uint16,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8toUTF16Buffer: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *mut uint16,
            max: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8toUTF16BufferLen: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            dest: *mut uint16,
            max: ::std::os::raw::c_int,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut uTF8toUTF16Len: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            source: *const ::std::os::raw::c_char,
            byteCount: ::std::os::raw::c_int,
            wordCount: *mut ::std::os::raw::c_int,
        ) -> *mut uint16,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut accenti:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut casei:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut encodeArrayToString:
        ::std::option::Option</*unsafe*/ extern "C" fn(array: Array) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeNFC:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeNFD:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeNFKC:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeNFKD:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> String>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeNFKDArray:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString) -> Array>;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeUnicode: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: constString,
            type_: UnicodeDecomposition,
            compose: bool_,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut normalizeUnicodeArray: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            string: constString,
            type_: UnicodeDecomposition,
            compose: bool_,
        ) -> Array,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stripUnicodeCategory:
        ::std::option::Option</*unsafe*/ extern "C" fn(string: constString, c: CharCategory) -> String>;
}
pub type GlobalSettings = Instance;
pub type GlobalAppSettings = GlobalSettings;
pub type GlobalSettingType = ::std::os::raw::c_int;
pub const GlobalSettingType_GlobalSettingType_integer: GlobalSettingType = 0;
pub const GlobalSettingType_GlobalSettingType_singleString: GlobalSettingType = 1;
pub const GlobalSettingType_GlobalSettingType_stringList: GlobalSettingType = 2;
pub type GlobalSettingsData = Instance;
pub type GlobalSettingsDriver = Instance;
pub type JSONFirstLetterCapitalization = ::std::os::raw::c_int;
pub const JSONFirstLetterCapitalization_JSONFirstLetterCapitalization_keepCase:
    JSONFirstLetterCapitalization = 0;
pub const JSONFirstLetterCapitalization_JSONFirstLetterCapitalization_upperCase:
    JSONFirstLetterCapitalization = 1;
pub const JSONFirstLetterCapitalization_JSONFirstLetterCapitalization_lowerCase:
    JSONFirstLetterCapitalization = 2;
pub type JSONParser = Instance;
pub type JSONResult = ::std::os::raw::c_int;
pub const JSONResult_JSONResult_syntaxError: JSONResult = 0;
pub const JSONResult_JSONResult_success: JSONResult = 1;
pub const JSONResult_JSONResult_typeMismatch: JSONResult = 2;
pub const JSONResult_JSONResult_noItem: JSONResult = 3;
pub type OptionsMap = template_Map_String_JSONTypeOptions;
pub type SettingsIOResult = ::std::os::raw::c_int;
pub const SettingsIOResult_SettingsIOResult_error: SettingsIOResult = 0;
pub const SettingsIOResult_SettingsIOResult_success: SettingsIOResult = 1;
pub const SettingsIOResult_SettingsIOResult_fileNotFound: SettingsIOResult = 2;
pub const SettingsIOResult_SettingsIOResult_fileNotCompatibleWithDriver: SettingsIOResult = 3;
pub type ECONGlobalSettings = GlobalSettingsDriver;
pub type ECONParser = JSONParser;
pub type JSONGlobalSettings = GlobalSettingsDriver;
pub type JSONTypeOptions = uint32;
pub type SetBool = uint;
pub const SetBool_SetBool_unset: SetBool = 0;
pub const SetBool_SetBool_false: SetBool = 1;
pub const SetBool_SetBool_true: SetBool = 2;
/*unsafe*/ extern "C" {
    pub static mut GlobalAppSettings_getGlobalValue: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: GlobalAppSettings,
            section: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            type_: GlobalSettingType,
            value: *mut ::std::os::raw::c_void,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalAppSettings_putGlobalValue: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: GlobalAppSettings,
            section: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            type_: GlobalSettingType,
            value: *const ::std::os::raw::c_void,
        ) -> bool_,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_GlobalSettings {
    pub data: GlobalSettingsData,
    pub dataOwner: *mut GlobalSettingsData,
    pub dataClass: *mut Class,
    pub __ecere_padding: [byte; 96usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_GlobalSettings"]
        [::std::mem::size_of::<class_members_GlobalSettings>() - 120usize];
    ["Alignment of class_members_GlobalSettings"]
        [::std::mem::align_of::<class_members_GlobalSettings>() - 8usize];
    ["Offset of field: class_members_GlobalSettings::data"]
        [::std::mem::offset_of!(class_members_GlobalSettings, data) - 0usize];
    ["Offset of field: class_members_GlobalSettings::dataOwner"]
        [::std::mem::offset_of!(class_members_GlobalSettings, dataOwner) - 8usize];
    ["Offset of field: class_members_GlobalSettings::dataClass"]
        [::std::mem::offset_of!(class_members_GlobalSettings, dataClass) - 16usize];
    ["Offset of field: class_members_GlobalSettings::__ecere_padding"]
        [::std::mem::offset_of!(class_members_GlobalSettings, __ecere_padding) - 24usize];
};
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_close:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: GlobalSettings)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_closeAndMonitor:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: GlobalSettings)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_load_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_GlobalSettings_load: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_onAskReloadSettings_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_GlobalSettings_onAskReloadSettings: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_openAndLock: ::std::option::Option<
        /*unsafe*/ extern "C" fn(__this: GlobalSettings, fileSize: *mut FileSize) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_save_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_GlobalSettings_save: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_settingsName: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_settingsName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_settingsName: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_settingsExtension: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_settingsExtension: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_settingsExtension: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_settingsDirectory: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_settingsDirectory: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_settingsDirectory: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_settingsLocation: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_settingsLocation: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_settingsLocation: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_settingsFilePath: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_settingsFilePath: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_settingsFilePath: ::std::option::Option<
        /*unsafe*/ extern "C" fn(g: GlobalSettings) -> *const ::std::os::raw::c_char,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_allowDefaultLocations: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_allowDefaultLocations:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_allowDefaultLocations:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_allUsers: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_allUsers:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_allUsers:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_portable: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_portable:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_portable:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_driver: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_set_driver:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings, value: constString)>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_driver:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings) -> constString>;
}
/*unsafe*/ extern "C" {
    pub static mut property_GlobalSettings_isGlobalPath: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettings_get_isGlobalPath:
        ::std::option::Option</*unsafe*/ extern "C" fn(g: GlobalSettings) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettingsDriver_load_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_GlobalSettingsDriver_load: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut GlobalSettingsDriver_save_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_GlobalSettingsDriver_save: *mut Method;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_members_JSONParser {
    pub f: File,
    pub customJsonOptions: OptionsMap,
    pub __ecere_padding: [byte; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_members_JSONParser"]
        [::std::mem::size_of::<class_members_JSONParser>() - 48usize];
    ["Alignment of class_members_JSONParser"]
        [::std::mem::align_of::<class_members_JSONParser>() - 8usize];
    ["Offset of field: class_members_JSONParser::f"]
        [::std::mem::offset_of!(class_members_JSONParser, f) - 0usize];
    ["Offset of field: class_members_JSONParser::customJsonOptions"]
        [::std::mem::offset_of!(class_members_JSONParser, customJsonOptions) - 8usize];
    ["Offset of field: class_members_JSONParser::__ecere_padding"]
        [::std::mem::offset_of!(class_members_JSONParser, __ecere_padding) - 16usize];
};
/*unsafe*/ extern "C" {
    pub static mut JSONParser_getObject: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            __this: JSONParser,
            objectType: *mut Class,
            object: *mut *mut ::std::os::raw::c_void,
        ) -> JSONResult,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONParser_debug: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONParser_set_debug:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONParser, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONParser_get_debug:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONParser) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut property_JSONParser_warnings: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut JSONParser_set_warnings:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONParser, value: bool_)>;
}
/*unsafe*/ extern "C" {
    pub static mut JSONParser_get_warnings:
        ::std::option::Option</*unsafe*/ extern "C" fn(j: JSONParser) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut printECONObject: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            indent: ::std::os::raw::c_int,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut printObjectNotationString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            onType: ObjectNotationType,
            indent: ::std::os::raw::c_int,
            indentFirst: bool_,
            capitalize: JSONFirstLetterCapitalization,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut stringIndent: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            base: constString,
            nSpaces: ::std::os::raw::c_int,
            indentFirst: bool_,
        ) -> String,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut writeECONObject: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            f: File,
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            indent: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut writeJSONObject: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            f: File,
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            indent: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut writeJSONObject2: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            f: File,
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            indent: ::std::os::raw::c_int,
            capitalize: JSONFirstLetterCapitalization,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut writeJSONObjectMapped: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            f: File,
            objectType: *mut Class,
            object: *mut ::std::os::raw::c_void,
            indent: ::std::os::raw::c_int,
            stringMap: Map,
        ) -> bool_,
    >;
}
/*unsafe*/ extern "C" {
    pub static mut writeONString: ::std::option::Option<
        /*unsafe*/ extern "C" fn(
            f: File,
            s: constString,
            eCON: bool_,
            indent: ::std::os::raw::c_int,
        ) -> bool_,
    >;
}
pub type Thread = Instance;
pub type ThreadPriority = ::std::os::raw::c_int;
pub const ThreadPriority_ThreadPriority_normal: ThreadPriority = 0;
pub const ThreadPriority_ThreadPriority_aboveNormal: ThreadPriority = 1;
pub const ThreadPriority_ThreadPriority_belowNormal: ThreadPriority = -1;
pub const ThreadPriority_ThreadPriority_highest: ThreadPriority = 2;
pub const ThreadPriority_ThreadPriority_lowest: ThreadPriority = -2;
pub const ThreadPriority_ThreadPriority_idle: ThreadPriority = -15;
pub const ThreadPriority_ThreadPriority_timeCritical: ThreadPriority = 15;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Condition {
    pub __ecere_padding: [byte; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Condition"][::std::mem::size_of::<Condition>() - 40usize];
    ["Alignment of Condition"][::std::mem::align_of::<Condition>() - 1usize];
    ["Offset of field: Condition::__ecere_padding"]
        [::std::mem::offset_of!(Condition, __ecere_padding) - 0usize];
};
/*unsafe*/ extern "C" {
    pub static mut Condition_signal:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Condition)>;
}
/*unsafe*/ extern "C" {
    pub static mut Condition_wait:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Condition, mutex: *mut Mutex)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Condition_name: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Condition_set_name: ::std::option::Option<
        /*unsafe*/ extern "C" fn(c: *const Condition, value: *const ::std::os::raw::c_char),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Condition_get_name: ::std::option::Option<
        /*unsafe*/ extern "C" fn(c: *const Condition) -> *const ::std::os::raw::c_char,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mutex {
    pub __ecere_padding: [byte; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Mutex"][::std::mem::size_of::<Mutex>() - 56usize];
    ["Alignment of Mutex"][::std::mem::align_of::<Mutex>() - 1usize];
    ["Offset of field: Mutex::__ecere_padding"]
        [::std::mem::offset_of!(Mutex, __ecere_padding) - 0usize];
};
/*unsafe*/ extern "C" {
    pub static mut Mutex_release: ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Mutex)>;
}
/*unsafe*/ extern "C" {
    pub static mut Mutex_wait: ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Mutex)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Mutex_lockCount: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Mutex_get_lockCount:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const Mutex) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Mutex_owningThread: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Mutex_get_owningThread:
        ::std::option::Option</*unsafe*/ extern "C" fn(m: *const Mutex) -> int64>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Semaphore {
    pub __ecere_padding: [byte; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Semaphore"][::std::mem::size_of::<Semaphore>() - 40usize];
    ["Alignment of Semaphore"][::std::mem::align_of::<Semaphore>() - 1usize];
    ["Offset of field: Semaphore::__ecere_padding"]
        [::std::mem::offset_of!(Semaphore, __ecere_padding) - 0usize];
};
/*unsafe*/ extern "C" {
    pub static mut Semaphore_release:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Semaphore)>;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_tryWait:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Semaphore) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_wait:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: *mut Semaphore)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Semaphore_initCount: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_set_initCount: ::std::option::Option<
        /*unsafe*/ extern "C" fn(s: *const Semaphore, value: ::std::os::raw::c_int),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_get_initCount:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: *const Semaphore) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Semaphore_maxCount: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_set_maxCount: ::std::option::Option<
        /*unsafe*/ extern "C" fn(s: *const Semaphore, value: ::std::os::raw::c_int),
    >;
}
/*unsafe*/ extern "C" {
    pub static mut Semaphore_get_maxCount:
        ::std::option::Option</*unsafe*/ extern "C" fn(s: *const Semaphore) -> ::std::os::raw::c_int>;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_create: ::std::option::Option</*unsafe*/ extern "C" fn(__this: Thread)>;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_kill: ::std::option::Option</*unsafe*/ extern "C" fn(__this: Thread)>;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_main_vTblID: ::std::os::raw::c_int;
}
/*unsafe*/ extern "C" {
    pub static mut method_Thread_main: *mut Method;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_setPriority:
        ::std::option::Option</*unsafe*/ extern "C" fn(__this: Thread, priority: ThreadPriority)>;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_wait: ::std::option::Option</*unsafe*/ extern "C" fn(__this: Thread)>;
}
/*unsafe*/ extern "C" {
    pub static mut property_Thread_created: *mut Property;
}
/*unsafe*/ extern "C" {
    pub static mut Thread_get_created:
        ::std::option::Option</*unsafe*/ extern "C" fn(t: Thread) -> bool_>;
}
/*unsafe*/ extern "C" {
    pub static mut getCurrentThreadID: ::std::option::Option</*unsafe*/ extern "C" fn() -> int64>;
}
/*unsafe*/ extern "C" {
    pub static mut class_Application: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Instance: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Module: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_AccessMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Angle: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BTNamedLink: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BackSlashEscaping: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BitMember: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Box: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CIString: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Centimeters: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Class: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ClassDesignerBase: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ClassProperty: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ClassTemplateArgument: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ClassTemplateParameter: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ClassType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DataMember: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DataMemberType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DataValue: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DefinedExpression: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Degrees: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DesignerBase: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Distance: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_EnumClassData: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_EscapeCStringOptions: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Feet: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalFunction: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_IOChannel: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ImportType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Meters: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Method: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_MethodType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_MinMaxValue: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_NameSpace: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ObjectInfo: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ObjectNotationType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Platform: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Point: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Pointd: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Pointf: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Property: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Radians: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SerialBuffer: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Size: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_StaticString: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_StringAllocType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SubModule: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TemplateMemberType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TemplateParameterType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ZString: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_String: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_byte: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_char: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_class: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_double: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_enum: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_float: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_int: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_int64: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_intptr: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_intsize: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_short: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_struct: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uint: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uint16: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uint32: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uint64: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uintptr: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_uintsize: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FieldType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FieldTypeEx: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FieldValue: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FieldValueFormat: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_AVLNode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_AVLTree: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Array: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BTNode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BinaryTree: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BuiltInContainer: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Container: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CustomAVLTree: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_HashMap: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_HashMapIterator: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_HashTable: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Item: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Iterator: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_IteratorPointer: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Link: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_LinkElement: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_LinkList: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_List: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ListItem: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Map: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_MapIterator: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_MapNode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_NamedItem: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_NamedLink: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_NamedLink64: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_OldLink: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_OldList: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_StringBTNode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_StringBinaryTree: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TreePrintStyle: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Date: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DateTime: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DayOfTheWeek: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Month: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SecSince1970: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Seconds: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Time: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TimeStamp: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TimeStamp32: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Archive: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ArchiveAddMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ArchiveDir: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ArchiveOpenFlags: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_BufferedFile: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ConsoleFile: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_DualPipe: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ErrorCode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ErrorLevel: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_File: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileAttribs: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileChange: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileListing: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileLock: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileMonitor: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileOpenMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileSeekMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileSize: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileSize64: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_FileStats: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GuiErrorCode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_LoggingMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_MoveFileOptions: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_PipeOpenMode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SysErrorCode: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_TempFile: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CharCategories: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_CharCategory: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_PredefinedCharCategories: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_UnicodeDecomposition: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ECONGlobalSettings: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ECONParser: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalAppSettings: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalSettingType: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalSettings: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalSettingsData: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_GlobalSettingsDriver: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONFirstLetterCapitalization: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONGlobalSettings: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONParser: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONResult: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_JSONTypeOptions: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_OptionsMap: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SetBool: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_SettingsIOResult: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Condition: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Mutex: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Semaphore: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_Thread: *mut Class;
}
/*unsafe*/ extern "C" {
    pub static mut class_ThreadPriority: *mut Class;
}
/*unsafe*/ extern "C" {
    #[doc = " dll function imports //////// ////////////////\n ////////////////\n ////////////////"]
    pub fn __eCNameSpace__eC__i18n__GetTranslatedString(
        name: constString,
        string: *const ::std::os::raw::c_char,
        stringAndContext: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__i18n__LoadTranslatedStrings(
        moduleName: constString,
        name: *const ::std::os::raw::c_char,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__i18n__UnloadTranslatedStrings(name: constString);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__MemoryGuard_PopLoc();
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__MemoryGuard_PushLoc(loc: *const ::std::os::raw::c_char);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddBitMember(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        bitSize: ::std::os::raw::c_int,
        bitPos: ::std::os::raw::c_int,
        declMode: AccessMode,
    ) -> *mut BitMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddClassProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        dataType: *const ::std::os::raw::c_char,
        setStmt: *mut ::std::os::raw::c_void,
        getStmt: *mut ::std::os::raw::c_void,
    ) -> *mut ClassProperty;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddDataMember(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: uint,
        alignment: uint,
        declMode: AccessMode,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddMember(
        _class: *mut Class,
        dataMember: *mut DataMember,
    ) -> bool_;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddMethod(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        function: *mut ::std::os::raw::c_void,
        declMode: AccessMode,
    ) -> *mut Method;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        dataType: *const ::std::os::raw::c_char,
        setStmt: *mut ::std::os::raw::c_void,
        getStmt: *mut ::std::os::raw::c_void,
        declMode: AccessMode,
    ) -> *mut Property;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddTemplateParameter(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        type_: TemplateParameterType,
        info: *const ::std::os::raw::c_void,
        defaultArg: *mut ClassTemplateArgument,
    ) -> *mut ClassTemplateParameter;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_AddVirtualMethod(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        function: *mut ::std::os::raw::c_void,
        declMode: AccessMode,
    ) -> *mut Method;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_DestructionWatchable(_class: *mut Class);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_DoneAddingTemplateParameters(base: *mut Class);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindClassProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ClassProperty;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindDataMember(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        module: Module,
        subMemberStack: *mut DataMember,
        subMemberStackPos: *mut ::std::os::raw::c_int,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindDataMemberAndId(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        id: *mut ::std::os::raw::c_int,
        module: Module,
        subMemberStack: *mut DataMember,
        subMemberStackPos: *mut ::std::os::raw::c_int,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindDataMemberAndOffset(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        offset: *mut uint,
        module: Module,
        subMemberStack: *mut DataMember,
        subMemberStackPos: *mut ::std::os::raw::c_int,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindMethod(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        module: Module,
    ) -> *mut Method;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindNextMember(
        _class: *mut Class,
        curClass: *mut Class,
        curMember: *mut DataMember,
        subMemberStack: *mut DataMember,
        subMemberStackPos: *mut ::std::os::raw::c_int,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_FindProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        module: Module,
    ) -> *mut Property;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_GetDesigner(_class: *mut Class) -> *mut Class;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_GetProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
    ) -> int64;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_IsDerived(
        _class: *mut Class,
        from: *mut Class,
    ) -> bool_;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_Resize(
        _class: *mut Class,
        newSize: ::std::os::raw::c_int,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_SetProperty(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        value: int64,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eClass_Unregister(_class: *mut Class);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eCrt_Initialize(
        guiApp: bool_,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> Application;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eEnum_AddFixedValue(
        _class: *mut Class,
        string: *const ::std::os::raw::c_char,
        value: int64,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eEnum_AddValue(
        _class: *mut Class,
        string: *const ::std::os::raw::c_char,
    ) -> int64;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_DecRef(instance: Instance);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_Delete(instance: Instance);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_Evolve(
        instancePtr: *mut Instance,
        _class: *mut Class,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_FireSelfWatchers(
        instance: Instance,
        _property: *mut Property,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_FireWatchers(
        instance: Instance,
        _property: *mut Property,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_GetDesigner(instance: Instance) -> *mut Class;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_IncRef(instance: Instance);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_IsDerived(
        instance: Instance,
        from: *mut Class,
    ) -> bool_;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_New(
        _class: *mut Class,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_NewEx(
        _class: *mut Class,
        bindingsAlloc: bool_,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_SetMethod(
        instance: Instance,
        name: *const ::std::os::raw::c_char,
        function: *mut ::std::os::raw::c_void,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_StopWatching(
        instance: Instance,
        _property: *mut Property,
        object: Instance,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_Watch(
        instance: Instance,
        _property: *mut Property,
        object: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            /*unsafe*/ extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eInstance_WatchDestruction(
        instance: Instance,
        object: Instance,
        callback: ::std::option::Option<
            /*unsafe*/ extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eMember_AddDataMember(
        member: *mut DataMember,
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: uint,
        alignment: uint,
        declMode: AccessMode,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eMember_AddMember(
        addTo: *mut DataMember,
        dataMember: *mut DataMember,
    ) -> bool_;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eMember_New(
        type_: DataMemberType,
        declMode: AccessMode,
    ) -> *mut DataMember;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eModule_Load(
        fromModule: Module,
        name: *const ::std::os::raw::c_char,
        importAccess: AccessMode,
    ) -> Module;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eModule_LoadStatic(
        fromModule: Module,
        name: *const ::std::os::raw::c_char,
        importAccess: AccessMode,
        Load: ::std::option::Option</*unsafe*/ extern "C" fn(module: Module) -> bool_>,
        Unload: ::std::option::Option</*unsafe*/ extern "C" fn(module: Module) -> bool_>,
    ) -> Module;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eModule_LoadStrict(
        fromModule: Module,
        name: *const ::std::os::raw::c_char,
        importAccess: AccessMode,
    ) -> Module;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eModule_Unload(fromModule: Module, module: Module);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eProperty_SelfWatch(
        _class: *mut Class,
        name: *const ::std::os::raw::c_char,
        callback: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eProperty_Watchable(_property: *mut Property);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_Delete(memory: *mut ::std::os::raw::c_void);
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_FindClass(
        module: Module,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Class;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_FindDefine(
        module: Module,
        name: *const ::std::os::raw::c_char,
    ) -> *mut DefinedExpression;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_FindFunction(
        module: Module,
        name: *const ::std::os::raw::c_char,
    ) -> *mut GlobalFunction;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_New(size: uint) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_New0(size: uint) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_RegisterClass(
        type_: ClassType,
        name: *const ::std::os::raw::c_char,
        baseName: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        sizeClass: ::std::os::raw::c_int,
        Constructor: ::std::option::Option<
            /*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> bool_,
        >,
        Destructor: ::std::option::Option</*unsafe*/ extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        module: Module,
        declMode: AccessMode,
        inheritanceAccess: AccessMode,
    ) -> *mut Class;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_RegisterDefine(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        module: Module,
        declMode: AccessMode,
    ) -> *mut DefinedExpression;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_RegisterFunction(
        name: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        func: *mut ::std::os::raw::c_void,
        module: Module,
        declMode: AccessMode,
    ) -> *mut GlobalFunction;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_Renew(
        memory: *mut ::std::os::raw::c_void,
        size: uint,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_Renew0(
        memory: *mut ::std::os::raw::c_void,
        size: uint,
    ) -> *mut ::std::os::raw::c_void;
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_SetArgs(
        app: Application,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    );
}
/*unsafe*/ extern "C" {
    pub fn __eCNameSpace__eC__types__eSystem_SetPoolingDisabled(disabled: bool_);
}
/*unsafe*/ extern "C" {
    pub static mut __thisModule: Module;
}
/*unsafe*/ extern "C" {
    pub fn ecrt_init(
        fromModule: Module,
        loadEcere: bool_,
        guiApp: bool_,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> Application;
}

pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
